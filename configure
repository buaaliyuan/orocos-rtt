#!/bin/bash

echo "Orocos configure script."

function usage
{
   echo "This script allows you to set the compiler."
   echo "Usage : ../configure [--prefix=/install/path][CC=compiler][CXX=compiler]"
}

function getcompiler
{
    arg=$1
    if [ $(expr match "$arg" "CC=") != 0 ]; then
	CMAKE_CC="$arg"
    fi

    if [ $(expr match "$arg" "CXX=") != 0 ]; then
	CMAKE_CXX="$arg"
    fi

    if [ $(expr match "$arg" "--prefix=") != 0 ]; then
	CMAKE_PREFIX="${arg:9}"
    fi
    if [ $(expr match "$arg" "--with-xenomai") != 0 ]; then
	CMAKE_XENO=1
        CMAKE_XENO_PATH="${arg:15}"
    fi
    if [ $(expr match "$arg" "--with-lxrt") != 0 ]; then
	CMAKE_LXRT=1
	CMAKE_LXRT_PATH="${arg:12}"
    fi
}

while [ "$1" != "" ]; do
    case $1 in
        -h | --help )           usage
                                exit
                                ;;
        * )                     getcompiler $1
    esac
    shift
done

if [ -f ./configure ]; then
   echo "Error: run configure from a 'build' directory:"
   echo " $ mkdir build"
   echo " $ cd build"
   echo " $ ../configure [options]"
   exit 1
fi

if [ -f ./CMakeCache.txt ]; then
   echo "Error: One can not change the compiler once configured !"
   echo "Error: In order to change the compiler, use a fresh build directory."
   exit 1
fi

if [ x$(which cmake) == x ]; then
   echo "Error: 'cmake' executable not found. Download it from http://www.cmake.org"
   echo "Error: or install the cmake package of your distribution version 2.2 or higher."
   exit 1
fi

# --prefix
if [ x$CMAKE_PREFIX != x ]; then
   CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX"
fi

# --with-lxrt
if [ x$CMAKE_LXRT != x ]; then
   CMAKE_ARGS="$CMAKE_ARGS -DOROCOS_TARGET=lxrt"
   if [ x$CMAKE_LXRT_PATH != x ]; then
     CMAKE_ARGS="$CMAKE_ARGS -DRTAI_INSTALL_DIR=$CMAKE_LXRT_PATH"
   fi   
fi

# --with-xenomai
if [ x$CMAKE_XENO != x ]; then
   CMAKE_ARGS="$CMAKE_ARGS -DOROCOS_TARGET=xenomai"
   if [ x$CMAKE_XENO_PATH != x ]; then
     CMAKE_ARGS="$CMAKE_ARGS -DXENOMAI_INSTALL_DIR=$CMAKE_XENO_PATH"
   fi   
fi

CMAKE_EXE=$(which cmake)

echo "Invoking: '$CMAKE_CC $CMAKE_CXX $CMAKE_EXE .. $CMAKE_ARGS'"
export $CMAKE_CC 
export $CMAKE_CXX 
$CMAKE_EXE .. $CMAKE_ARGS || { echo -e "\ncmake produced an error - removing cache."; rm CMakeCache.txt; exit 1; }

echo
echo "OK: configure done. Now issue 'make'."
