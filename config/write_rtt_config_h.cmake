###########################################################
#                                                         #
# Look for low-level C headers, write defines to orocos-components-config.h #
#                                                         #
###########################################################

CONFIGURE_FILE( ${PROJ_SOURCE_DIR}/src/rtt-config.h.in ${PROJ_BINARY_DIR}/src/rtt-config.h @ONLY)

FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "/* Generated by CMakeLists.txt */\n\n" )

IF(BOOST_SUPPORT)
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORO_SUPPORT_BOOST\n" )
ENDIF(BOOST_SUPPORT)


IF(XERCES_SUPPORT)
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_SUPPORT_XERCES_C\n" )
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORODAT_CORELIB_PROPERTIES_DEMARSHALLING_INCLUDE \"marsh/CPFDemarshaller.hpp\"\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROCLS_CORELIB_PROPERTIES_DEMARSHALLING_DRIVER CPFDemarshaller\n")
ELSE(XERCES_SUPPORT)
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORODAT_CORELIB_PROPERTIES_DEMARSHALLING_INCLUDE \"marsh/TinyDemarshaller.hpp\"\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROCLS_CORELIB_PROPERTIES_DEMARSHALLING_DRIVER TinyDemarshaller\n")
ENDIF(XERCES_SUPPORT)

IF(RTAI_SUPPORT)
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_SUPPORT_RTAI\n" )
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_SUPPORT_RTAI_DIR ${RTAI_INSTALL_DIR}\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_SUPPORT_RTAI_LINUX_KERNEL ${LINUX_SOURCE_DIR}\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_SUPPORT_RTAI_LINUX_HEADERS ${LINUX_SOURCE_DIR}/include\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_SUPPORT_RTAI_VERSION 3\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_SUPPORT_RTAI_VERSION_3\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROSEM_OS_LXRT_CHECK 1\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORONUM_RTAI_VERSION 3\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORONUM_RTAI_VERSION_3\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORO_RTAI_CONFIG \"-I${RTAI_INSTALL_DIR}/include/include/config.h\"\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROSEM_OS_SCHEDTYPE SCHED_OTHER\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROSEM_OS_SCHEDTYPE_SCHED_OTHER\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_OS_ENABLE_LINUX_KERNEL 1\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define CYGBLD_GLOBAL_OPTIONS 1\n")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_OS_LXRT_CFLAGS_REMOVE -O3\n")
ENDIF(RTAI_SUPPORT)

IF(XENOMAI_SUPPORT)
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_SUPPORT_XENOMAI\n" )
ENDIF(XENOMAI_SUPPORT)

IF(CORBA_SUPPORT)
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_SUPPORT_CORBA\n" )
ENDIF(CORBA_SUPPORT)

IF(OROCOS_TARGET STREQUAL "gnulinux")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_OS_GNULINUX\n" )
ENDIF(OROCOS_TARGET STREQUAL "gnulinux")
IF(OROCOS_TARGET STREQUAL "lxrt")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_OS_LXRT\n" )
ENDIF(OROCOS_TARGET STREQUAL "lxrt")
IF(OROCOS_TARGET STREQUAL "xenomai")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROPKG_OS_XENOMAI\n" )
ENDIF(OROCOS_TARGET STREQUAL "xenomai")

FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_OS_AGNOSTIC 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORONUM_OS_MAX_THREADS 8\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define ORONUM_OS_MAX_THREADS_8\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROCLS_OS_MINIMAL_STREAMS 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROSEM_OS_PERIODIC_THREADS_MAX_OVERRUN 5\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROSEM_OS_PERIODIC_THREADS_MAX_OVERRUN_5\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROSEM_OS_LOCK_MEMORY 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_TARGET 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_MAIN 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OS_HAVE_MAIN 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_LINUX_IOPERM 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_STDCXXLIB 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_STL_LIB 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_STDIOSTREAM 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define HAVE_IOSTREAM 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_STREAMS 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define HAVE_STREAMS 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_KERNEL_MODULE 1\n" )
FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROINT_OS_TAO 1\n" )

IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "i386" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i486" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i586" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
  FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_OS_ARCH_i386\n")
ELSE(CMAKE_SYSTEM_PROCESSOR STREQUAL "i386" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i486" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i586" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
  IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#define OROBLD_OS_ARCH_x86_64\n")
  ELSE(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    MESSAGE(SEND_ERROR "Machine type not recognised")
  ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "i386" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i486" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i586" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")

FILE( APPEND ${PROJ_BINARY_DIR}/src/rtt-config.h "#endif\n" )
