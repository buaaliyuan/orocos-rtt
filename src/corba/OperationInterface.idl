#ifndef ORO_OPERATION_INTERFACE_IDL
#define ORO_OPERATION_INTERFACE_IDL

//resolves LNK2005
#include <tao/orb.idl>
#include "Operations.idl"

module RTT
{
  module Corba
  {
    typedef sequence<string> MethodList;
    typedef sequence<string> CommandList;
    typedef sequence<Expression> Arguments;

    /**
     * When querying a method or command for
     * the kinds of arguments it takes, this
     * structure is returned for each argument.
     */
    struct ArgumentDescription
    {
      string name;
      string description;
      string type;
    };

    typedef sequence<ArgumentDescription> Descriptions;

    exception NoSuchNameException
    {
      string name;
    };

    /**
     * A Method interface delivers objects which contain expressions.
     * @ingroup CompIDL
     */
    interface MethodInterface
    {

      /**
       * Get a list of all methods.
       */
      MethodList getMethods();

      /**
       * Get a list of all arguments of a given method.
       */
      Descriptions getArguments(in string method) raises (NoSuchNameException);

      /**
       * Get a result type of a given method.
       */
      string getResultType(in string method) raises (NoSuchNameException);

      /**
       * Get a description of a given method.
       */
      string getDescription(in string method) raises (NoSuchNameException);

      /**
       * Create a method and fill in the arguments later on.
       */
      //Method createMethod(in string method) raises (NoSuchNameException);

      /**
       * Create a method with Expression arguments.
       */
      Method createMethod(in string method, in Arguments args) raises (NoSuchNameException,
								       WrongNumbArgException,
								       WrongTypeArgException);
      /**
       * Create a method with Any arguments.
       */
      Method createMethodAny(in string method, in AnyArguments args) raises ( NoSuchNameException,
									      WrongNumbArgException,
									      WrongTypeArgException);
    };

    /**
     * A Command interface delivers objects which contain asynchronous commands.
     * @ingroup CompIDL
     */
    interface CommandInterface
    {
      /**
       * Get a list of all commands.
       */
      CommandList getCommands();

      /**
       * Get a list of all arguments of a given command.
       */
      Descriptions getArguments(in string command) raises (NoSuchNameException);

      /**
       * Get a result type of a given command.
       */
      string getResultType(in string command) raises (NoSuchNameException);

      /**
       * Get a description of a given command.
       */
      string getDescription(in string command) raises (NoSuchNameException);

      /**
       * Create a command and fill in the arguments later.
       */
      //Command createCommand(in string command) raises (NoSuchNameException);

      /**
       * Create a command of an object.
       */
      Command createCommand(in string command, in Arguments args) raises ( NoSuchNameException,
									   WrongNumbArgException,
									   WrongTypeArgException);

      /**
       * Create a command of an object with any arguments.
       */
      Command createCommandAny(in string command, in AnyArguments args) raises ( NoSuchNameException,
										 WrongNumbArgException,
										 WrongTypeArgException);

    };
  };
};
#endif
