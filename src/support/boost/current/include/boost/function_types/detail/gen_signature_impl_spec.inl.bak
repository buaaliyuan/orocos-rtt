
// (C) Copyright Tobias Schwinger
//
// Use modification and distribution are subject to the boost Software License,
// Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt).

#ifndef BOOST_PP_IS_ITERATING
//------------------------------------------------------------------------------
#   include <boost/preprocessor/cat.hpp>
#   include <boost/preprocessor/arithmetic/inc.hpp>
#   include <boost/preprocessor/arithmetic/dec.hpp>
#   include <boost/preprocessor/facilities/empty.hpp>
#   include <boost/preprocessor/facilities/identity.hpp>
#   include <boost/preprocessor/facilities/intercept.hpp>
#   include <boost/preprocessor/iteration/iterate.hpp>
#   include <boost/preprocessor/repetition/enum_params.hpp>
#   include <boost/preprocessor/repetition/enum_shifted_params.hpp>
#   include <boost/preprocessor/repetition/enum_trailing_params.hpp>
//------------------------------------------------------------------------------
#   define BOOST_PP_ITERATION_PARAMS_1 \
      (3,(0,BOOST_FT_MAX_ARITY,BOOST_FT_FRAGMENT(signature_impl_spec,N_Ts)))
#include BOOST_PP_ITERATE()
//------------------------------------------------------------------------------
#else // ndef } BOOST_PP_IS_ITERATING { def
//------------------------------------------------------------------------------
#   ifndef i // +1 == ii == N_Ts 
//------------------------------------------------------------------------------
#     define i BOOST_PP_FRAME_ITERATION(1)
#     define ii BOOST_PP_INC(i)
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     define k no_function
#     define t(x) T<R BOOST_PP_ENUM_TRAILING_PARAMS(i,T)> x()
#     define a ii
#     define tp \
        template< BOOST_PP_ENUM_PARAMS(a,typename BOOST_PP_INTERCEPT) > class T\
      , typename R BOOST_PP_ENUM_TRAILING_PARAMS(i,typename T) 
#     include BOOST_FT_FRAGMENT(signature_impl_spec, specialization body)
#     undef  tp
#     undef  a
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     define tp \
        typename R BOOST_PP_ENUM_TRAILING_PARAMS(i,typename T) 
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     define k function_pointer
#     define t(x) R (*x())(BOOST_PP_ENUM_PARAMS(i,T))
#     define a i
#     include BOOST_FT_FRAGMENT(signature_impl_spec, specialization body)
#     undef  a
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     if ii >= 2 // member function pointers must have at least two sub types
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       define a BOOST_PP_DEC(i)
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       define k member_function_pointer
#       define t(x) R (T0::*x())(BOOST_PP_ENUM_SHIFTED_PARAMS(i,T))
#       include BOOST_FT_FRAGMENT(signature_impl_spec, specialization body)

#       define k const_member_function_pointer
#       define t(x) R (T0::*x())(BOOST_PP_ENUM_SHIFTED_PARAMS(i,T)) const
#       include BOOST_FT_FRAGMENT(signature_impl_spec, specialization body)

#       define k volatile_member_function_pointer
#       define t(x) R (T0::*x())(BOOST_PP_ENUM_SHIFTED_PARAMS(i,T)) volatile
#       include BOOST_FT_FRAGMENT(signature_impl_spec, specialization body)

#       define k const_volatile_member_function_pointer
#       define t(x) R (T0::*x())(BOOST_PP_ENUM_SHIFTED_PARAMS(i,T)) const volatile 
#       include BOOST_FT_FRAGMENT(signature_impl_spec, specialization body)
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       undef a
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     endif // ii >= 2
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     undef tp
#     undef ii
#     undef i
//------------------------------------------------------------------------------
#   else // specialization body
//------------------------------------------------------------------------------
template< tp >
struct signature_impl
< t(BOOST_PP_EMPTY) >
{
  typedef t(BOOST_PP_IDENTITY(representee));
  typedef k kind;

  typedef function_type_signature< representee > type;
  typedef signature_seq_tag tag;

  typedef mpl::size_t< a > arity;

  typedef BOOST_PP_CAT(mpl::vector,ii)
    < R BOOST_PP_ENUM_TRAILING_PARAMS(i,T)> types;
};
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     undef t
#     undef k
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   endif
//------------------------------------------------------------------------------
#endif // def BOOST_PP_IS_ITERATING
