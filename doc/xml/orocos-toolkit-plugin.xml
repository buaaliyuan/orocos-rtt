<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY orocos      "<acronym>Orocos</acronym>">
]
>

<article>
  <articleinfo>
    <title>Extending the Real-Time Toolkit</title>
    <authorgroup>
      <author>
	<firstname>Peter</firstname>
	<surname>Soetens</surname>
	<affiliation>
	  <orgname>FMTC/K.U.Leuven</orgname>
	  <address><country>Belgium</country></address>
	</affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>2006</year>
      <holder>Peter Soetens, FMTC</holder>
    </copyright>

    <abstract>
      <para>
	This document is an introduction to making user defined types
	(classes) visible within &orocos;. You need to read this
	document when you want to see the value of an object you
	defined yourself, for example in the TaskBrowser component or
	in an Orocos script. Other uses are reading and writing
	objects to and from XML and generally, anything a built-in
	Orocos type can do, so can yours.
      </para>
    </abstract>

    <revhistory>
      <revision>
	<revnumber>1.0.1</revnumber>
	<date>24 Nov 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Separated from the Developer's Manual.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>
  <section>
    <title>The Orocos Type System : Toolkits</title>
    <para>
      Most applications define their own classes or structs to exchange
      data between objects. It is possible to tell Orocos about these
      user defined types such that they can be displayed, stored to XML,
      used in the scripting engine or even transfered over a network
      connection.
    </para>

    <section>
      <title>The Real-Time Toolkit</title>
      <para>
	Orocos uses the 'Toolkit' principle to make it aware of user
	types. Orocos' Real-Time Toolkit already provides support for
	the C++ types <classname>int</classname>,<classname>unsigned
	int</classname>,<classname>double</classname>,
	<classname>char</classname>,<classname>bool</classname>,<classname>float</classname>,
	<classname>vector&lt;double&gt;</classname> and
	<classname>string</classname>.
      </para>
      <para>
	A toolkit can be imported into the application by writing:
	<programlisting>  #include &lt;rtt/RealTimeToolkit.hpp>
  // ...
  RTT::Toolkit::Import( RTT::RealTimeToolkit );	</programlisting>
	This is however done automatically, unless you disabled that
	option in the configuration system. After this line is executed,
	Orocos is able to display, transfer over a network or recognise
	these types in scripts.
      </para>
    </section>
    <section>
      <title>Telling Orocos about your data</title>
      <para>
	Say that you have an application which transfers data
	in a struct <classname>ControlData</classname> :
	<programlisting>  struct ControlData {
    double x, y, z;
    int sample_nbr;
  }</programlisting>
        How can you tell Orocos how to handle this type ? A helper
	class is provided which you can extend to fit your needs,
	<classname>RTT::TemplateTypeInfo</classname>.
	<programlisting>  #include &lt;rtt/TemplateTypeInfo.hpp>
  // ...
  struct ControlDataTypeInfo
    : public RTT::TemplateTypeInfo&lt;ControlData>
  {
     ControlDataTypeInfo()
        : RTT::TemplateTypeInfo&lt;ControlData>("ControlData")
     {}
  };

  // Tell Orocos the name and type of this struct:
  RTT::TypeInfoRepository::Instance()->addType( new ControlDataTypeInfo() );
	</programlisting>
	From now on, Orocos knows the 'ControlData' type name and allows
	you to create a scripting variable of that type. It does however
	not know yet how to display it or write it to an XML file.
      </para>
      <note>
	<para>
	  The type is now usable as a 'var' in a script, however,
	  in order to initialise a variable, you need to add a constructor as
	  well. See <xref linkend="overloading-constructors" />. 
	</para>
      </note>
      <section>
	<title>Displaying</title>
	<para>
	  In order to tell Orocos how to display your type, you
	  may overload the <function>TemplateTypeInfo::write</function> fuction
	  or define <function>operator&lt;&lt;()</function> for your type:
	</para>
	<programlisting>  #include &lt;rtt/TemplateTypeInfo.hpp>
  #include &lt;ostream>

  std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const ControlData&amp; cd) {
     return os &lt;&lt; '('&lt;&lt; cd.x &lt;&lt; cd.y &lt;&lt; cd.z &lt;&lt; '): ' &lt;&lt; cd.sample_nbr;
  }
  // ...
  // 'true' argument: <emphasis> it has operator&lt;&lt;</emphasis>
  struct ControlDataTypeInfo
    : public RTT::TemplateTypeInfo&lt;ControlData,<emphasis>true</emphasis>>
  {
     ControlDataTypeInfo()
        : RTT::TemplateTypeInfo&lt;ControlData,<emphasis>true</emphasis>>("ControlData")
     {}
  };

  // Tell Orocos the name and type of this struct
  RTT::TypeInfoRepository::Instance()->addType( new ControlDataTypeInfo() );
	</programlisting>
	<para>
	  If you use the above line of code to add the type, Orocos will be
	  able to display it as well, for example in the TaskBrowser or
	  in the ReportingComponent.
	</para>
      </section>
      <section>
	<title>Writing to XML</title>
	<para>
	  In order to inform Orocos of the structure of your data type,
	  it must be given a 'decompose' function: Of which primitive types
	  does the struct consists ? Representing structured data is what
	  Orocos <classname>RTT::Property</classname> objects do.
	  Here is how to tell Orocos how the "ControlData" is structured:
	</para>
	<programlisting>  // ...
  struct ControlDataTypeInfo
    : public TemplateTypeInfo&lt;ControlData,true>
  {
     // ... other functions omitted

     virtual bool decomposeTypeImpl(const ControlData&amp; in, PropertyBag&amp; targetbag ) const {
         targetbag.setType("ControlData");
         targetbag.add( new Property&lt;double>("X", "X value of my Data", in.x ) );
         targetbag.add( new Property&lt;double>("Y", "Y value of my Data", in.y ) );
         targetbag.add( new Property&lt;double>("Z", "Z value of my Data", in.z ) );
         targetbag.add( new Property&lt;int>("Sample", "The sample number of the Data", in.sample_nbr ) );
         return true;
     }
  }</programlisting>
        <para>
	  That was easy ! For each member of your struct, add a
	  <classname>RTT::Property</classname> of the correct
	  type to the targetbag and you're done !
	  <function>setType()</function> can be used lateron to
	  determine the version or type of your XML representation.  Next,
	  if Orocos tries to write an XML file with ControlData in it,
	  it will look like:
	</para>
	<programlisting>
<![CDATA[  <struct name="MyData" type="ControlData">
    <simple name="X" type="double">
       <description>X value of my Data</description>
       <value>0.12</value>
    </simple>
    <simple name="Y" type="double">
       <description>Y value of my Data</description>
       <value>1.23</value>
    </simple>
    <simple name="Z" type="double">
       <description>Z value of my Data</description>
       <value>3.21</value>
    </simple>
    <simple name="Sample" type="short">
       <description>The sample number of the Data</description>
       <value>3123</value>
    </simple>
  </struct>]]>
	</programlisting>
      </section>
      <section>
	<title>Reading from XML</title>
	<para>
	  Orocos does not know yet how to convert an XML format back
	  to the ControlData object. This operation is called 'composition'
	  and is fairly simple as well:
	  Here is how to tell Orocos how the "ControlData" is read:
	</para>
	<programlisting>  // ...
  struct ControlDataTypeInfo
    : public TemplateTypeInfo&lt;ControlData,true>
  {

     // ... other functions omitted

     virtual bool composeTypeImpl(const PropertyBag&amp; bag, ControlData&amp; out ) const 
     {
        if ( bag.getType() == std::string("ControlData") ) // check the type
        {  
          Property&lt;double>* x = targetbag.getProperty&lt;double>("X");
          Property&lt;double>* y = targetbag.getProperty&lt;double>("Y");
          Property&lt;double>* z = targetbag.getProperty&lt;double>("Z");
          Property&lt;int>* t = targetbag.getProperty&lt;int>("Sample");

	  if ( !x || !y || !z || !t )
	     return false;

          out.x = x->get();
          out.y = y->get();
          out.z = z->get();
          out.sample_nbr = t->get();
          return true;
        }
        return false; // unknown type !
     }
  }</programlisting>
        <para>
	  First the properties are located in the bag, it should look just
	  like we stored them. If not, return false, otherwise, read the
	  values and store them in the out variable.
	</para>
      </section>
      <section>
	<title>Network transfer (CORBA)</title>
	<para>
	  In order to transfer your data between components over a
	  network, Orocos requires that you provide the conversion
	  from your type to a CORBA::Any type and back, quite similar
	  to the 'composition' and 'decomposition' of your data.
	  Look at the <classname>RTT::TemplateTypeInfo</classname>
	  interface for the functions you need to implement.
	</para>
	<para>
	  The first step is describing your struct in IDL and generate
	  the 'client' headers with 'Any' support. Next you
	  create such a struct, fill it with your data type's data
	  and next 'stream' it to an Any. The other way around is
	  required as well.
	</para>
	<para>
	  In addition, you will need the CORBA support of Orocos
	  enabled in your build configuration.
	</para>
      </section>
      <section>
	<title>Advanced types</title>
	<para>
	  In order to add more complex types, take a look at the
	  code of the RealTimeToolkit and the KDL Toolkit Plugin of Orocos.
	</para>
      </section>
    </section>
    <section>
      <title>Building your own Toolkit</title>
      <para>
	The number of types may grow in your application to such
	a number or diversity that it may be convenient to 
	build your own toolkit and import them when appropriate.
	Non-Orocos libraries benefit from this system as well because
	they can introduce their data types into Orocos.
      </para>
      <para>
	Each toolkit must inherit from the
	<classname>RTT::ToolkitPlugin</classname> class and implement
	four functions: <function>loadTypes()</function>,
	<function>loadConstructors</function>,
	<function>loadOperators()</function> and
	<function>getName()</function>.
      </para>
      <para>
	The name of a toolkit must be unique. Each toolkit will be loaded
	no more than once. The loadTypes function contains all 
	'TemplateTypeInfo' constructs to tell Orocos about the types
	of your toolkit. The loadOperators function contains all
	operations that can be performed on your data such as addition ('+'),
	indexing ('[i]'), comparison ('==') etc. Finally, type constructors
	are added in the loadConstructors function. They allow a newly
	created script variable to be initialised with a (set of) values.
      </para>
      <para>
	Mimick the code of the
	<classname>RTT::RealTimeToolkitPlugin</classname> and
	<classname>KDL::KDLToolkitPlugin</classname> to build
	your own.
      </para>
      <section id="overloading-operators">
	<title>Loading Operators</title>
	<para>
	  Operator are stored in the class <classname>RTT::OperatorRepository</classname>
	  in <filename>Operators.hpp</filename>.  The list of
	  supported operators is set by the toolkit and added to the OperatorRepository
	  It looks something like this:
	  <programlisting>
bool loadOperators() {
  OperatorRepository::shared_ptr or = OperatorRepository::Instance();
  // boolean stuff:
  or->add( newUnaryOperator( &quot;!&quot;, std::logical_not&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;&amp;&amp;&quot;, std::logical_and&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;||&quot;, std::logical_or&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;==&quot;, std::equal_to&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;!=&quot;, std::not_equal_to&lt;bool&gt;() ) );
  return true;
} </programlisting>
	  Adding your own should not be terribly hard.  The hardest
	  part is that as the second argument to newUnaryOperator,
	  newBinaryOperator or newTernaryOperator, you need to specify
	  a STL Adaptable Functor, and even though the STL provides
	  many predefined one's, it does not provide all possible
	  combinations, and you might end up having to write your
	  own.  The STL does not at all provide any "ternary
	  operators", so if you need one of those, you'll definitely
	  have to write it yourself.
	</para>
	<para>
	  Note that this section is only about adding overloads for
	  existing operators, if you want to add new operators to
	  the scripting engine, the parsers need to be extended as well.
	</para>
      </section>
      <section id="overloading-constructors">
	<title>Loading Constructors</title>
	<para>
	  Constructors can only be added <emphasis>after</emphasis> a 
	  type has been loaded using <function>addType</function>.
	  Say that the ControlData struct has a constructor:
	</para>
	<programlisting>  struct ControlData {
    ControlData(double a, double b, double c) 
      : x(a), y(b), z(c), sample_nbr(0)
    {}
    double x, y, z;
    int sample_nbr;
  }</programlisting>
        <para>
	  This constructor is not automatically known to the type system.
	  You need to write a constructor function and add that to the
	  type info:
        </para>
	<programlisting>
  ControlData createCD(double a, double b, double c) {
    return ControlData(a,b,c);
  }

  // Tell Orocos a constructor is available:
  // Attention: "ControlData" must have been added before with 'addType' !
  RTT::TypeInfoRepository::Instance()->type("ControlData")->addConstructor( &amp;createCD );
	</programlisting>
	<para>
	  From now on, one can write in a script:
	</para>
	<programlisting>  var ControlData cd = ControlData(3.4, 5.0, 1.7);</programlisting>
	<para>
	  Multiple constructors can be added for the same type. The first
	  one that matches with the given arguments is then taken.
	</para>
      </section>
    </section>
  </section>
</article>
<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY orocos      "<acronym>Orocos</acronym>">
]
>

<article>
  <articleinfo>
    <title>Extending the Real-Time Toolkit</title>
    <authorgroup>
      <author>
	<firstname>Peter</firstname>
	<surname>Soetens</surname>
	<affiliation>
	  <orgname>FMTC/K.U.Leuven</orgname>
	  <address><country>Belgium</country></address>
	</affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>2006</year>
      <holder>Peter Soetens, FMTC</holder>
    </copyright>

    <abstract>
      <para>
	This document is an introduction to making user defined types
	(classes) visible within &orocos;. You need to read this
	document when you want to see the value of an object you
	defined yourself, for example in the TaskBrowser component or
	in an Orocos script. Other uses are reading and writing
	objects to and from XML and generally, anything a built-in
	Orocos type can do, so can yours.
      </para>
    </abstract>

    <revhistory>
      <revision>
	<revnumber>1.0.1</revnumber>
	<date>24 Nov 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Separated from the Developer's Manual.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>
  <section>
    <title>The Orocos Type System : Toolkits</title>
    <para>
      Most applications define their own classes or structs to exchange
      data between objects. It is possible to tell Orocos about these
      user defined types such that they can be displayed, stored to XML,
      used in the scripting engine or even transfered over a network
      connection.
    </para>

    <section>
      <title>The Real-Time Toolkit</title>
      <para>
	Orocos uses the 'Toolkit' principle to make it aware of user
	types. Orocos' Real-Time Toolkit already provides support for
	the C++ types <classname>int</classname>,<classname>unsigned
	int</classname>,<classname>double</classname>,
	<classname>char</classname>,<classname>bool</classname>,<classname>float</classname>,
	<classname>vector&lt;double&gt;</classname> and
	<classname>string</classname>.
      </para>
      <para>
	A toolkit can be imported into the application by writing:
	<programlisting>  #include &lt;rtt/RealTimeToolkit.hpp>
  // ...
  RTT::Toolkit::Import( RTT::RealTimeToolkit );	</programlisting>
	This is however done automatically, unless you disabled that
	option in the configuration system. After this line is executed,
	Orocos is able to display, transfer over a network or recognise
	these types in scripts.
      </para>
    </section>
    <section>
      <title>Telling Orocos about your data</title>
      <para>
	Say that you have an application which transfers data
	in a struct <classname>ControlData</classname> :
	<programlisting>  struct ControlData {
    double x, y, z;
    int sample_nbr;
  }</programlisting>
        How can you tell Orocos how to handle this type ? A helper
	class is provided which you can extend to fit your needs,
	<classname>RTT::TemplateTypeInfo</classname>.
	<programlisting>  #include &lt;rtt/TemplateTypeInfo.hpp>
  // ...
  struct ControlDataTypeInfo
    : public RTT::TemplateTypeInfo&lt;ControlData>
  {
     ControlDataTypeInfo()
        : RTT::TemplateTypeInfo&lt;ControlData>("ControlData")
     {}
  };

  // Tell Orocos the name and type of this struct:
  RTT::TypeInfoRepository::Instance()->addType( new ControlDataTypeInfo() );
	</programlisting>
	From now on, Orocos knows the 'ControlData' type name and allows
	you to create a scripting variable of that type. It does however
	not know yet how to display it or write it to an XML file.
      </para>
      <note>
	<para>
	  The type is now usable as a 'var' in a script, however,
	  in order to initialise a variable, you need to add a constructor as
	  well. See <xref linkend="overloading-constructors" />. 
	</para>
      </note>
      <section>
	<title>Displaying</title>
	<para>
	  In order to tell Orocos how to display your type, you
	  may overload the <function>TemplateTypeInfo::write</function> fuction
	  or define <function>operator&lt;&lt;()</function> for your type:
	</para>
	<programlisting>  #include &lt;rtt/TemplateTypeInfo.hpp>
  #include &lt;ostream>

  std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const ControlData&amp; cd) {
     return os &lt;&lt; '('&lt;&lt; cd.x &lt;&lt; cd.y &lt;&lt; cd.z &lt;&lt; '): ' &lt;&lt; cd.sample_nbr;
  }
  // ...
  // 'true' argument: <emphasis> it has operator&lt;&lt;</emphasis>
  struct ControlDataTypeInfo
    : public RTT::TemplateTypeInfo&lt;ControlData,<emphasis>true</emphasis>>
  {
     ControlDataTypeInfo()
        : RTT::TemplateTypeInfo&lt;ControlData,<emphasis>true</emphasis>>("ControlData")
     {}
  };

  // Tell Orocos the name and type of this struct
  RTT::TypeInfoRepository::Instance()->addType( new ControlDataTypeInfo() );
	</programlisting>
	<para>
	  If you use the above line of code to add the type, Orocos will be
	  able to display it as well, for example in the TaskBrowser or
	  in the ReportingComponent.
	</para>
      </section>
      <section>
	<title>Writing to XML</title>
	<para>
	  In order to inform Orocos of the structure of your data type,
	  it must be given a 'decompose' function: Of which primitive types
	  does the struct consists ? Representing structured data is what
	  Orocos <classname>RTT::Property</classname> objects do.
	  Here is how to tell Orocos how the "ControlData" is structured:
	</para>
	<programlisting>  // ...
  struct ControlDataTypeInfo
    : public TemplateTypeInfo&lt;ControlData,true>
  {
     // ... other functions omitted

     virtual bool decomposeTypeImpl(const ControlData&amp; in, PropertyBag&amp; targetbag ) const {
         targetbag.setType("ControlData");
         targetbag.add( new Property&lt;double>("X", "X value of my Data", in.x ) );
         targetbag.add( new Property&lt;double>("Y", "Y value of my Data", in.y ) );
         targetbag.add( new Property&lt;double>("Z", "Z value of my Data", in.z ) );
         targetbag.add( new Property&lt;int>("Sample", "The sample number of the Data", in.sample_nbr ) );
         return true;
     }
  }</programlisting>
        <para>
	  That was easy ! For each member of your struct, add a
	  <classname>RTT::Property</classname> of the correct
	  type to the targetbag and you're done !
	  <function>setType()</function> can be used lateron to
	  determine the version or type of your XML representation.  Next,
	  if Orocos tries to write an XML file with ControlData in it,
	  it will look like:
	</para>
	<programlisting>
<![CDATA[  <struct name="MyData" type="ControlData">
    <simple name="X" type="double">
       <description>X value of my Data</description>
       <value>0.12</value>
    </simple>
    <simple name="Y" type="double">
       <description>Y value of my Data</description>
       <value>1.23</value>
    </simple>
    <simple name="Z" type="double">
       <description>Z value of my Data</description>
       <value>3.21</value>
    </simple>
    <simple name="Sample" type="short">
       <description>The sample number of the Data</description>
       <value>3123</value>
    </simple>
  </struct>]]>
	</programlisting>
      </section>
      <section>
	<title>Reading from XML</title>
	<para>
	  Orocos does not know yet how to convert an XML format back
	  to the ControlData object. This operation is called 'composition'
	  and is fairly simple as well:
	  Here is how to tell Orocos how the "ControlData" is read:
	</para>
	<programlisting>  // ...
  struct ControlDataTypeInfo
    : public TemplateTypeInfo&lt;ControlData,true>
  {

     // ... other functions omitted

     virtual bool composeTypeImpl(const PropertyBag&amp; bag, ControlData&amp; out ) const 
     {
        if ( bag.getType() == std::string("ControlData") ) // check the type
        {  
          Property&lt;double>* x = targetbag.getProperty&lt;double>("X");
          Property&lt;double>* y = targetbag.getProperty&lt;double>("Y");
          Property&lt;double>* z = targetbag.getProperty&lt;double>("Z");
          Property&lt;int>* t = targetbag.getProperty&lt;int>("Sample");

	  if ( !x || !y || !z || !t )
	     return false;

          out.x = x->get();
          out.y = y->get();
          out.z = z->get();
          out.sample_nbr = t->get();
          return true;
        }
        return false; // unknown type !
     }
  }</programlisting>
        <para>
	  First the properties are located in the bag, it should look just
	  like we stored them. If not, return false, otherwise, read the
	  values and store them in the out variable.
	</para>
      </section>
      <section>
	<title>Network transfer (CORBA)</title>
	<para>
	  In order to transfer your data between components over a
	  network, Orocos requires that you provide the conversion
	  from your type to a CORBA::Any type and back, quite similar
	  to the 'composition' and 'decomposition' of your data.
	  Look at the <classname>RTT::TemplateTypeInfo</classname>
	  interface for the functions you need to implement.
	</para>
	<para>
	  The first step is describing your struct in IDL and generate
	  the 'client' headers with 'Any' support. Next you
	  create such a struct, fill it with your data type's data
	  and next 'stream' it to an Any. The other way around is
	  required as well.
	</para>
	<para>
	  In addition, you will need the CORBA support of Orocos
	  enabled in your build configuration.
	</para>
      </section>
      <section>
	<title>Advanced types</title>
	<para>
	  In order to add more complex types, take a look at the
	  code of the RealTimeToolkit and the KDL Toolkit Plugin of Orocos.
	</para>
      </section>
    </section>
    <section>
      <title>Building your own Toolkit</title>
      <para>
	The number of types may grow in your application to such
	a number or diversity that it may be convenient to 
	build your own toolkit and import them when appropriate.
	Non-Orocos libraries benefit from this system as well because
	they can introduce their data types into Orocos.
      </para>
      <para>
	Each toolkit must inherit from the
	<classname>RTT::ToolkitPlugin</classname> class and implement
	four functions: <function>loadTypes()</function>,
	<function>loadConstructors</function>,
	<function>loadOperators()</function> and
	<function>getName()</function>.
      </para>
      <para>
	The name of a toolkit must be unique. Each toolkit will be loaded
	no more than once. The loadTypes function contains all 
	'TemplateTypeInfo' constructs to tell Orocos about the types
	of your toolkit. The loadOperators function contains all
	operations that can be performed on your data such as addition ('+'),
	indexing ('[i]'), comparison ('==') etc. Finally, type constructors
	are added in the loadConstructors function. They allow a newly
	created script variable to be initialised with a (set of) values.
      </para>
      <para>
	Mimick the code of the
	<classname>RTT::RealTimeToolkitPlugin</classname> and
	<classname>KDL::KDLToolkitPlugin</classname> to build
	your own.
      </para>
      <section id="overloading-operators">
	<title>Loading Operators</title>
	<para>
	  Operator are stored in the class <classname>RTT::OperatorRepository</classname>
	  in <filename>Operators.hpp</filename>.  The list of
	  supported operators is set by the toolkit and added to the OperatorRepository
	  It looks something like this:
	  <programlisting>
bool loadOperators() {
  OperatorRepository::shared_ptr or = OperatorRepository::Instance();
  // boolean stuff:
  or->add( newUnaryOperator( &quot;!&quot;, std::logical_not&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;&amp;&amp;&quot;, std::logical_and&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;||&quot;, std::logical_or&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;==&quot;, std::equal_to&lt;bool&gt;() ) );
  or->add( newBinaryOperator( &quot;!=&quot;, std::not_equal_to&lt;bool&gt;() ) );
  return true;
} </programlisting>
	  Adding your own should not be terribly hard.  The hardest
	  part is that as the second argument to newUnaryOperator,
	  newBinaryOperator or newTernaryOperator, you need to specify
	  a STL Adaptable Functor, and even though the STL provides
	  many predefined one's, it does not provide all possible
	  combinations, and you might end up having to write your
	  own.  The STL does not at all provide any "ternary
	  operators", so if you need one of those, you'll definitely
	  have to write it yourself.
	</para>
	<para>
	  Note that this section is only about adding overloads for
	  existing operators, if you want to add new operators to
	  the scripting engine, the parsers need to be extended as well.
	</para>
      </section>
      <section id="overloading-constructors">
	<title>Loading Constructors</title>
	<para>
	  Constructors can only be added <emphasis>after</emphasis> a 
	  type has been loaded using <function>addType</function>.
	  Say that the ControlData struct has a constructor:
	</para>
	<programlisting>  struct ControlData {
    ControlData(double a, double b, double c) 
      : x(a), y(b), z(c), sample_nbr(0)
    {}
    double x, y, z;
    int sample_nbr;
  }</programlisting>
        <para>
	  This constructor is not automatically known to the type system.
	  You need to write a constructor function and add that to the
	  type info:
        </para>
	<programlisting>
  ControlData createCD(double a, double b, double c) {
    return ControlData(a,b,c);
  }

  // Tell Orocos a constructor is available:
  // Attention: "ControlData" must have been added before with 'addType' !
  RTT::TypeInfoRepository::Instance()->type("ControlData")->addConstructor( &amp;createCD );
	</programlisting>
	<para>
	  From now on, one can write in a script:
	</para>
	<programlisting>  var ControlData cd = ControlData(3.4, 5.0, 1.7);</programlisting>
	<para>
	  Multiple constructors can be added for the same type. The first
	  one that matches with the given arguments is then taken.
	</para>
      </section>
    </section>
  </section>
</article>
