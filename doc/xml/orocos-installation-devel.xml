<?xml version='1.0'?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"/usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd" 
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>


<article>
  <articleinfo>
    <title>
      Inside the RTT Build System
    </title>
    <subtitle><emphasis>Orocos Real-Time Toolkit Version &oversion;</emphasis></subtitle>
    <copyright>
      <year>2002,2003,2004,2005,2006</year>
      <holder>Peter Soetens</holder>
    </copyright>

    <abstract>
      <para>
	This document explains how the
	packages of <ulink url="http://www.orocos.org">&orocos;</ulink>,
	the <emphasis>Open RObot COntrol Software</emphasis> project
	must be installed and configured.
      </para>
    </abstract>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>
  <section id="technical-install">
    <title>Installation Technical Details</title>
    <para>
      This section groups some technical installation instructions
      for Orocos developers.
    </para>
    <section>
      <title>Using the Graphical configtool program</title>
      <para>
	When the target is selected with configure, you can run
	<command>make configure_packages</command> to pop up the GUI configtool.
	You need to install this program on your system.
	Some things to do  are :
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    Add/Remove a Package to/from your configuration : click on <menuchoice>
	      <guimenu>Build->Packages</guimenu></menuchoice>. Only
	    packages in the repository can be added or removed. <emphasis>This operation does not
	    remove a package from the repository.</emphasis>
	  </para>
	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/ConfigToolPackages" />
	      </imageobject>
<!-- 	      <imageobject role="fo"> -->
<!-- 		<imagedata format="JPG" fileref="images/ConfigToolPackages.jpg" /> -->
<!-- 	      </imageobject> -->
	    </mediaobject>
	  </informalfigure>
	</listitem>
	<listitem>
	  <para>
	    Install a new Package in the repository : click on <menuchoice>
	      <guimenu>Tools->Administration</guimenu></menuchoice>, this allows you to select an
	    <filename>.epk</filename> file from your harddisk, which will be
	    added to your packages repository.
	  </para>
	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/ConfigToolAdmin" />
	      </imageobject>
<!-- 	      <imageobject role="fo"> -->
<!-- 		<imagedata format="JPG" fileref="images/ConfigToolAdmin.jpg" /> -->
<!-- 	      </imageobject> -->
	    </mediaobject>
	  </informalfigure>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Upgrading Your Configuration</title>
      <para>
	In between Orocos versions, configuration options may be added
	or removed to reflect feature additions or removal. In that
	case, your current <filename>orocos.ecc</filename> file will
	not be properly parsed by the tools. To solve this, you need
	to run <screen>  make upgrade_packages</screen> such that your
	old configuration is imported in the new one. After an
	upgrade, your selected template, added packages and so on will
	remain as before.
      </para>
      <note>
	<para>You can manually save your configuration using
	  <command>ecosconfig export /tmp/savefile.ecc</command> in
	  your old build tree, followed by <command>make
	    new_packages</command> and <command>ecosconfig import
	    /tmp/savefile.ecc</command> in your new build tree.
	  ( manually invoking ecosconfig requires setting ECOS_REPOSITORY )
	    to your packages directory).
	</para>
      </note>
    </section>
    <section>
      <title>Introduction to the eCos toolset</title>
      <para>
	This section goes into more detail how package management
	is done behind the scenes and is optional literature for
	the average user.
      </para>
      <para>
	The above make commands are optional. Take a
	look at the Makefile to see what they really do. A
	standard eCos configuration goes as follows :
	  <orderedlist>
	    <listitem>
	      <para>Set the environment variable :
		<screen>export ECOS_REPOSITORY=/path/to/orocos-&oversion;/packages/</screen>
		All The ecos tools need this variable to be able to work
		on the packages. The make targets did this automatically,
		but if you want to invoke the tools yourself, you need to
		set it once.
	      </para>
	    </listitem>
	    <listitem>
	      <para>Install any new .epk packages using
		<screen><command>ecosadmin.tcl add filename.epk</command></screen> in the 
		packages directory.
	      </para>
	      <para>
		This only adds a package to the repository, it does not mean it is
		automatically compiled ! Adding a package to a configuration in
		the next steps will assure that it is compiled.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Go to the eCos build directory. In Orocos this is :
		<screen><filename>orocos-&oversion;/build/packages</filename></screen>
	      But technically, it can be any directory
		where you create an orocos.ecc configuration file.
	      </para>
	    </listitem>
	    <listitem>
	      <para>Start a new build using the
		<screen><command>ecosconfig new gnulinux  corelib-os</command></screen>
	      command. Where
		<option>gnulinux</option> or <option>lxrt</option> is
		the target name and <option>corelib-os</option> is the
		template name. A template selects a number of packages
		which belong together. You are allowed to put your own
		template in
		<filename>orocos-&oversion;/packages/templates</filename>.
		All this information (with default options)
		is written in the <filename>orocos.ecc</filename> file
		<warning>
		  <para>This will overwrite any previous orocos.ecc
		    configuration file in that directory !</para>
		</warning>
	      </para>
	    </listitem>
	    <listitem>
	      <para>Add all detected support packages. The make target
		new_packages does this by running :
		<screen><command>  for i in $(find $ECOS_REPOSITORY/support -name "*.cdl"); do \
  ecosconfig add support_$(basename $i .cdl); done </command></screen>
		They will all be added to the orocos.ecc file.
		Fortunately, you can also add the support (or any other) packages
		in the graphical configtool menu->Build->Packages.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Select additional packages for your build with the graphical
		configtool or with
	      <screen><command>ecosconfig add package_name</command></screen>
	      Configtool will give you a list
		of all available packages in the repository if you go to
		menu->Build->Packages and
		<screen><command>ecosconfig list</command></screen> does the same.
		This will add the package and its options to the orocos.ecc
		file (which contains configuration info of each selected package).
		Now the packages will show up when you run configtool or
		run <command>ecosconfig check</command>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>Configure the selected packages with the graphical
		program <screen><command>configtool orocos.ecc</command></screen>
	      Save and exit.</para>
	    </listitem>
	    <listitem>
	      <para>Create the makefiles using
		<screen><command>ecosconfig tree</command></screen>
	      The build tree is setup now. You need to run this command
	      each time you change the configuration in the above step !</para>
	    </listitem>
	    <listitem>
	      <para>Compile using
		<screen><command>make</command></screen>
	      </para>
	    </listitem>
	    <listitem>
	      <para>The results (headers and libtarget.a)
		are in the install directory.</para>
	    </listitem>
	  </orderedlist>
	</para>
    </section>
    <section>
      <title>Installing Orocos from Subversion (similar to CVS)</title>
      <para>
	This section will do its best to help you through the
	Subversion ( svn ) installation process.
	Installing &orocos; from &svn; is optional and requires
	some familiarity with the tools we use. It is only advised for
	Orocos developers.
      </para>
      <para>
	The commands below show how to obtain the <emphasis>orocos-trunk</emphasis>
	Package Tree from the Subversion tree (read-only)
	<screen width="60">  svn co http://svn.mech.kuleuven.be/repos/orocos/orocos-trunk 
  cd orocos-trunk </screen>
	So, make sure you have
	the Subversion program installed, i.e., the command "svn" works on your
	 system. The repository is web-browsable through a
	 <ulink url="http://svn.mech.kuleuven.be/browse/orocos">ViewCVS frontend
	 </ulink>.
      </para>
      <para>
	The next step requires that you use
	<ulink url="http://www.gnu.org/software/automake/">automake</ulink>
	version 1.9 and
	<ulink url="http://www.gnu.org/software/autoconf/">autconf</ulink>
	version 2.54 or later. You can check your
	versions with the <parameter>--version</parameter> option:
	<screen>  $ automake --version
  automake (GNU automake) 1.9.5
   ...
  $ autoconf --version
  autoconf (GNU Autoconf) 2.54	</screen>
	<note>
	  <para> You need these programs if you intend to modify the makefiles</para>
	</note>
	When you get something similar, proceed with calling the <command>
	  ./autogen.sh </command> command in the base directory
	, in order to initialize the <filename>autoconf</filename> 
	and <filename>automake</filename> files:
	<screen>  ./autogen.sh</screen>
	The configure script will detect the installed software on your
	system and generate the appropriate scripts.
      </para>
      <para>
	The next steps are exactly the same as when you install the system
	starting from a so-called &ldquo;epk&rdquo; package, as explained in the
	next section. Of course, you don't have to apply the
	<command>ecosadmin.tcl</command> command when installing from &svn;.
      </para>
    </section>
  </section>
</article>
