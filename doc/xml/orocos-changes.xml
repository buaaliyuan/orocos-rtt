<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY cvs         "<acronym>CVS</acronym>">
<!ENTITY orocos      "<acronym>Orocos</acronym>">
<!ENTITY oldversion  "1.0">
<!ENTITY version     "1.2">
<!ENTITY rtai        "<acronym>RTAI</acronym>">
<!ENTITY rtos        "<acronym>RTOS</acronym>">
]
>

<article>
  <articleinfo>
    <title>
      Orocos Real-Time Toolkit &version; Release Series
      Changes, New Features, and Fixes 
    </title>
    <subtitle><emphasis>Open RObot COntrol Software</emphasis>
    </subtitle>
  </articleinfo>
  <para>
    This document provides a quick overview of what changed between
    the Real-Time Toolkit &oldversion; and version &version;. This
    release includes all bugfixes of the &oldversion; branch. If your
    application does not work, look here for possible causes and
    solutions. Also feature additions and improvements are documented.
  </para>
  <section id="caveats">
    <title>Caveats</title>
    <section>
      <title>Building the RTT</title>
      <itemizedlist>
	<listitem>
	  <para>
	    Orocos RTT is now built with the 'CMake' tool, instead of
	    the automake tool previously. See the installation manual
	    for the new build instructions.  The installed libraries
	    and header files names and locations have not changed.
	    However, the <filename>pkgconf</filename> directory has
	    disappeared and is replaced with the
	    <filename>rtt/rtt-config.h</filename> file, which contains
	    the same defined macros.
	  </para>
	  <para>
	    The new build system may on your system detect installed
	    libraries differently than in version &oldversion;. If you
	    encounter problems, notify the orocos-dev mailinglist and
	    a hotfix will be prepared.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>OS Changes</title>
      <itemizedlist>
	<listitem>
	  <para>
	    Support for real-time PowerPC (with FPU) has been
	    added. The functionality has been tested with a Linux 2.4
	    PPC kernel (patched for Xenomai), with gcc 3.3.6 and glibc
	    2.2.5 but should work with other kernels and compilers as
	    well.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    An <function>rtos_task_yield()</function> function is now
	    required in the FOSI layer, which maps to the yield function
	    of your OS. If your OS does not support a 'thread yield',
	    you may implement this as an empty function.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    The <classname>RTT::OS::SingleThread</classname> and the
	    <classname>RTT::NonPeriodicActivity</classname> threading
	    classes had undefined semantics for start() and stop()
	    with respect to loop() in case start() was called multiple
	    times in a row. With the old behaviour, start()
	    invocations had an accumulative effect, causing loop() to
	    be executed as much as start() was called, even after stop()
	    was called. The new behaviour only allows start() to succeed
	    if loop() is not executing. stop() will only return when
	    loop() finishes.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>RTT Changes</title>
      <itemizedlist>
	<listitem>
	  <para>
	    See the above remark about the changed behaviour of 
	    <classname>RTT::NonPeriodicActivity</classname>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    The <classname>RTT::TaskContext</classname>
	    <function>startup()</function>,
	    <function>update()</function>,
	    <function>shutdown()</function> user functions are in the
	    process of being renamed. They are still valid, but
	    deprecated and new applications should no longer use these
	    names.  The new names are
	    <function>startHook()</function>,
	    <function>updateHook()</function> and
	    <function>stopHook()</function>. The new naming is less
	    confusing in combination with the new configuration state
	    of the TaskContext (see below). Again, existing RTT 1.0
	    applications using the old naming remain working.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Scripting Changes</title>
      <itemizedlist>
	<listitem>
	  <para>
	    The <function>programs.MyProgram</function> and
	    <function>states.MyStateMachine</function> prefixes,
	    required to access loaded programs and statemachines has
	    been dropped. One can now address a TaskContext program or
	    state machine by just writing
	    <function>MyProgram</function> or
	    <function>MyStateMachine</function> in a script. The
	    parser will not allow name clashes between script
	    names and TaskContext objects. The parser has been modified
	    to allow the old syntax and warn the user of the change.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Program and state machine scripts are no longer loaded as
	    <classname>RTT::TaskContext</classname> C++ objects but as
	    <classname>RTT::TaskObject</classname> C++ objects. In
	    practice, this has no effect on existing applications,
	    unless the user uses <function>getPeer()</function> in
	    order to access loaded scripts (instead of the recommended
	    <function>states()</function>,
	    <function>programs()</function> or
	    <function>execution()</function>).  In that case, the user
	    needs to call <function>getObject()</function> instead or
	    revert to the recommended functions.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Corba IDL Changes</title>
      <para>
	These changes only apply if you directly used the IDL interface
	of Orocos.
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    The <classname>ControlTask</classname> class
	    and related classes have been extended to map to the
	    TaskContext and TaskObject interface.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Improvements</title>
    <section>
      <title>Shared libraries</title>
      <itemizedlist>
	<listitem>
	  <para>
	    From release 1.1.0 on, Orocos RTT is built by default as a shared
	    library. This significantly improves link times and application
	    development times. It also allows dynamic component deployment in
	    the Orocos Component Library.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>RTT classes</title>
      <itemizedlist>
	<listitem>
	  <para>
	    The <classname>RTT::TaskContext</classname> class has been
	    extended to support a configuration state. A component now
	    has a configure() and cleanup() method to configure the component
	    or free all resources. If a component is not configured, it
	    will refuse to start running. User functions (configureHook() and
	    cleanupHook()) allow the user to control the transitions.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    The <classname>RTT::PeriodicActivity</classname> and
	    <classname>RTT::NonPeriodicActivity</classname> classes have
	    received additional constructors which allow to set the scheduler
	    type to ORO_SCHED_RT (default) or ORO_SCHED_OTHER. This allows
	    easier creation of not real-time threads in the Orocos RTT.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Corba Support</title>
      <itemizedlist>
	<listitem>
	  <para>
	    From release 1.1.0 on, Orocos RTT has better build and run-time
	    support for Corba (using ACE/TAO). Remote modification of
	    component parameters has been improved and is taken advantage
	    of by the Corba based KTaskbrowser 1.2.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>

  <appendix>
    <title>About Orocos</title>
    <para>
      Please send general, non technical, Orocos questions to <ulink
	url="mailto: orocos at lists.mech.kuleuven.be">
	orocos at lists.mech.kuleuven.be </ulink>. 
    </para>
    <para>
      These pages are maintained by <ulink
	url="http://www.orocos.org/orocos/whatis">the Orocos
	team</ulink>.
    </para>
    <para>
      For questions related to the use of the Orocos Software, please consult these
      web pages and the <ulink
	url="http://www.orocos.org/documentation.php">Orocos manuals</ulink>. If
      that fails, the  <ulink
	url="mailto:orocos-dev at lists.mech.kuleuven.be">
	orocos-dev at lists.mech.kuleuven.be </ulink> mailing list might help.
      Please
      send comments on these web pages and the development of Orocos to
      our developer mailing list at  <ulink
	url="mailto:orocos-dev at lists.mech.kuleuven.be">
	orocos-dev at lists.mech.kuleuven.be </ulink>. All of
      our lists have <ulink url="http://lists.mech.kuleuven.be/mailman/listinfo/orocos">public
	archives</ulink> ( <ulink url="http://lists.mech.kuleuven.be/mailman/listinfo/orocos-dev"> dev public
	archive</ulink> ) .
      </para>
    <para>
      Copyright (C) FMTC
    </para>
    <para>
      Verbatim copying and distribution of this entire article is
      permitted in any medium, provided this notice is preserved.
    </para>
  </appendix>
</article>