<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>

<article>
  <articleinfo>
    <title>
      The Orocos Task Infrastructure Manual
    </title>
    <subtitle>Designing Real-Time Orocos Applications</subtitle>
    <authorgroup>
      <author>
	<firstname>Peter</firstname>
	<surname>Soetens</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2004,2005,2006</year>
      <holder>Peter Soetens</holder>
    </copyright>
    
    <abstract>
      <para>
	This document describes the &orocos; Task Infrastructure, which
	allows to design Real-Time tasks which transparantly communicate
	with each other.
      </para>
    </abstract>
    
    <revhistory>
      <revision>
	<revnumber>0.18.0</revnumber>
	<date>19 Nov 2004</date>
	<authorinitials>PS</authorinitials>
	<revremark>Initial version</revremark>
      </revision>
      <revision>
	<revnumber>0.20.0</revnumber>
	<date>1 May 2005</date>
	<authorinitials>PS</authorinitials>
	<revremark>Moved TaskBrowser to front and updated to ProgramLoader</revremark>
      </revision>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>January 2006</date>
	<authorinitials>PS</authorinitials>
	<revremark>Updates on new Execution Engine</revremark>
      </revision>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>17 February 2006</date>
	<authorinitials>PS</authorinitials>
	<revremark>Went through biggest part of manual to 'prettyfy' examples.
	Cut out all the developer specific comments.</revremark>
      </revision>
      <revision>
	<revnumber>0.25.0</revnumber>
	<date>18 July 2006</date>
	<authorinitials>PS</authorinitials>
	<revremark>New command and method semantics. Added Hello World example
	instead of complexer task-intro example.</revremark>
      </revision>
      <revision>
	<revnumber>0.25.1</revnumber>
	<date>September 2006</date>
	<authorinitials>PS</authorinitials>
	<revremark>Improved Hello World Example. Added figures, added Deployment
	section (TaskCore,...) Documented new connection functions.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section id="task-context-intro">
    <title>Introduction</title>
    <para>
      This manual documents how multi-threaded components can be defined in &orocos;
      such that they form a thread-safe robotics/machine control application.
      Each control component is defined as a "TaskContext", which defines 
      the "context" in which the component task is executed. The context
      is built by the five Orocos primitives: Event, Property, Command, Method
      and Data Port. This document defines how a user can write his own 
      task context and how it can be used in an application.
    </para>
    <figure id="fig-task-peers">
      <title>
	Tasks Run in Threads
      </title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/TaskPeers" />
	</imageobject>
	<caption>
	  <para>
	    Tasks run in (periodic) threads.
	  </para>
	</caption>
      </mediaobject>
    </figure>
    <para>
      A task is a basic unit of functionality which executes one or
      more (real-time) programs in a single thread.  The program can
      vary from a mere C function over a real-time program script to a
      real-time hierarchical state machine. The focus is completely on
      thread-safe time determinism. Meaning, that the system is free
      of priority-inversions, and all operations are lock-free (also
      data sharing and other forms of communication such as events and
      commands).  Real-time tasks can communicate with non real-time
      tasks (and vice versa) transparantly.
    </para>
    <para>
      The Orocos Task Infrastructure enables :
      <itemizedlist>
	<listitem>
	  <para>Lock free, thread-safe, inter-thread function calls.</para>
	</listitem>
	<listitem>
	  <para>Communication between hard Real-Time and non Real-Time threads.</para>
	</listitem>
	<listitem>
	  <para>Deterministic execution time during communication
	  for the higher priority thread.</para>
	</listitem>
	<listitem>
	  <para>Synchronous and asynchronous communication between threads.</para>
	</listitem>
	<listitem>
	  <para>Interfaces for component distribution.</para>
	</listitem>
	<listitem>
	  <para>C++ class implementations for all the above.</para>
	</listitem>
      </itemizedlist>
    </para>
    <para>
      This document relates to other manuals as such :
      <glosslist>
	<glossentry>
	  <glossterm>Core Library</glossterm>
	  <glossdef>
	    <para> provides the Event infrastructure,
	      activity to thread mapping, Properties and lock-free data exchange
	      implementations.
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Execution Engine</glossterm>
	  <glossdef>
	    <para> provides a real-time program execution framework.
	    It executes the real-time programs which interact with other tasks.
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Program Parser</glossterm>
	  <glossdef>
	    <para> provides a scripting language which is convertible to
	    a form which can be accepted by the Execution Engine.
	    </para>
	  </glossdef>
	</glossentry>
      </glosslist>
    </para>
    <para>
      The Scripting manual gives more details about script syntax
      for state machines and programs.
    </para>
    <figure id="fig-a-task-context">
      <title>
	Schematic Overview of a TaskContext
      </title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/ATaskContext" />
	</imageobject>
	<caption>
	  <para>The Execution Flow is formed by Programs and
	    State Machines sending commands, events,... to Peer Tasks. The Data Flow
	    is the propagation of data from one task to another, where
	    one producer can have multiple consumers and vice versa.
	  </para>
	</caption>
      </mediaobject>
    </figure>
    <para>
      A task's interface consists of : Attributes and Properties, Commands,
      Methods, Events and Data Flow ports which are all public.
      The class <classname>RTT::TaskContext</classname> 
      groups all these interfaces and serves as the basic building
      block of applications. A component developer 'builds'
      these interfaces using the instructions found in this manual.
    </para>
  </section>
  <section>
    <title>Hello World !</title>
    <para>
      This section introduces tasks through the "hello world"
      application, which can be downloaded from Orocos.org.  It
      contains one TaskContext component which has one instance of each
      communication primitive.
    </para>
    <figure id="fig-hello-world">
      <title>
	Schematic Overview of the Hello Component.
      </title>
      <mediaobject>
	<imageobject role="html">
	  <imagedata fileref="images/HelloWorld" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/HelloWorld" />
	</imageobject>
	<caption>
	  <para>Our hello world task.
	  </para>
	</caption>
      </mediaobject>
    </figure>
    <para>
      The way we interact with TaskContexts during development of an
      Orocos application is through the <emphasis>Task Browser</emphasis>.  The
      <classname>RTT::TaskBrowser</classname> is a powerful console tool
      which helps you to explore, execute and debug
      <classname>RTT::TaskContext</classname>s in running programs. All you
      have to do is to create a TaskBrowser and call its loop()
      method. When the program is started from a console, the
      TaskBrowser takes over user input and output.
    </para>
    <note>
      <para>
	The Orocos::TaskBrowser is a component
	of its own which is found in the same directory as the hello
	world component.
      </para>
    </note>
    <programlisting>
  #include &lt;rtt/TaskBrowser.hpp&gt;
  #include &lt;rtt/os/main.h&gt;
  // ...

  int ORO_main( int, char** )
  {
      // Create your tasks
      <classname>RTT::TaskContext</classname>* task = ...

      // when all is setup :
      <classname>RTT::TaskBrowser</classname> tbrowser( task );

      tbrowser.loop();
      return 0;
  }
    </programlisting>
    <para>
      The TaskBrowser uses the GNU readline library to easily
      enter commands to the tasks in your system. This means you
      can press TAB to complete your commands or press the up arrow
      to scroll through previous commands.
    </para>
    <screen>
0.016 [ Info   ][main()] ./helloworld manually raises LogLevel to 'Info' (5). See also file 'orocos.log'.
0.017 [ Info   ][main()] **** Creating the 'Hello' component ****
0.018 [ Info   ][ConnectionC] Creating Asyn connection to the_event.
0.018 [ Info   ][ExecutionEngine::setActivity] Hello is periodic.
0.019 [ Info   ][main()] **** Starting the 'Hello' component ****
0.019 [ Info   ][main()] **** Using the 'Hello' component    ****
0.019 [ Info   ][main()] **** Reading a Property:            ****
0.019 [ Info   ][main()]      the_property = Hello World
0.019 [ Info   ][main()] **** Sending a Command:             ****
0.020 [ Info   ][main()]      Sending the_command : 1
0.020 [ Info   ][main()] **** Calling a Method:              ****
0.020 [ Info   ][main()]      Calling the_Method : Hello World
0.020 [ Info   ][main()] **** Emitting an Event:             ****
0.021 [ Info   ][main()] **** Starting the TaskBrowser       ****
0.021 [ Info   ][TaskBrowser] Creating a BufferConnection from the_buffer_port to the_buffer_port with size 13
0.021 [ Info   ][TaskBrowser] Connected Port the_buffer_port to peer Task Hello.
0.022 [ Info   ][Hello] Creating a DataConnection from the_data_port to the_data_port
0.022 [ Info   ][Hello] Connected Port the_data_port to peer Task TaskBrowser.
   Switched to : Hello
0.023 [ Info   ][main()] Entering Task Hello
0.023 [ Info   ][Hello] Hello Command: World
0.023 [ Info   ][Hello] Receiving Event: Hello World

  This console reader allows you to browse and manipulate TaskContexts.
  You can type in a command, event, method, expression or change variables.
  (type 'help' for instructions)
    TAB completion and HISTORY is available ('bash' like)

 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :                                                     
    </screen>
    <para>
      The first <command>[ Info   ]</command> lines are printed by the Orocos 
      <classname>RTT::Logger</classname>, which has been
      configured to display informative messages to console. Normally, only
      warnings or worse are displayed by Orocos. You can always
      watch the log file 'orocos.log' in the same directory to see all messages.
      After the <command>[Log Level]</command>, the <command>[Origin]</command> of the message is
      printed, and finally the message itself. These messages leave a trace
      of what was going on in the main() function before the prompt apeared.
    </para>
    <para>
      Depending on what you type, the TaskBrowser will act differently.
      The built-in commands <command>cd</command>, <command>help</command>,
      <command>quit</command> and <command>ls</command> are seen as commands
      to the TaskBrowser itself, if you typed something else,
      it tries to evaluate your command to an expression and will
      print the result to the console. If you did not type an expression,
      it tries to parse it as a command to a (peer) task. If that also
      fails, it means you made a typo and it prints the syntax error
      to console.
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>1+1</command>
      Got :1+1
   = <command>2</command>
    </screen>
    <para>To display the contents of the current task, type <command>ls</command>,
      and switch to one of the listed peers with <command>cd</command>, while
      <command>cd ..</command> takes you one peer back in history. Since there
      are no peers other than the TaskBrowser itself, one can not <command>cd</command>
      anywhere in this example.
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>ls</command>

 Listing Hello :

 Attributes   :
 (Attribute)      string <emphasis>the_attribute</emphasis>      = Hello World
 (Attribute)      string <emphasis>the_constant</emphasis>       = Hello World
 (Property )      string <emphasis>the_property</emphasis>       = Hello World          (Hello World Description)

 Interface    :
  Methods      : <emphasis>the_method isRunning start stop trigger update</emphasis>
  Commands     : <emphasis>the_command</emphasis>
  Events       : <emphasis>the_event</emphasis>

 Objects      :
            <emphasis>this</emphasis> (  )
   <emphasis>the_data_port</emphasis> ( A Task Object. )
 <emphasis>the_buffer_port</emphasis> ( A Task Object. )

 Ports        : <emphasis>the_data_port</emphasis> <emphasis>the_bufferPort</emphasis>
 Peers        : <emphasis>TaskBrowser</emphasis>
    </screen>
    <note>
    <para>To get a quick overview of the commands, type
      <command>help</command>.
    </para>
    </note>
    <para>
      First you get a list of the Properties and Attributes
      (alphabetical) of the current component. Properties are meant
      for configuration and can be written to disk. Attributes are
      solely for run-time values. Each of them can be changed (except
      constants.)
    </para>
    <para>
      Next, the interface of this component is listed: One method is
      present <emphasis>the_method</emphasis>, one command
      <emphasis>the_command</emphasis> and one event
      <emphasis>the_event</emphasis>. They all print a 'Hello World'
      string when invoked.
    </para>
    <para>
      In the example, the current task has only three objects:
      <emphasis>this</emphasis>, <emphasis>the_data_port</emphasis> and
      <emphasis>the_buffer_port</emphasis>. The <emphasis>this</emphasis>
      object serves as the public interface of the
      Hello component. These objects contain methods, commands or
      events.  The next two objects are created to represent the
      data ports of the Hello component and contain the operations
      to send or receive data or query connection status.
    </para>
    <para>
      Last, the peers are shown, that is, the components which
      are connected to this component. The HelloWorld component is
      a stand-alone component and has only the TaskBrowser as
      a peer. 
    </para>
    <para>
      To get a list of the Task's interface, you can
      always type an object name, for example <emphasis>this</emphasis>.
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) : <command>this</command>
      Got :this

Printing Interface of 'Hello' :

  Command    : bool <emphasis>the_command</emphasis>( string the_arg )
   Hello Command Description
   the_arg : Use 'World' as argument to make the command succeed.
  Method     : string <emphasis>the_method</emphasis>( )
   Hello Method Description
  Event     : void <emphasis>the_Event</emphasis>( string the_data )
   Hello Event Description
   the_data : The data of this event.
    </screen>
    <para>
      Now we get more details about the commands, methods and
      events registered in the public interface. We see now that
      the <emphasis>the_command</emphasis> command takes one argument
      as a string, or that the <emphasis>the_method</emphasis> method
      returns a string. One can invoke each one of them:
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_method()</command>
      Got :the_method()
 = Hello World
    </screen>
    <para>
      Methods are called directly and the TaskBrowser prints the
      result. The return value of the_method() was a string, which is
      "Hello World".
    </para>
    <para>
      When a command is entered, it is sent to the Hello component, which
      will execute it on behalf of the sender. The different stages of
      its lifetime are displayed by the prompt. Hitting enter will
      refresh the status line:
    </para>
    <screen>
 In Task Hello. (Status of last Command : <emphasis>none</emphasis> )
 (type 'ls' for context info) :<command>the_command("World")</command>
      Got :the_command("World")

 In Task Hello. (Status of last Command : <emphasis>queued</emphasis>)
<command>1021.835 [ Info   ][Hello] Hello Command: World</command>
 (type 'ls' for context info) :                   

<command>1259.900 [ Info   ][main()] Checking Command: World</command>
 In Task Hello. (Status of last Command : <emphasis>done</emphasis> )
 (type 'ls' for context info) :                   
    </screen>
    <para>
      A Command might be rejected (return false) in case it received
      invalid arguments:
    </para>
    <screen>
 In Task Hello. (Status of last Command : <emphasis>done</emphasis> )
 (type 'ls' for context info) :<command>the_command("Belgium")</command>
      Got :the_command("Belgium")

 In Task Hello. (Status of last Command : <emphasis>queued</emphasis> )
 (type 'ls' for context info) :
<command>1364.505 [ Info   ][Hello] Hello Command: Belgium</command>


 In Task Hello. (Status of last Command : <emphasis>fail</emphasis> )
 (type 'ls' for context info) :         
    </screen>
    <para>
      Besides sending commands to tasks, you can alter the attributes of 
      any task, program or state machine. The TaskBrowser will confirm
      validity of the assignment with 'true' or 'false' :
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_attribute</command>
      Got :the_attribute
 = <command>Hello World</command>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_attribute = "Veni Vidi Vici !"</command>
      Got :the_attribute = "Veni Vidi Vici !"
 = <command>true</command>

 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_attribute</command>
      Got :the_attribute
 = <command>Veni Vidi Vici !</command>
    </screen>
    <para>
      Finally, let's emit an Event. The Hello World Event requires
      a payload. A callback handler was registered by the component,
      thus when we emit it, it can react to it:
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_event(the_attribute)</command>
      Got :the_event(the_attribute)
 = true
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :
<command>354.592 [ Info   ][Hello] Receiving Event: Veni Vidi Vici !</command>
    </screen>
    <para>
      The example above passed the the_attribute object as an
      argument to the event, and it was received by our task correctly.
      Events are related to commands, but allow broadcasting of
      data, while a command has a designated receiver.
    </para>
    <para>
      The Data Ports can be accessed through the <emphasis>the_data_port</emphasis>
      and <emphasis>the_buffer_port</emphasis> object interfaces. Once
      again, we can inspect the interface of an object by typing
      its name:
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_data_port</command>
      Got :the_data_port

Printing Interface of 'the_data_port' :

  Method     : string <emphasis>Get</emphasis>( )
   Get the current value of this Data Port
  Method     : void <emphasis>Set</emphasis>( string const&amp; <emphasis>Value</emphasis> )
   Set the current value of this Data Port
   Value : The new value.
    </screen>
    <para>
      The the_data_port object has two methods: Get() and Set().
      Since data ports are used for sending unbuffered data packets
      between components, this makes sense. One can interact with
      the ports as such:
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_data_port.Set("World")</command>
      Got :the_data_port.Set("World")
 = <command>(void)</command>

 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>the_data_port.Get()</command>
      Got :the_data_port.Get()
 = <command>World</command>
    </screen>
    <para>
      When a value is Set(), it is sent to whatever is connected to
      that port, when we read the port using Get(), we see that
      the previously set value is present. The advantage of using
      ports is that they are completely thread-safe for reading
      and writing, without requiring user code. The Hello component
      also contains a the_buffer_port for buffered data transfer. You
      are encouraged to play with that port as well.
    </para>
    <para>
      Remember that the TaskBrowser was a component as well ? When
      a user enters <command>ls</command>, the interface of the
      visited component is listed. It is also possible to get an
      'outside' view of the visited component, through the eyes of
      an external component. The <command>leave</command> allows
      a view from within the TaskBrowser itself:
    </para>
    <screen>
 <emphasis>In</emphasis> Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>leave</command>
1001.607 [ Info   ][main()] Watching Task Hello

 <emphasis>Watching</emphasis> Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>ls</command>

 Listing <emphasis>TaskBrowser</emphasis> :

 Attributes   : <emphasis>(none)</emphasis>

 Interface    :
  Methods      : <emphasis>isRunning start stop trigger update</emphasis>
  Commands     : <emphasis>(none)</emphasis>
  Events       : <emphasis>(none)</emphasis>

 Objects      :
            this (  )
        the_data_port ( A Task Object. )
      the_buffer_port ( A Task Object. )

 Ports        : the_data_port the_buffer_port
 Hello Peers : TaskBrowser
    </screen>
    <para>
      The following things are noteworthy: 'ls' shows now the contents
      of the TaskBrowser itself and no longer of the Hello Component.
      The TaskBrowser
      has the same ports as the component it visist: <emphasis>the_data_port</emphasis>
      and <emphasis>the_buffer_port</emphasis>. These were created at run-time
      and allow to write or read ports from the visited component.
    </para>
    <para>
      One can enter the 'inside' view again by entering <command>enter</command>:
    </para>
    <screen>
 <emphasis>Watching</emphasis> Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>enter</command>
<command>1322.653 [ Info   ][main()] Entering Task Hello</command>

 <emphasis>In</emphasis> Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :      
    </screen>
    <para>
      Last but not least, hitting TAB twice, will show you a list of
      possible completions, such as peers or commands :
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :
the_attribute     the_event         cd ..         quit
the_buffer_port.  the_method        help          this.
the_command       the_property      leave
the_constant      TaskBrowser.  list
the_data_port.     cd            ls
 (type 'ls' for context info) : 
    </screen>
    <para>
      TAB completion works even across peers, such that you can type
      a TAB completed command to another peer than the current peer.
    </para>
    <para>
      In order to quit the TaskBrowser, enter <command>quit</command>:
    </para>
    <screen>
 In Task Hello. (Status of last Command : none )
 (type 'ls' for context info) :<command>quit</command>

1575.720 [ Info   ][ExecutionEngine::setActivity] Hello is disconnected from its activity.
1575.741 [ Info   ][Logger] Orocos Logging Deactivated.      
    </screen>
    <para>
      The TaskBrowser Component is application independent, so that your enduser-application
      might need a more suitable interface. However, for testing and
      inspecting what is happening inside your real-time programs,
      it is a very useful tool. The next sections show how you can add
      properties, commands, methods etc to a TaskContext.
    </para>
    <note>
      <para>
	If you want a more in-depth tutorial, see the 'task-intro' example
	for a TaskBrowser which visits a network of three TaskContexts.
      </para>
    </note>
  </section>
  <section id="basic-task">
    <title>Setting Up a Basic Task</title>
    <para>
      Tasks are 
      implemented by the <classname>RTT::TaskContext</classname> class.
      It is useful speaking of a context because it defines
      the context in which an activity (a program) operates. 
      It defines the interface of the task, its properties,
      its peer tasks and uses its
      <classname>RTT::ExecutionEngine</classname> to handle its
      programs and to accept commands from other tasks.
    </para>
    <para>
      This section walks you through the definition of an example task
      in order to show you how you could build your own task.
    </para>
    <important>
      <para>
	The ready-to-execute code of this section can be found in the
	'simple-task' package on the <ulink
	url="http://www.orocos.org/download.html">Download</ulink>
	page of the Orocos.org website.
      </para>
    </important>
    <para>
      A <classname>RTT::TaskContext</classname> is constructed as :
    </para>
    <para>
      <programlisting>
  #include &lt;rtt/TaskContext.hpp&gt;

  // we assume this is done in all the following code listings :
  using namespace RTT;

  <classname>RTT::TaskContext</classname> a_task("ATask");
      </programlisting>
    </para>
    <para>
      The argument is the (unique) name of the task.
    </para>
    <para>
      A task's interface consists of : Commands, Methods, Ports,
      Attributes and Properties and Events, which are all public.  We
      will refer to them as <emphasis>members</emphasis>.
    </para>
    <figure id="fig-a-task-context-intro">
      <title>
	Schematic Overview of a TaskContext
      </title>
      <mediaobject>
	<imageobject role="html">
	  <imagedata fileref="images/ATaskContext" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/ATaskContext" />
	</imageobject>
	<caption>
	  <para>The Execution Flow is formed by Programs and
	    State Machines using the interface of Peer Tasks. The Data Flow
	    is the propagation of data from one task to another, where
	    one producer can have multiple consumers.
	  </para>
	</caption>
      </mediaobject>
    </figure>
    <para>
      When a TaskContext is running, it accepts commands or events using its
      Execution Engine.  The Execution Engine will check periodically
      for new commands in it's queue and execute programs which are
      running in the task. Thus to start using the task, one needs to start
      the Execution Engine.  As long as it is not started, it will accept no
      commands, run no programs and react to no events.
    </para>
    <section><title>Task Application Code</title>
    <para>
      The user may insert his application code in the
      <function>startup()</function>,
      <function>update()</function> and
      <function>shutdown()</function> functions of a TaskContext
      by inheriting from that class.
    </para>
    <programlisting>  #include &lt;rtt/TaskContext.hpp>
  class MyTask 
    : public <classname>RTT::TaskContext</classname>
  {
  public:
       MyTask(std::string name) 
         : <classname>RTT::TaskContext</classname>(name)
       {
          // see lateron what to put here.
       }
  
       /**
        * This function contains the application's startup code.
	* Return false to abort startup.
	*/
       bool startup() {
          // ...
	  return true;
       }

       /**
        * This function is periodically called.
	*/
       void update() {
          // Your algorithm for periodic execution goes inhere
       }

       /**
        * This function is called when the task is stopped.
	*/
       void shutdown() {
          // Your cleanup code
       }
  };</programlisting>
    <para>
      When a TaskContext is started, <function>startup()</function> is
      called once and may abort the startup sequence by returning
      false, for example, because of misconfiguration. When all went
      well, <function>update()</function> is called (a)periodically by
      the ExecutionEngine, see below.  When the task is stopped,
      <function>shutdown()</function> is called after the last
      <function>update()</function>.
    </para>
    </section>
    <section>
      <title>Starting Task Execution</title>
      <para>
	The functionality of a task, i.e. its algorithm, is executed
	by the Execution Engine.  To run an
	<classname>RTT::ExecutionEngine</classname>, you
	need to use one of the
	<classname>RTT::ActivityInterface</classname> classes
	from the CoreLib, for example
	<classname>RTT::PeriodicActivity</classname> or
	<classname>RTT::NonPeriodicActivity</classname>.
	This relation is shown in <xref linkend="fig-task-execution" />.
      </para>
      <figure id="fig-task-execution">
      <title>
	Executing a TaskContext
      </title>
      <mediaobject>
	<imageobject role="html">
	  <imagedata fileref="images/TaskContextExecution" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/TaskContextExecution" />
	</imageobject>
	<caption>
	  <para>You can make a TaskContext '(re-)active' by creating
	  an Activity object which executes its Execution Engine.
	  The Execution Engine delegates all work to specific
	  'Processors' and user code in update().
	  </para>
	</caption>
      </mediaobject>
    </figure>
      <para>
	The Activity classes will allocate a thread which executes the
	Execution Engine. ( See the &coreman; for more documentation
	about activities. ) The choosen
	<classname>ActivityInterface</classname> object will invoke
	the Execution Engine, which will in turn invoke the
	application's methods above.
	<programlisting>
  #include &lt;rtt/PeriodicActivity.hpp&gt;

  using namespace RTT;

  <classname>RTT::TaskContext</classname>* a_task = new MyTask("the_task")
  // create a periodic activity with priority=5, period=1000Hz
  <classname>RTT::PeriodicActivity</classname> act(5, 0.001, a_task->engine() );
  // ... start the execution engine of a_task :
  act.start(); 
  // ...
  act.stop();</programlisting></para>
      <para>
	Which will run the Execution Engine of "ATask" with a timer
	frequency of 1kHz. This is the frequency at which state
	machines are evaluated, program steps taken, commands and
	events are accepted and executed and the application code is
	run. When the periodic activity is stopped again, all programs are
	stopped, state machines are brought into the final state and
	no more commands or events are accepted.
      </para>
      <para>
	A TaskContext can also be run in a non periodic activity:
	<programlisting>
  #include &lt;rtt/NonPeriodicActivity.hpp&gt;

  using namespace RTT;

  <classname>RTT::TaskContext</classname>* a_task = new MyTask("the_task")
  // create a non periodic activity with priority=5
  <classname>RTT::NonPeriodicActivity</classname> nonpAct(5, a_task->engine() );
  // ... start the execution engine of a_task :
  nonpAct.start();
  // ...
  nonpAct.stop();</programlisting></para>
      <para>
	In case the Execution Engine waits for new Commands or Events to
	come in to be executed. Each time such an event happens, the user's
	application code (<function>update()</function>) is called as well.
      </para>
      <warning>
	<para>
	  Non periodic activities should be used with care and with much
	  thought. The ExecutionEngine will do <emphasis>absolutely nothing</emphasis>
	  if no commands or <emphasis>asynchronous events</emphasis> come in.
	  This may lead to surprising 'bugs' when program scripts or 
	  state machine scripts are executed, as they will only progress
	  upon these events and seem to be stalled otherwise. 
	</para>
      </warning>
    </section>
    <section>
      <title>Interfacing the TaskContext</title>
      <para>
	During development of your TaskContext, it is handy to connect
	the <classname>RTT::TaskBrowser</classname> to your
	task such that you can interactively manipulate it and it's 
	properties:
	<programlisting>  #include &lt;rtt/TaskBrowser.hpp>
  // ... see above
  <classname>RTT::TaskBrowser</classname> browser(a_task);

  // Start the interactive console:
  browser.loop();</programlisting>
        In which you can start/stop the task and manipulate every
	aspect of it's interface, as was seen in the previous section.
      </para>
    </section>
    <section>
      <title>Introducing the TaskContext's Interface</title>
      <para>
	A TaskContext exists of a number of accessor methods which
	expose a specific part of the interface. These methods are:
    </para>
    <para>
      <programlisting>  a_task.ports();
  a_task.methods();
  a_task.attributes();
  a_task.properties();
  a_task.commands();
  a_task.events();
      </programlisting>
      The meaning of these methods are explained in the following
      sections.
    </para>
    </section>
    <section>
      <title>The Data Flow Interface</title>
      <note><title>Purpose</title><para>The 'Data Flow' is
      a 'stream of data' between tasks. A classical control
      loop can be implemented using the Data Flow interface.
      The data is passed buffered or unbuffered from one
      task to another.
      </para></note>
      <mediaobject>
	<imageobject role="fop">
	  <imagedata width="5cm" fileref="images/DataFlowInterface" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/DataFlowInterface" />
	</imageobject>
      </mediaobject>
      <para>
	The Orocos Data Flow is implemented with the
	<emphasis>Port-Connector</emphasis> software pattern. Each
	task defines its data exchange ports and inter-task connectors
	transmit data from one port to another. A Port is defined by a
	name, unique within that task, the data type it wants to
	exchange and the buffered or un-buffered method of exchanging.
	Buffered exchange is done by "Buffer" Ports and un-buffered
	exchange is done by "Data" Ports.
      </para>
      <para>
	A Data Port can offer read-only, write-only or read-write access
	to the unbuffered data. A Buffer Port can offer read-only,
	write-only and read-write access to the buffered data.
	The example below shows all these possiblities.
      </para>
      <section>
	<title>Setting up the Data Flow Interface</title>
	<important>
	  <para>
	    The ready-to-execute code of this section can be found in the
	    'dataflow-task' package on the <ulink
	    url="http://www.orocos.org/download.html">Download</ulink>
	    page of the Orocos.org website.
	  </para>
	</important>
	<para>
	  Any kind of data can be exchanged (also user defined types)
	  but for readability, only the 'double' C type is used here.
	  <programlisting>  #include &lt;rtt/Ports.hpp&gt;
  using namespace RTT;

  class MyTask
    : public <classname>RTT::TaskContext</classname>
  {
    // Read-only data port:
    <classname>RTT::ReadDataPort</classname>&lt;double&gt; indatPort;
    // Write-only data port:
    <classname>RTT::WriteDataPort</classname>&lt;double&gt; outdatPort;
    // Read-Write data port:
    <classname>RTT::DataPort</classname>&lt;double&gt; rwdatPort;

    // Read-only buffer port:
    <classname>RTT::ReadBufferPort</classname>&lt;double&gt; inbufPort;
    // Write-only buffer port:
    <classname>RTT::WriteBufferPort</classname>&lt;double&gt; outbufPort;
    // Read-Write buffer port:
    <classname>RTT::BufferPort</classname>&lt;double&gt; rwbufPort;
  public:
    // ...
    MyTask(std::string name)
      : <classname>RTT::TaskContext</classname>(name),
        indatPort("Data_R"),
	outdatPort("Data_W", 1.0),  // note: initial value
	rwdatPort("Data_RW", 1.0),

	inbufPort("SetPoint_X"),
	outbufPort("Packet_1", 15), // note: buffer size
	rwbufPort("Packet_2", 30)
    {
       this->ports()->addPort( &amp;indatPort );
       this->ports()->addPort( &amp;outdatPort );
       this->ports()->addPort( &amp;rwdatPort );

       this->ports()->addPort( &amp;inbufPort );
       this->ports()->addPort( &amp;outbufPort );
       this->ports()->addPort( &amp;rwbufPort );

       // more additions to follow, see below
     }

     // ...
  };</programlisting>
      </para>
      <para>
	The example starts with declaring all the ports of
	MyTask. A template parameter specifies the type of data the 
	task wants to exchange through that port. Logically, if two
	tasks are connected, they must agree on this type.
	The constructor of MyTask initialises each port with a name.
	This name is used to 'match' ports between connected tasks.
	Orocos will warn at run-time if names or types do not match.
      </para>
      <para>
	Write and read-write Buffers take besides a name, the
	prefered buffer size as a parameter. In the example,
	these are the values 15 and 30. Before the task is
	connected to its peers, you can still change this
	value with the <function>setBufferSize()</function>
	function of the Port.
      </para>
      <para>
	Finally, a 'write' port can take an initial value in the
	constructor as well. This value will be used when the connection
	between two ports is created in order to initialise the connection
	( using 'connectPorts', see <xref linkend="connect-tasks" /> ).
	If a 'write' port is connected to an existing connection, the
	initial value (and buffer size) are ignored and the settings of
	the existing connection are not touched. You can modify the
	initial value with the 'Set( value )' function in both Buffer
	and Data write ports.
      </para>
      <note>
	<para>
	  Alternatively, you can connect buffers in your
	  main() program by writing:
	  <programlisting>  #include &lt;rtt/ConnectionFactory.hpp&gt;
  // ...
  int buf_size = 100;
  <classname>RTT::ConnectionFactory</classname>&lt;double&gt; cf;
  <classname>RTT::ConnectionInterface</classname>::shared_ptr con =
    cf.createBuffer(a_task->ports()->getPort("SetPoint_X"), 
                    b_task->ports()->getPort("SetPoint_X"), 
                    buf_size);
  if (con)
     con->connect();</programlisting>
	<emphasis>before</emphasis> the tasks are connected. 
	This connection will then take precedence. 
	</para>
      </note>
      </section>
      <section>
	<title>Using the Data Flow Interface in C++</title>
	<para>
	  The Data Flow interface is used by your task from within
	  the program scripts or its <function>update()</function>
	  method. Logically the script or method reads the inbound
	  data, calculates something and writes the outbound data.
	</para>
	<programlisting>  #include &lt;rtt/Ports.hpp&gt;
  using namespace RTT;

  class MyTask
    : public <classname>RTT::TaskContext</classname>
  {
     // ...Constructor sets up Ports, see above.

     bool startup() {
       // Check validity of (all) Ports:
       if ( !indatPort.connected() ) {
          // No connection was made !
	  return false;
       }
       if ( !outdatPort.connected() ) {
          // ...
       }
     }

     bool update() {
       // Read and write the Data Flow:
       // Unbuffered:
       double val = indatPort.Get();
       // <emphasis>calculate...</emphasis>
       outdatPort.Set( val );

       // Buffered:
       if ( inbufPort.Pop( val ) ) {
          // <emphasis>calculate...</emphasis>
       } else {
          // buffer empty.
       }

       if ( outbufPort.Push( val ) ) {
          // ok.
       } else {
          // buffer full.
       }
     }
     // ...
  };</programlisting>
	<para>
	  It is wise to check in the <function>startup()</function>
	  function if all necessary ports are <function>connected()</function>
	  ( or <function>ready()</function> ).
	  At this point, the task startup can still be aborted by
	  returning false. Otherwise, a write to a port
	  will be discarded, while a read returns the initial value
	  or the default value. A Pop of a disconnected port will
	  always return false.
	</para>
<!-- 	<section> TO COMPLEX FOR USERS -->
<!-- 	  <title>Connection Container Interface</title> -->
<!-- 	  <para> -->
<!-- 	    A port's connection can be accessed through the -->
<!-- 	    connection() method. To access the data within the connection -->
<!-- 	    (i.e. the container), a special method is provided by each port. -->
<!-- 	  </para> -->
<!-- 	  <para> -->
<!-- 	    A DataPort's data container can be accessed by the -->
<!-- 	    <function>data()</function> function, while a BufferPort's -->
<!-- 	    buffer container can be accessed by the -->
<!-- 	    <function>read()</function>,<function>write()</function> -->
<!-- 	    and <function>buffer()</function> functions for read-only, -->
<!-- 	    write-only and read-write buffers respectively.  More -->
<!-- 	    specifically, <function>data()</function> returns a -->
<!-- 	    (const) -->
<!-- 	    <classname>RTT::DataObjectInterface</classname>, -->
<!-- 	    <function>read</function> returns a -->
<!-- 	    <classname>RTT::ReadInterface</classname>, -->
<!-- 	    <function>write</function> returns a -->
<!-- 	    <classname>RTT::WriteInterface</classname> and -->
<!-- 	    <function>buffer</function> returns a -->
<!-- 	    <classname>RTT::BufferInterface</classname>. -->
<!-- 	  </para> -->
<!-- 	</section> -->
      </section>
      <section>
	<title>Using Data Flow in Scripts</title>
	<para>
	  When a Port is connected, it becomes available to the
	  Orocos scripting system such that (part of) the calculation
	  can happen in a script. Also, the TaskBrowser can then
	  be used to inspect the contents of the DataFlow online.
	</para>
	<para>
	  A small program script could be loaded into MyTask with
	  the following contents:
	  <programlisting>  program MyControlProgram {
    double the_K  = K        // read task property, see later.
    double setp_d

    while ( true ) {
      if ( SetPoint_X.Pop( setp_d ) ) { // read Buffer Port
        double in_d = Data_R.Get()      // read Data Port
        double out_d = (setp_d - in_d) * K  // Calculate
        do Data_W.Set( out_d )          // write Data Port
      }
      do nothing       // this is a 'wait' point.
    }
  } </programlisting>
         The program "MyControlProgram" starts with declaring
	 two variables and reading the task's Property 'K'.
	 Then it goes into an endless loop, trying to Pop
	 a setpoint value from the "SetPoint_X" Buffer Port. If that succeeds (buffer not empty)
	 the  "Data_R" Data Port is read and a simple 
	 calculation is done. The result is written to the
	 "Data_W" Data Port and can now be read by the other
	 end. Alternatively, the result may be directly
	 used by the Task in order to write it to a device
	 or any non-task object. You can use methods (below)
	 to send data from scripts back to the C++ implementation.
	</para>
	<para>
	  Remark that the program is executed within the Execution
	  Engine. In order to avoid the endless loop, a 'wait' point
	  must be present. The "do nothing" command inserts such a
	  wait point and is part of the Scripting syntax.  If you plan
	  to use Scripting state machines, such a
	  <function>while(true)</function> loop and hence wait point
	  is not necessary. See the Scripting Manual for a full
	  overview of the syntax.
	</para>
      </section>
    </section>
    <section>
      <title>The Method Interface</title>
      <note><title>Purpose</title><para>A task's methods are intended
      to be called 'synchronously' by the caller, i.e. are directly
      executed like a function. Use it to 'calculate' a result or
      change a parameter.</para></note>
      <mediaobject>
	<imageobject role="fop">
	  <imagedata width="5cm" fileref="images/MethodInterface" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/MethodInterface" />
	</imageobject>
      </mediaobject>
      <para>
	The easiest way to access a TaskContext's interface
	is through Methods. They resemble very much normal C
	or C++ functions, but they have the advantage to be
	usable in scripting or can be called over a network
	connection. They take arguments and return a value.
	The return value can in return be used as an argument
	for other Methods or stored in a variable. For
	all details, we refer to the &orocos; Scripting
	Manual.
      </para>
      <para>
	To add a TaskContext's method to the method interface, one 
	proceeds similarly as when creating Data Ports. The
	data type is now replaced by a <emphasis>function signature</emphasis>,
	for example '<programlisting>void(int, double)</programlisting>'
	which is the signature of a function returning 'void' and
	having two arguments: an 'int' and a 'double'.
      </para>
      <para>
	<programlisting>
  #include &lt;rtt/Method.hpp&gt;
  using namespace RTT;

  class MyTask
    : public <classname>RTT::TaskContext</classname>
  {
    public:
    void reset() { ... }
    string getName() const { ... }
    double changeParameter(double f) { ... }
    // ...

    Method&lt;void(void)&gt; resetMethod;
    Method&lt;string(void)&gt; nameMethod;
    Method&lt;double(double)&gt; paramMethod;

    MyTask(std::string name)
      : <classname>RTT::TaskContext</classname>(name),
      resetMethod(&quot;reset&quot;, &amp;MyTask::reset, this),
      nameMethod(&quot;name&quot;, &amp;MyTask::getName, this),
      resetMethod(&quot;changeP&quot;, &amp;MyTask::changeParameter, this)
    {
       // Add the method objects to the method interface:
       this->methods()->addMethod( &amp;resetMethod, &quot;Reset the system.&quot;);
       this->methods()->addMethod( &amp;nameMethod, &quot;Read out the name of the system.&quot;);
       this->methods()->addMethod( &amp;changeP,
                                   &quot;Change a parameter, return the old value.&quot;,
	                           &quot;New Value&quot;, &quot;The new value for the parameter.&quot;); 

       // more additions to follow, see below
     }
     // ...
  };</programlisting>
      </para>
      <para>
	In the above example, we wish to add 3 class functions to the
	method interface: reset, getName and changeParameter. This can
	be done by constructing a
	<classname>RTT::Method</classname> object with the
	correct function signature for each such class function.  Each
	Method object is initialised in the constructor with a name
	(&quot;reset&quot;), a pointer to the class function
	(&amp;MyTask::reset) and a pointer to the class object (this).
	This setup allows the method objects resetMethod, nameMethod
	and paramMethod to be invoked just like one would call the
	functions directly.
      </para>
      <para>
	After the method objects are constructed, we add methods to
	the method interface using the addMethod() function.  The
	addMethod() function requires a a method object (&amp;resetMethod),
	a description (&quot;Reset the system.&quot;) and a name,
	description pair for each argument (such as in
	changeParameter).
      </para>
      <para>
	Using this mechanism, any method of <emphasis>any</emphasis>
	class can be added to a task's method interface.
      </para>
      <section>
	<title>Invoking Methods in C++</title>
	<para>
	  In order to easily invoke a task's methods from a C++ program,
	  only only needs a pointer to a TaskContext object, for example
	  using the 'getPeer()' class function.
	</para>
	<programlisting>  // create a method:
  TaskContext* a_task_ptr;
  Method&lt;void(void)&gt; my_reset_meth 
       = a_task_ptr->methods()->getMethod&lt;void(void)&gt;("reset");

  // Call 'reset' of a_task:
  reset_meth();  </programlisting>
      <para>
	Methods can also be given arguments and collect return values. Both constant
	arguments and variable arguments are supported. 
      </para>
      <programlisting>  // used to hold the return value:
  string name;
  Method&lt;string(void)> name_meth = 
    a_task_ptr->methods()->getMethod&lt;string(void)>("name");

  // Call 'name' of a_task:
  name = name_meth(); 

  cout &lt;&lt; "Name was: " &lt;&lt; name &lt;&lt; endl; 

  // hold return value.
  double oldvalue;
  Method&lt;double(double)> mychange_1 =
      a_task.methods()->create("changeP");

  // Call 'changeParameter' of a_task with argument '1.0'
  oldvalue = mychange_1( 1.0 );
  // oldvalue now contains previous value.</programlisting>
       <para>
	 Up to 4 arguments can be given. If the signature was
	 not correct, the method invocation will be ignored.
	 One can check validity of a method object with the
	 'ready()' function:
       </para>
       <programlisting>  Method&lt;double(double)> mychange_1 = ...;
  assert( mychange_1.ready() );</programlisting>
<!--- MethodC must go to -devel manual.
      <para>
	However, the return value
	con only be stored in a variable:
      </para>
      <programlisting>  // used to store the return value:
  string name;
  MethodC name_meth = 
    a_task.methods()->create("this", "name").ret( name );

  // Call 'name' of a_task:
  bool result = name_meth.execute(); 

  cout &lt;&lt; "Name was: " &lt;&lt; name &lt;&lt; endl; 

  // store return value.
  double oldvalue;
  // const argument (note: 'argC'):
  MethodC mychange_1 =
      a_task.methods()->create("this", "changeP").argC(1.0).ret( oldvalue );

  // this example ignores the return value.
  // variable argument (note: 'arg'):
  double d_arg = 1.23;
  MethodC mychange_2 =
      a_task.methods()->create("this", "changeP").arg( d_arg );

  // Call 'changeParameter' of a_task with argument '1.0'
  bool result_1 = mychange_1.execute();
  // oldvalue now contains previous value.

  // Call 'changeParameter' of a_task, reads contents of d_arg.
  bool result_2 = mychange_2.execute();</programlisting>
       <para>
	 Any number of arguments can be given (just add
	 .arg(X).arg(Y).arg(Z) etc ), but an error will be logged when
	 a wrong number or wrong type of argument is given.
       </para>
       -->
      </section>
      <section>
	<title>Invoking Methods in Scripts</title>
	<para>
	  To invoke
	methods from a script, one can then write :</para>
	<para>
	<programlisting>
  do ATask.changeP( 0.1 )
  // or :
  set result = ATask.changeP( 0.1 ) // store return value </programlisting></para>
      </section>
    </section>
    <section id="method-args-types">
      <title>Method Argument and Return Types</title>
      <para>
	The arguments can be of any class type and type qualifier
	(const, &amp;, *,...). However, to be compatible with the
	Orocos Program Parser variables, it is best to follow the
	following guidelines :
	<table id="method-args-table">
	  <title>Method Return &amp; Argument Types</title>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>C++ Type</entry>
		<entry>In C++ functions passed by</entry>
		<entry>Maps to Parser variable type</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Primitive C types : double, int, bool, char</entry>
		<entry><emphasis>value</emphasis> (no const, no reference )</entry>
		<entry>double, int, bool, char</entry>
	      </row>
	      <row>
		<entry>C++ Container types : std::string, std::vector&lt;double&gt;</entry>
		<entry><emphasis>const &amp;</emphasis></entry>
		<entry>string, array</entry>
	      </row>
	      <row>
		<entry>Orocos Fixed Container types : RTT::Double6D, ORO_Geometry::[Frame | Rotation | Twist | ... ]</entry>
		<entry><emphasis>const &amp;</emphasis></entry>
		<entry>double6d, frame, rotation, twist, ...</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	Summarised, every non-class argument is best passed by value,
	and every class type is best passed by const reference. The parser
	does handle references (&amp;) in the arguments or return type as well.
      </para>
  </section>
  <section id="task-attr-rep">
    <title>The Attributes and Properties Interface</title>
      <note><title>Purpose</title><para>A task's attributes and
      properties are intended to configure and tune a task with
      certain values. Properties have the advantage of being writable
      to an XML format, hence can store 'persistent' state.  For
      example, a control parameter. Attributes are lightweight values
      which can be read and written during runtime, for example, the
      current measured temperature.  </para></note>
      <mediaobject>
	<imageobject role="fop">
	  <imagedata width="5cm" fileref="images/PropertyInterface" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/PropertyInterface" />
	</imageobject>
      </mediaobject>
    <para>
      A TaskContext may have any number of attributes or properties,
      of any type. They can be used by programs in the
      TaskContext to get (and set) configuration data.
      The task allows to store any C++ value type and
      also knows how to handle Property objects. Attributes are plain
      variables, while properties can be written to and updated from an XML file.
    </para>
    <section>
      <title>Adding Task Attributes or Properties</title>
      <para>
	An attribute can be added in the task's interface
	(<classname>RTT::AttributeRepository</classname>) like this :</para>
      <para>
	<programlisting>  #include &lt;rtt/Property.hpp>
  #include &lt;rtt/Attribute.hpp>

  class MyTask
    : public <classname>RTT::TaskContext</classname>
  {
     <classname>RTT::Attribute</classname>&lt;bool&gt; aflag;
     <classname>RTT::Attribute</classname>&lt;int&gt; max;

     <classname>RTT::Constant</classname>&lt;double&gt; pi;

     <classname>RTT::Property</classname>&lt;std::string&gt; param;
     <classname>RTT::Property</classname>&lt;double&gt; value;
  public:
    // ...
    MyTask(std::string name)
      : <classname>RTT::TaskContext</classname>(name),
        param("Param","Param Description","The String"),
	value("Value","Value Description", 1.23 ),
	aflag("aflag", false),
	max( "max", 5 ),
	pi( "pi", 3.14 )
    {
       // other code here...

       this->attributes()->addAttribute( &amp;aflag );
       this->attributes()->addAttribute( &amp;max );
      
       this->attributes()->addConstant( &amp;pi );

       this->properties()->addProperty( &amp;param );
       this->properties()->addProperty( &amp;value );
     }
     // ...
  };
</programlisting></para>
      <para>
	Which inserts an attribute of type bool and int, name 'aflag' and 'max' and initial
	value of false and 5 to the task's interface. A constant 'pi' is added as well.
	The methods return false if an attribute with that name already exists.
	Adding a Property is also straightforward. The property is added in a 
	<classname>ORO_Corelib::PropertyBag</classname>.
      </para>
    </section>
    <section>
      <title>Accessing Task Attributes or Properties in C++</title>
      <para>
	To get a value from the task, you can use the set() and get() methods :
      </para>
      <para>
	<programlisting>
  bool result = aflag.get();
  assert( result == false );

  param.set("New String");
  assert( param.get() == "New String" );</programlisting></para>
      <para>
	While another task can access it through the attributes() interface:
    <programlisting>  Attribute&lt;bool> the_flag = a_task->attributes()->getAttribute&lt;bool>("aflag");
  assert( the_flag.ready() );

  bool result = the_flag.get();
  assert( result == false );

  Attribute&lt;int> the_max = a_task->attributes()->getAttribute&lt;int>("max");
  assert( the_max.ready() );
  the_max.set( 10 );
  assert( the_max.get() == 10 );</programlisting>
  The attributes 'the_flag' and 'the_max' are called 'mirrors' of the
  original attributes of the task.
      </para>
    </section>
    <section>
      <title>Accessing Task Attributes in Scripts</title>
      <para>
	A program script can access the above attributes as in</para>
      <para>
	<programlisting>  // a program in "ATask" does :
  var double pi2 = pi * 2.
  var int    myMax = 3
  set max = myMax

  set Param = "B Value"</programlisting>
	<programlisting>  // an external (peer task) program does :
  var double pi2 = ATask.pi * 2.
  var int    myMax = 3
  set ATask.max = myMax	</programlisting></para>
      <para>
	When trying to assign a value to a constant, the script parser
	will throw an exception, thus before the program is run.
	You must always specify the task's name (or 'task') when accessing a
	task's attribute, this is different from methods and commands,
	which may omit the task's name if the program is running within
	the task.
      </para>
      <important>
	<para>
	  The same restrictions of <xref linkend="method-args-types" /> hold for
	  the attribute types, when you want to access them from program scripts.
	</para>
      </important>
    </section>
    <section>
      <title>Storing and Loading Task Properties</title>
      <para>
	See <xref linkend="task-property-config" /> for storing and loading
	the Properties to and from files, in order to store a TaskContext's state.
      </para>
    </section>
  </section>
  <section>
    <title>The Command Interface</title>
      <note><title>Purpose</title><para>A task's commands are intended
      to be called 'asynchronously', thus <emphasis>sent</emphasis> by the caller
      to the receiver. Use it to 'reach a goal' in the receiver, typically
      this takes time to accomplish. Command functions are, in contrast with methods,
      executed by the receiver.</para></note>
      <mediaobject>
	<imageobject role="fop">
	  <imagedata width="5cm" fileref="images/CommandInterface" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/CommandInterface" />
	</imageobject>
      </mediaobject>
    <para>
      The command interface is very similar to the Method interface above.
    </para>
    <section>
      <title>Adding Commands to a TaskContext</title>
      <para>
	To add a command to the Command Interface, one 
	must create <classname>RTT::Command</classname>,
	objects :</para>
      <para>
	<programlisting>
  #include &lt;rtt/Command.hpp&gt;

  class MyTask
    : public <classname>RTT::TaskContext</classname>
  {
  public:
    /**
     * The first command starts a cycle.
     */
    bool startCycle() { ... }
    bool cycleDone() const { ... }

    Command&lt;bool(void)> cycleCommand;

    /**
     * Another command cleans stuff up.
     */
    bool cleanupMess(double f) { ... }
    bool isMessCleaned() const { ... }

    Command&lt;bool(double)> messCommand;

  public:
    MyTask(std::string name)
      : <classname>RTT::TaskContext</classname>(name),
        cycleCommand(&quot;startCycle&quot;,
	             &amp;MyTask::startCycle,
                     &amp;MyTask::cycleDone, this),
        messCommand( &quot;cleanup&quot;,
                     &amp;MyTask::cleanupMess,
                     &amp;MyTask::isMessCleaned, this)
    {
      // ... other startup code here

      this->commands()->addCommand( &amp;cycleCommand,
                                    &quot;Start a new cycle.&quot;);
      this->commands()->addCommand( &amp;messCommand,
                                    &quot;Start cleanup operation.&quot;,
	                            &quot;cfactor&quot;, &quot;A cfactor denoting the thoroughness.&quot;);
    }
  };</programlisting></para>
      <para>
	Commands differ from Methods in that they take
	an extra function which is called the <emphasis>Completion
	Condition</emphasis>. It is a function which returns true
	when the command is done. The command itself
	also returns a boolean which indicates if it 
	was accepted or not. Reasons to be rejected
	can be faulty arguments or that the system
	is not ready to accept a new command.
      </para>
      <para>
	The <classname>Command</classname> object requires two member
	pointers instead of one, which must both return a 'bool'.  The
	first one is the command function that does the actual work,
	and the completion condition is a function having :</para>
      <itemizedlist>
	<listitem>
	  <para>exactly the same arguments as the command,</para>
	</listitem>
	<listitem>
	  <para>OR only the first argument of the command,</para>
	</listitem>
	<listitem>
	  <para>OR no arguments at all.</para>
	</listitem>
      </itemizedlist>
      <para>
	Analogous to <function>addMethod()</function>,
	<function>addCommand</function> adds the Command objects to
	the TaskContext interface and also requires a string
	describing the command, and two strings giving a name and
	description for every argument.
      </para>
    </section>
    <section>
      <title>Invoking Commands in C++</title>
      <para>
	Once a command is added to a TaskContext's interface, other tasks
	can make use of that command. 
      </para>
      <para>
	The <classname>RTT::Command</classname>
	class can be used to invoke commands as well.
	You can get such object from a task's interface:
      </para>
      <programlisting>  Command&lt;bool(void)> mycom 
     = a_task.commands()->getCommand&lt;bool(void)>("startCycle");
  // check if the command is ok:
  assert( mycom.ready() );

  // Send 'startCycle' to a_task (asynchronous).
  bool result = mycom();
  // next, check its status:
  bool accepted = mycom.accepted(); // accepted by execution engine?
  bool valid = mycom.valid();       // command was valid (well-formed)?
  bool done = mycom.done();         // command was done?
      </programlisting>
      <para>
	Such commands can also be given arguments. Both constant
	arguments and variable arguments are supported:
      </para>
      <programlisting>  // get a command:
  Command&lt;bool(double)> mycleanup_1 =
      a_task.commands()->getCommand&lt;bool(double)>("cleanup");

  // Send 'cleanup' to a_task with argument '1.0'
  bool result_1 = mycleanup_1( 1.0 );

  bool d_arg = 5.0;
  // Send 'cleanup' to a_task, reads contents of d_arg.
  bool result_2 = mycleanup_1(d_arg);</programlisting>
       <para>
	 The current implementation supports up to 4 arguments.
	 Since the use of 'structs' is allowed, this is enough
	 for most applications.
       </para>
<!---
      <para>
	The <classname>RTT::CommandC</classname>
	class is especially designed to manage task commands in C++.
	You can ask a task's factory to create such object:
      </para>
      <programlisting>  CommandC mycom = a_task.commands()->create("this", "startCycle");

  // Send 'startCycle' to a_task.
  bool result = mycom.execute();
  // next, check its status:
  bool accepted = mycom.accepted(); // accepted by execution engine?
  bool valid = mycom.valid();       // command was valid (well-formed)?
  bool done = mycom.done();         // command was done?
      </programlisting>
      <para>
	Such commands can also be given arguments. Both constant
	arguments and variable arguments are supported:
      </para>
      <programlisting>  // const argument (note: 'argC'):
  CommandC mycleanup_1 =
      a_task.commands()->create("this", "cleanup").argC(1.0);

  // variable argument (note: 'arg'):
  double d_arg = 1.23;
  CommandC mycleanup_2 =
      a_task.commands()->create("this", "cleanup").arg( d_arg );

  // Send 'cleanup' to a_task with argument '1.0'
  bool result_1 = mycleanup_1.execute();

  // Send 'cleanup' to a_task, reads contents of d_arg.
  bool result_2 = mycleanup_2.execute();</programlisting>
       <para>
	 Any number of arguments can be given, but an error will be
	 logged when a wrong number or wrong type of argument is given.
       </para>
-->
    </section>
    <section>
      <title>Invoking Commands from Scripts</title>
      <para>
	The above lets you write in a program script :</para>
      <para>
	<programlisting>
  do startCycle()
  do cleanup( 0.1 )	</programlisting></para>
      <para>
	when the program is loaded in a_task.
      </para>
      <para>
	Commands returning false will propagate that error
	to the program or function calling that command, which
	will cause the program to enter an error state, ie
	it stops its execution.
      </para>
      <important>
	<para>
	  The same restrictions of <xref linkend="method-args-types"
	  /> hold for the command and condition types, when you want
	  to access them from program scripts.
	</para>
      </important>
    </section>
  </section>
  <section>
    <title>The Event Interface</title>
      <note><title>Purpose</title><para>A task's events are intended
      to be 'emitted', thus <emphasis>published</emphasis> by the task
      to subscribers. Use it to 'notify' interested parties of a change
      in the system.</para></note>
      <mediaobject>
	<imageobject role="fop">
	  <imagedata width="5cm" fileref="images/EventInterface" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/EventInterface" />
	</imageobject>
      </mediaobject>
    <para>
      A task may register its events in its interface in order to be
      used by its state machines and other tasks as well.  Events
      are defined and explained in the Orocos
      CoreLib Manual.
    </para>
    <section>
      <title>Adding Events</title>
      <para>
	Events can be easily added to a task's interface,
	much like methods are:
      </para>
	<programlisting>  #include &lt;rtt/Event.hpp>

  class MyTask
    : public <classname>RTT::TaskContext</classname>
  {
    // An event with a bool argument:
    <classname>RTT::Event</classname>&lt; void(bool) &gt; turnSwitch;
    // An event with three arguments:
    <classname>RTT::Event</classname>&lt; bool(double, double, double) &gt; moveAxis;
  public:
    MyTask(std::string name)
      : <classname>RTT::TaskContext</classname>(name),
        turnSwitch( "turnSwitch" ),
	moveAxis( "move" )
    {
      // ... other startup code here
  
      // add it to the task's interface:
      this->events()->addEvent( &amp;turnSwitch, 
                                "Turn switch description", 
                                "d","Direction" ); 
      this->events()->addEvent( &amp;moveAxis,
                                "x","X axis position",
				"y","Y axis position",
				"z","Z axis direction");
    }
  };</programlisting>
      <para>
	An <classname>RTT::Event</classname> object has the signature
	('void(bool)') of the 'callback function' it will call when
	the event is 'emitted' (or 'fired'). The object is initialised
	with a name ("turnSwitch") and added to the interface ('addEvent').
      </para>
    </section>
    <section>
      <title>Emitting Events in C++</title>
      <para>
	Once events are added, they can be emitted using the
	<classname>RTT::Event</classname> object.
	<programlisting>  <classname>RTT::Event&lt; bool(double, double, double) &gt;</classname> move_event 
    = a_task.events()->getEvent( "move" );
  assert( move_event.ready() );

  // emit the event 'move' with given args:
  move_event(1.0, 2.0, 3.0);

  // or with variable arguments:
  double a = 0.3, b = 0.2, c = 0.1;
  move_event(a, b, c); </programlisting>
      </para>
    </section>
    <section>
      <title>Reacting to Events in C++</title>
      <para>
	Analogous to emitting an event, one can also react to an event
	in C++, using the Event interface. Event connections can be accessed
	through the <classname>RTT::Handle</classname> object. The
	first example shows how to setup a synchronous connection to
	the event of the previous examples: 
      </para>
      <programlisting>   #include &lt;boost/bind.hpp> 
  /** 
   * Example: Connect a class method to an Event.  
   */ 
  class Reactor 
  { 
  public: 
     bool react_callback(double a1, double a2, double a3) { 
        // use a1,a2, a3 
	return false; // return value is ignored.
     } 
  };

  /**
   * Example: Connect a 'C' function to an Event.
   */
  bool foo_callback( double a1, double a2, double a3 ) {
      // use a1, a2, a3
      return false; // ignored.
  }

  // Class callback:
  Reactor r;

  <classname>RTT::Handle</classname> h
    = a_task.events()->setupConnection("move")
                 .callback( &amp;r, &amp;Reactor::react_callback )
                 .handle();
  assert( h.ready() );
    
  h.connect(); // connect to event "move"

  move_event(1.0, 2.0, 3.0); // see previous example.

  // now Reactor::callback() was called.

  h.disconnect(); // disconnect again.

  // 'C' Function callback:
  h = a_task.events()->setupConnection("move")
                 .callback( &amp;foo_callback )
                 .handle();

  h.connect();
  move_event(4.0, 5.0, 6.0)

  // now foo_callback is called with arguments.	</programlisting>
      <note>
	<para>
	  Using the <function>boost::bind</function> function is not yet supported
	  in this interface. You must provide the object and function separately
	  in <function>callback()</function>.
	</para>
      </note>
      <para>
	Analogous to the event example in the CoreLib Manual,
	a class is made to react to the event. A connection
	is setup between the "move" event and the <function>react_callback</function>
	function of "r". The connection can be controlled using
	the handle to connect or disconnect the reaction to events.
	When <function>connect()</function> is called, every
	event invocation will call <function>react_callback()</function>
	with the given arguments. Using a 'C' function works analogous as shown
	above.
      </para>
      <para>
	A second example continues, but uses an asynchronous connection.
	First a new task (b_task) is created which will handle the event
	asynchronously. During setup, the <classname>RTT::EventProcessor</classname> of
	b_task's Execution Engine is used to process the event.
	<programlisting>  <classname>RTT::TaskContext</classname> b_task("BTask");
  <classname>RTT::PeriodicActivity</classname> ptask_b(5, 0.1); // priority, period
  ptask_b.run( &amp;b_task );
  ptask_b.start();

  <classname>RTT::Handle</classname> h3 
    = a_task.events()->setupConnection("move")
                            .callback(&amp;r, &amp;react_callback,
                                      b_task.engine()->events() ).handle();
    
  assert( h3.ready() );

  h3.connect(); // connect asynchronously to event "move"

  move_event.emit(); // see previous example.

  // wait a bit...

  // now react_callback() was called from within b_task's execution engine.
	</programlisting>
	Note that after passing the object and function, the EventProcessor
	of b_task is added in the <function>callback</function> method, such
	that the callback is executed in b_task's thread.
      </para>
    </section>
    <section>
      <title>Using Events from Scripts</title>
      <para>
	Events are as easy to use as methods (above) from within
	scripts, using the keyword <symbol>do</symbol>:
	<programlisting>  do ATask.move( 1.0, 2.0, 3.0 )</programlisting>
      </para>
      <para>
	It is also possible to react to events from within a state
	machine in order to change state. We refer to the Program
	Parser Manual for syntax and examples.
      </para>
    </section>
  </section>
  </section>
  <section id="connect-tasks">
    <title>Connecting TaskContexts</title>
    <para>
      A Real-Time system contains multiple concurrent
      tasks which must communicate to each other.
      TaskContext can be connected to each other
      such that they can communicate Real-Time data.
    </para>
    <section>
      <title>Setting up the Execution Flow</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/ConnectPeers" />
	</imageobject>
	<caption>
	  <para>
	    The <function>addPeer</function> and <function>connectPeers</function>
	    functions are used to connect TaskContexts and allow them
	    to use each other's interface. The <function>connectPorts</function>
	    funtion sets up the data flow between tasks.
	  </para>
	</caption>
      </mediaobject>
      <para>
	We call connected TaskContexts &quot;Peers&quot; as there is no fixed
	hierarchy. A connection from one TaskContext to its
	Peer can be uni- or bi-directional. In a uni-directional connection (<function>addPeer</function> ),
	only one peer can use the interface of the other, while
	in a bi-directional connection (<function>connectPeers</function>), both can use
	each others interface.
	This allows to build strictly hierarchical topological
	networks as well as complete flat or circular networks or any
	kind of mixed network. 
      </para>
      <para>
	Peers are connected as such (<methodname>hasPeer</methodname> takes a string 
      argument ):</para>
      <para>
      <programlisting>  // bi-directional :
  connectPeers( &amp;a_task, &amp;b_task );
  assert( a_task.hasPeer( &amp;b_task.getName() ) 
          &amp;&amp; b_task.hasPeer( &amp;a_task.getName() );
  // uni-directional :
  a_task.addPeer( &amp;c_task );
  assert( a_task.hasPeer( &amp;c_task.getName() ) 
          &amp;&amp; ! c_task.hasPeer( &amp;a_task.getName() );

  // Access the interface of a Peer:
  Method&lt;bool(void) m = a_task.getPeer( "CTask" )->methods()->getMethod&lt;bool(void)>("aMethod");
  // etc. See interface usage in previous sections.
</programlisting></para>
    <para>
      Both <function>connectPeers</function> and <function>addPeer</function>
      allow scripts or C++ code to use the interface of a connected Peer. <function>connectPeers</function>
      does this connection in both directions.
    </para>
    <para>
      From within a program script, peers can be accessed by
      merely prefixing their name to the member you want to
      access. A program <emphasis>within</emphasis> &quot;ATask&quot; could
      access its peers as such :</para>
    <para>
      <programlisting>
  var bool result = CTask.aMethod() </programlisting></para>
    <para>
      The peer connection graph can be traversed at arbitrary
      depth. Thus you can access your peer's peers.
    </para>
    </section>
    <section>
      <title>Setting up the Data Flow</title>
      <para>
	Data Flow between TaskContexts is setup by using <function>connectPorts</function>.
	The direction of the data flow is imposed by the read/write direction of
	the ports.  The <function>connectPorts(TaskContext* A, TaskContext* B)</function> function
	creates a connection between TaskContext ports when both ports 
	have the same name and type. It will never disconnect existing connections
	and only tries to add ports to existing connections or create new
	connections.
      </para>
      <para>
	Before calling <function>connectPorts</function>, one may connect
	individual ports using <function>a_port.connectTo(&amp;b_port);</function>
	when complexer data flow networks need to be formed.
    </para>
    <example><title>TaskContext Data Flow Topology Example</title>
    <para>This diagram shows some possible topologies. Four tasks,
    "A", "B", "C" and "D" have each a port "MyData" and a port "MyData2".
    The example demonstrates that connections are always made from
    writer (sender) to reader (receiver).
    </para>
    <mediaobject>
	<imageobject role="fop">
	  <imagedata fileref="images/DataFlowTopology" />
	</imageobject>
	<imageobject>
	  <imagedata fileref="images/DataFlowTopology" />
	</imageobject>
	<caption>
	  <para>
	    Example data flow networks.
	  </para>
	</caption>
    </mediaobject>
    <para>
      The first network has two writers and two readers for "MyData".
      It can be formed starting from "A" and adding "B","C"
      and "D" as peers of "A" respectively. Since the network started from
      "A" all peers share the same connection. The same network could have
      been formed starting from "B". The second diagram connects
      "A" to "C" and then "B" to "D". Two connections are now made and if
      the application tries to connect "B" to "C", this will fail since
      the "MyData" Port of "C" already participates in a connection.
    </para>
    <para>
      The third network has one writer and three readers for "MyData2".
      It can now only be formed starting from "D" and adding "A","B" and "C"
      as peers to "D". Combining both network one and three is possible
      by merely invoking all the 'addPeer' methods in the correct order.
    </para>
    </example>
    <para>
      <function>connectPorts</function> tries to create connections in
      both directions. If a task's Port already has a connection, any
      task with compatible, unconnected ports will be added to that
      connection.  For example, if "a_task" and "b_task" exchange a
      Data type "Data_X", and "c_task" reads "Data_X", the
      <function>connectPorts</function> will forward "Data_X" to "c_task"
      as well.
    </para>
    </section>
    <section><title>Disconnecting Tasks</title>
    <para>
      Tasks can be disconnected from a network by invoking
      <function>disconnect()</function> on that task. It will
      inform all its peers that it has left the network and
      disconnect all its ports. This does not mean that
      all data flow connections are deleted. As long as one task's
      port still participates in a connection, the connections
      exist. When the last port disconnects, the data flow connection
      is cleaned up as well.
    </para>
    <example><title>TaskContext Peer Disconnection Example</title>
    <para>(1) shows what would happen if tasks "A" and "B"
    are disconnected from the network. (2) shows what would happen if
    the connection itself is disconnected.
    </para>
    <mediaobject>
	<imageobject>
	  <imagedata fileref="images/DataFlowDisconnect" />
	</imageobject>
	<caption>
	  <para>
	    Disconnecting tasks: one can disconnect a whole task or
	    disconnect only a port or connection of a task.
	  </para>
	</caption>
    </mediaobject>
    <para> When <function>A.disconnect()</function> is called (1),
    it removes its participation from the "MyData" connection.
    The same happens for <function>B.disconnect()</function>.
    "C" and "D" read then from a connection which has no more
    writers. Adding "A" again to the network would make "A"
    again a writer of "MyData". If both "C" and "D" call disconnect
    as well, the "MyData" connection is cleaned up.
      <programlisting>  a_task.disconnect();
  assert( !a_task.hasPeer( &amp;b_task.getName() ) 
          &amp;&amp; !b_task.hasPeer( &amp;a_task.getName() );

  b_task.disconnect();
  assert( !c_task.hasPeer( &amp;b_task.getName() ) 
          &amp;&amp; ! d_task.hasPeer( &amp;b_task.getName() );</programlisting>
    </para>
    <para>
      Data Flow connections can be disconnected (2) as
      well, in which case all ports are disconnected.
      <programlisting>  ConnectionInterface::shared_ptr con = a_task.ports()->getPort("MyData")->connection();
  if (con)
    con->disconnect();

  assert( !a_task.ports()->getPort("MyData").connected() );
  assert( !b_task.ports()->getPort("MyData").connected() );
  assert( !c_task.ports()->getPort("MyData").connected() );
  assert( !d_task.ports()->getPort("MyData").connected() ); </programlisting>
    </para>
    </example>
    </section>
  </section>
  <section>
    <title>Deploying Components</title>
    <para>
      An Orocos component can be used in both embedded (&lt;1MB RAM) or
      big systems (128MB RAM), depending on how it is created or used.
      This is called <emphasis>Component Deployment</emphasis> as the
      target receives one or more component implementations. The components
      must be adapted as such that they fit the target.
    </para>
    <section>
      <title>Overview</title>
      <para>
	<xref linkend="fig-comp-levels" /> shows the
	distinction between the three levels of Component Deployment.
      </para>
      <figure id="fig-comp-levels">
	<title>
	  Component Deployment Levels
	</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/DeploymentLevels" />
	  </imageobject>
	  <imageobject>
	    <imagedata fileref="images/DeploymentLevels" />
	  </imageobject>
	  <caption>
	    <para>
	      Three levels of using or creating Components can be
	      accomplished in Orocos: Not distributed, embedded distributed
	      and fully distributed.
	    </para>
	  </caption>
	</mediaobject>
      </figure>
      <para>
	If your application will not use distributed components and
	requires a very small footprint, the <classname>RTT::TaskCore</classname>
	can be used. The Orocos primitives apear directly in the interface
	and are called upon in a hard-coded way.
      </para>
      <para>
	If you application requires a small footprint and distributed
	components, the <emphasis>C++ Interface</emphasis> of the
	<classname>RTT::TaskContext</classname> can be used in
	combination with a <emphasis>Distribution Library</emphasis>
	which does the network translation. It handles a predefined
	set of data types (mostly the 'C' types) and needs to be
	adapted if other data types need to be supported.
      </para>
      <para>
	If footprint is of no concern to your application and you
	want to distribute any component completely transparantly,
	the <classname>RTT::TaskContext</classname> can be used in combination
        with a <emphasis>Remoting Library</emphasis> which does the
        network translation. A CORBA implementation of such a library is
	being developed on. It is a write-once, use-many implementation,
	which can pick up user defined types, without requiring modifications.
	It uses the <emphasis>Orocos Type System</emphasis> to manage user 
	defined types. 
      </para>
    </section>
    <section>
      <title>Embedded TaskCore Deployment</title>
      <para>
	A TaskCore is nothing more than a place holder for the
	Execution Engine and application code functions
	(<function>startup()</function>, <function>update()</function>
	and <function>shutdown()</function> ). The Component
	interface is built up by placing the Orocos primitives
	as public class members in a TaskCore subclass. Each
	component that wants to use this TaskCore must get a
	'hard coded' pointer to it (or the interface it implements)
	and invoke the command, method etc. Since Orocos is by
	no means informed of the TaskCore's interface, it can not
	distribute a TaskCore.
      </para>
    </section>
    <section>
      <title>Embedded TaskContext Deployment: C++ Interface</title>
      <para>
	Instead of putting the Orocos primitives in the public
	interface of a subclass of TaskCore, one can subclass a
	TaskContext and register the primitives to the
	<emphasis>C++ Interface</emphasis>. This is a reduced
	interface of the TaskContext, which allows distribution
	by the use of a <emphasis>Distribution Library</emphasis>.
      </para>
      <note>
	<para>
	  The code presented is for commands, but can be equally
	  applied for methds by using methods()->addMethod( &amp;
	  method ) for events and for each other Orocos primitive.
	</para>
      </note>
      <para>
	The process goes as such: A component inherits from
	<classname>RTT::TaskContext</classname> and has some
	Orocos primitives as class members. Instead of calling:
      </para>
      <programlisting>  commands()->add<emphasis>Command</emphasis>(&amp;com, "Description", "Arg1","Arg1 Description",...);</programlisting>
      <para>
	and providing a description for the primitive as well as
	each argument, one writes:
      </para>
      <programlisting>  commands()->add<emphasis>Command</emphasis>( &amp;com );</programlisting>
      <para>
	This is no more than a pointer registration, but already allows
	all C++ code to use the added primitive.
      </para>
      <para>
	In order to access the interface of such a Component,
	the user code may use:
      </para>
      <programlisting>  taskA->commands()->get<emphasis>Command</emphasis>("Name");</programlisting>
      <para>
	In order to distribute this component, an implementation of
	the Distribution Library is required. The specification of
	this library, and the application setup is in left to another
	design document.
      </para>
    </section>
    <section>
      <title>Full TaskContext Deployment: Dynamic Interface</title>
      <para>
	In case you are building your components as instructed in this
	manual, your component is ready for distribution as-is, given
	a Remoting library is used. The Orocos CORBA package implements
	such a Remoting library. 
      </para>
    </section>
    <section>
      <title>Putting it together</title>
      <para>
	Using the three levels of deployment in one application is
	possible as well. To save space or execution efficiency,
	one can use TaskCores to implement local (hidden) functionality
	and export publicly visible interface using a Taskcontext.
	<xref linkend="fig-deployment-example" /> is an
	small example of a TaskContext which uses two TaskCores to
	delegate work to. The Execution Engines may run in one or
	multiple threads.
      </para>
      <figure id="fig-deployment-example">
	<title>
	  Example Component Deployment.
	</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/CoreVsContext" />
	  </imageobject>
	  <imageobject>
	    <imagedata fileref="images/CoreVsContext" />
	  </imageobject>
	  <caption>
	    <para>
	    </para>
	  </caption>
	</mediaobject>
      </figure>
    </section>
  </section>
  <section id="run-tasks">
    <title>Using Tasks</title>
    <para>
      This section elaborates on the interface all Task Contexts have
      from a 'Task user' perspective.
    </para>
    <section id="task-property-config">
      <title>Task Property Configuration</title>
      <para>
	As was seen in <xref linkend="task-attr-rep" />,
	<classname>RTT::Property</classname> objects can be
	added to a task's interface. To read and write properties from
	or to files, you can use the
	<classname>RTT::TaskContext</classname>
	class' methods. It creates or reads files in the XML Component
	Property Format such that it is human readable and modifiable.
      </para>
      <programlisting>  // ...
  <classname>RTT::TaskContext</classname>* a_task = ...
  a_task->readProperties( "PropertyFile.cpf" );
  // ...
  a_task->writeProperties( "PropertyFile.cpf" ); </programlisting>
       <para>
	 Where <function>readProperties()</function> reads the file and updates the
	 task's properties and <function>writeProperties()</function> <emphasis>updates</emphasis> the
	 given file with the properties of the task. It is allowed to
	 share a single file with multiple tasks or update the task's
	 properties from multiple files.
       </para>
    </section>
    <section>
      <title>Task Scripts</title>
      <para>
	Orocos supports two types of scripts:
	<itemizedlist>
	  <listitem><para>An Orocos Program Script (ops) contains a <emphasis>Real-Time</emphasis>
	  functional program which calls methods and sends commands to
	  tasks, depending on classical functional logic.</para></listitem>
	  <listitem><para> An Orocos State machine Description (osd)
	  script contains a <emphasis>Real-Time</emphasis> (hierarchical)
	  state machine which dictates which program script snippets
	  are executed upon which event.  </para>	</listitem>
	</itemizedlist>
	Both are loaded at runtime into a task. The scripts are parsed
	to an object tree, which can then be executed by the
	<classname>RTT::ExecutionEngine</classname> of a
	task.
      </para>
      <section id="task-context-programs">
	<title>Program Scripts</title>
	<para>
	  Program can be finely controlled once loaded in
	  the <classname>RTT::ProgramProcessor</classname>,
	  which is part of the Execution Engine.
	  A program can be paused, it's variables inspected
	  and reset while it is loaded in the Processor.
	  A simple program script can look like :</para>
	<para>
	  <programlisting>  program foo
  {
    var int i = 1
    var double j = 2.0
    do changeParameter(i,j)
  }</programlisting>
	  Any number of programs may be listed in a file.
	</para>
	<para>
	  Orocos Programs are loaded as such into a TaskContext
	  :</para>
	<para>
	  <programlisting>  <classname>RTT::TaskContext</classname>* a_task = ...

  a_task->scripting()->loadPrograms( "ProgramBar.ops" ); </programlisting></para>
	<para>
	  When the Program is loaded in the Task Context, it can
	  also be controlled from other scripts or a TaskBrowser. Assuming
	  you have loaded a Program with the name 'foo', the
	  following commands are available :
	</para>
	<screen>
  do programs.foo.start()
  do programs.foo.pause()
  do programs.foo.step()
  do programs.foo.stop()
	</screen>
	<para>While you also can inspect its status :</para>
	<screen>
  programs.foo.isRunning()
  programs.foo.inError()
  programs.foo.isPaused()
	</screen>
	<para>You can also inspect and change the variables of a loaded program,
	but as in any application, this should only be done
	for debugging purposes.</para>
	<screen>
  set programs.foo.i = 3
  var double oldj = programs.foo.j
	</screen>
	<para>
	  Program scripts can also be controlled in C++.
	  Take a look at the
	  <classname>RTT::ProgramInterface</classname> class
	  reference for more program related functions. One can
	  get a pointer to a program by calling:
	</para>
	<programlisting>  ProgramInterface* foo = this->engine()->getProgram("foo");
  if (foo != 0) {
    bool result = foo->start(); // try to start the program !
    if (result == false) {
       // Program could not be started.
       // Execution Engine not running ?
    }
  }</programlisting>
      </section>
      <section>
	<title>State Machines</title>
	<para>
	  Hierarchical state machines are modelled in Orocos
	  with the <classname>RTT::StateMachine</classname> class.
	  They are like programs in that they can call a
	  peer task's members, but the calls are grouped
	  in a state and only executed when the state machine
	  is in that state. A detailed introduction can be found
	  in the &parseman;. This section limits to showing
	  how an Orocos State Description (osd) script can be loaded in a 
	  Generic Task Context.
	</para>
	<para>
	  <programlisting>  <classname>RTT::TaskContext</classname>* a_task = ...

  a_task->scripting()->loadStateMachines( "StateMachineBar.osd" ); </programlisting></para>
	<para>
	  When the State Machine is loaded in the Task Context, it can
	  also be controlled from your scripts or TaskBrowser. Assuming
	  you have instantiated a State Machine with the name 'machine', the
	  following commands are available :
	</para>
	<screen>
  do states.machine.activate()
  do states.machine.start()
  do states.machine.pause()
  do states.machine.step()
  do states.machine.stop()
  do states.machine.deactivate()
  do states.machine.reset()
  do states.machine.reactive()
  do states.machine.automatic() // identical to start()
  do states.machine.requestState("StateName")
	</screen>
	<para>As with programs, you can inspect and change the
	variables of a loaded StateMachine.</para>
	<screen>
  set programs.machine.myParam = ...
	</screen>
	<para>
	  The Scripting Manual goes in great detail on how to 
	  construct and control State Machines.
	</para>
      </section>
      <section>
	<title>Further Reading</title>
	<para>
	  In addition to this text, be sure to read the &parseman;
	  such that you get a grip of the full power of Real-Time
	  Orocos scripts.
	</para>
      </section>
    </section>
  </section>
  <section>
    <title>Advanced Techniques</title>
    <para>
      If you master the above methods of setting up tasks, this section
      gives some advanced uses for integrating your existing application
      framework in Orocos Tasks.
    </para>
    <section>
      <title>Using the <classname>TaskContext</classname></title>
      <para>
	To help users in setting up quickly a TaskContext, the TaskContext
	class has been made available which adds some standard methods and
	commands to its interface which are common to many tasks. It supports
	loading Programs and StateMachines, saving Properties to disk and reading
	them back in and stopping and starting the Task.
	You can download an introduction to setting up TaskContexts which
	uses this class from the Orocos.org download page.
      </para>
    </section>
    <section>
      <title>Wrapping Methods in Functions</title>
      <para>
	Methods are always executed in the thread of the caller. If a 
	method does non-real-time operations, like writing data to disk, 
	it should not be called by a real-time thread. However, if the
	thread which owns the method is itself not real-time, it can execute
	the method as a command in its own thread. This can easily be
	accomplished by writing a wrapper function ( or alternatively, 
	register the method as a command too ).
      </para>
      <programlisting>  export function domethod( int arg ) {
     do mymethod( arg )
  } </programlisting>
      <para>
	Load this function with the <classname>RTT::ProgramLoader</classname>
	in the TaskContext having 'mymethod', and hard real-time tasks
	can instruct it to execute that method, without jeopardizing 
	their own real-time behaviour.
      </para>
    </section>
    <section>
      <title>Waiting for Something : Synchronisation</title>
      <para>
	When tasks need to synchronise, you have a wide range of
	options to use. 
      </para>
      <section>
	<title>Waiting in States</title>
	<para>
	  A (sub-)State Machine can pause itself and an extra function
	  in the task's interface can provide the key to progress to
	  another state. First the StateMachine is loaded in an .osd file  :
	</para>
	<programlisting>
  StateMachine X {
     // ...
     state y {
        entry {
           // pause myself, no transitions are checked.
           do this.pause()
        }
        transitions {
	   // guard this transition.
           if checkSomeCondition() then
              select z
        }
     }
     state z {
       // ...
     }
  }

  RootMachine X x</programlisting>
	<para>Then, load an ops file which contains :</para>
	<programlisting>
  export function progress() {
    // Check if we may progress :
    if this.states.x.inState("y") then {
        // continue :
        do this.states.x.start()
        // OR try single transition :
        do this.states.x.step()
    }
  }</programlisting>
	<para>
	  A peer task then calls <function>progress()</function>
	  which in turn checks if the function is applicable.
	  But even then, the responsibility of the transition
	  lies within the State Machine.
	</para>
	<para>
	  Off course, the example can be simplified by setting/
	  resetting a boolean flag between function and
	  State Machine.
	</para>
	<programlisting>
  StateMachine X {
     // ...
     state y {
        transitions {
           if progressflag == true then
                select z
        }
     }
     state z {
       // ...
     }
  }

  RootMachine X x</programlisting>
	<para>Then, load an ops file which contains :</para>
	<programlisting>
  export function progress() {
    // Check if we may progress :
    if this.states.x.inState("y") then {
          set progressflag = true
    }
  }</programlisting>
	<para>
	  When the user or another program calls the progress() command,
	  the flag will be set.
	</para>
      </section>
      <section>
	<title>Requesting States</title>
	<para>
	  A State Machine can be used such that it waits for state
	  change requests instead of discovering itself to which 
	  state it makes a transition. This requires the State Machine to run in
	  another mode, the requestState mode ( as opposed to the automatic mode,
	  which is entered by start() ). 
	</para>
	<programlisting>
  StateMachine X {
     // ...
     state y {
        entry {
	   // ...
        }
        transitions {
	   // guard this transition.
           if checkSomeCondition() then
              select z
	   // always good to go to states :
	   select ok_1
           select ok_2
        }
     }
     state z {
       // ...
     }
     state ok_1 {
       // ...
     }
     state ok_2 {
       // ...
     }
  }

  RootMachine X x</programlisting>
	<para>Then, load an ops file which contains :</para>
	<programlisting>
  export function progress() {
       // request to enter anther state :
       do this.states.x.requestState("z")
    }
  export function progress_Ok() {
       // this will succeed always from state 'x' :
       do this.states.x.requestState("ok1")
    } </programlisting>
         <para>
	   This command will fail if the transition is not 
	   possible ( for example, the state machine is not in
	   state y, or checkSomeCondition() was not true ),
	   otherwise, the state machine will make the transition
	   and the command succeeds and completes when the z state
	   is fully entered (it's init program completed).
	 </para>
	 <para>
	   To merely request that a state is handled, one can
	   call requestState on the current state :
	 </para>
	<programlisting>
  export function handleState() {
       // request to handle current state :
       do this.states.x.requestState( this.states.x.getState() )
    }  </programlisting>
	 <para>
	   To request to go to the next possible state (or call handle if
	   none) and then wait again for requests, use 'step()' :
	 </para>
	<programlisting>
  export function evaluate() {
       // request go to the next state and wait :
       do this.states.x.step()
    }  </programlisting>
         <para>
	   Note that if the StateMachine happened to be paused, step() would
	   only progress one single statement. To check if the StateMachine
	   is waiting for requests, use the 'inRequest()' method :
	 </para>
	<programlisting>
  export function progress() {
       if ( this.states.x.inRequest() ) {
           // ... it's waiting
       } else {
          // was not waiting, possibly running, paused or non active
       }
    }  </programlisting>
        <para>
	  All these methods can of course also be called from parent
	  to child State Machine, or across tasks.
	</para>
      </section>
    </section>
    <section>
      <title>Polymorphism : Task Interfaces</title>
      <para>
	Most projects have define their own task interfaces in C++.
	Assume you have a class with the following interface :
      </para>
      <programlisting>
  class DeviceInterface
  {
  public:
    /**
     * Set/Get a parameter. Returns false if parameter is read-only.
     */
    virtual bool setParameter(int parnr, double value) = 0;
    virtual double getParameter(int parnr) const = 0;

    /**
     * Get the newest data.
     * Return false on error.
     */
    virtual bool updateData() = 0;
    virtual bool updated() const = 0;

    /**
     * Get Errors if any.
     */
    virtual int getError() const = 0;
  };</programlisting>
      <para>
	Now suppose you want to do make this interface available,
	such that program scripts of other tasks can access this 
	interface. Because you have many devices, you surely want
	all of them to be accessed transparantly from a supervising
	task. Luckily for you, C++ polymorphism can be transparantly
	adopted in Orocos TaskContexts. This is how it goes.
      </para>
      <section>
	<title>Step 1 : Export the interface</title>
	<para>We construct a TaskContext, which exports your
	C++ interface to a task's interface.
	</para>
	<programlisting>
  #include &lt;rtt/TaskContext.hpp&gt;
  #include &lt;rtt/Command.hpp&gt;
  #include &lt;rtt/Method.hpp&gt;
  #include "DeviceInterface.hpp"

  class TaskDeviceInterface
    : public DeviceInterface,
      public <classname>RTT::TaskContext</classname>
  {
  public:
      TaskDeviceInterface()
        : <classname>RTT::TaskContext</classname>( "DeviceInterface" )
      {
         this->setup();
      }

      void setup() 
      {
         // Add Methods :
         this->methods()-&gt;addMethod(method(&quot;setParameter&quot;,
                    &amp;DeviceInterface::setParameter),
	                   &quot;Set a device parameter.&quot;,
	                   &quot;Parameter&quot;, &quot;The number of the parameter.&quot;,
	                   &quot;New Value&quot;, &quot;The new value for the parameter.&quot;); 

         this->methods()-&gt;addMethod(method(&quot;getParameter&quot;,
                     &amp;DeviceInterface::getParameter),
	                  &quot;Get a device parameter.&quot;,
                          &quot;Parameter&quot;, &quot;The number of the parameter.&quot;);
         this->methods()-&gt;addMethod(method(&quot;getError&quot;,
                     &amp;DeviceInterface::getError),
	                 &quot;Get device error status.&quot;);

         // Add Commands :
         this->commands()-&gt;addCommand(method(&quot;updateData&quot;,
                          &amp;DeviceInterface::updateData),
                                 &amp;DeviceInterface::updated,
                                 &quot;Command data acquisition.&quot; );
      }
  };</programlisting>
	<para>
	  The above listing just combines all operations which were introduced
	  in the previous sections. Also note that the TaskContext's name
	  is fixed to "DeviceInterface". This is not obligatory though.
	</para>
      </section>
      <section>
	<title>Step 2 : Inherit from the new interface</title>
	<para>Your DeviceInterface implementations now
	  only need to inherit from <classname>TaskDeviceInterface</classname>
	  to instantiate a Device TaskContext :
	</para>
	<programlisting>
  #include "TaskDeviceInterface.hpp"

  class MyDevice_1 
    : public TaskDeviceInterface
  {
  public:

    bool setParameter(int parnr, double value) {
      // ...
    }
    double getParameter(int parnr) const {      // ...
    }
    // etc.
  };
	</programlisting>
      </section>
      <section>
	<title>Step 3 : Add the task to other tasks</title>
	<para>
	  The new TaskContext can now be added to other tasks.
	  If needed, an alias can be given such that the
	  peer task knows this task under another name.
	  This allows the user to access different incarnations
	  of the same interface from a task.
	</para>
	<programlisting>
	  // now add it to the supervising task :
  MyDevice_1 mydev;
  supervisor.addPeer( &amp;mydev, "device" );
	</programlisting>
	<para>
	  From now on, the "supervisor" task will be able to access
	  "device". If the implementation changes, the same interface
	  can be reused whithout changing the programs in the supervisor.
	</para>
	<para>
	  A big warning needs to be issued though : if you change a
	  peer at runtime (after parsing programs),
	  you need to reload all the programs, functions,
	  state contexts which use that peer so that they reference
	  the new peer and its C++ implementation.
	</para>
      </section>
      <section>
	<title>Step 4 : Use the task's interface</title>
	<para>To make the example complete, here is an example
	script which could run in the supervisor task :
	</para>
	<programlisting>
  program ControlDevice
  {
     const int par1 = 0
     const int par2 = 1
     do device.setParameter(par1, supervisor.par1 )
     do device.setParameter(par2, supervisor.par2 )

     while ( device.getError() == 0 ) 
     {
	if ( this.updateDevice("device") == true )
           do device.updateData() until {
	        if done || ( device.getError() != 0 ) then
	           continue
	   }
     }
     do this.handleError("device", device.getError() )
  }</programlisting>
	<para>To start this program from the TaskBrowser, browse to supervisor
	  and type the command :</para>
	<screen>
  device.programs.ControlDevice.start()
	</screen>
	<para>
	  When  the program "ControlDevice" is started,
	  it initialises some parameters from its own attributes.
	  Next, the program goes into a loop and sends updateData commands
	  to the device as long as underlying supervisor (ie "this") logic requests
	  an update and no error is reported. This code guarantees that
	  no two updateData commands will intervene each other since the
	  program waits for the commands completion or error.
	  When the device returns
	  an error, the supervisor can then handle the error of the
	  device and restart the program if needed.
	</para>
	<para>
	  The advantages of this program over classical C/C++ functions are :
	</para>
	<itemizedlist>
	  <listitem>
	    <para>If any error occurs (ie a command or method returns false),
	    the program stops and other programs or state contexts can
	    detect this and take apropriate action.</para>
	  </listitem>
	  <listitem>
	    <para>The  "<function>device.updateData()</function>" call waits
	    for completion of the remote command, but can be given other
	    completion or error conditions to watch for.</para>
	  </listitem>
	  <listitem>
	    <para>While the program waits for <function>updateData()</function>
	      to complete, it does not block other programs, etc within
	      the same TaskContext and thread.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      There is no need for additional synchronisation primitives
	      between the supervisor and the device since the commands
	      are queued and executed in the thread of the device, which
	      leads to :
	    </para>
	    <itemizedlist>
	      <listitem>
		<para>The command is executed at the priority of the device's
		  thread, and not the supervisor's priority.</para>
	      </listitem>
	      <listitem>
		<para>The command can never corrupt data of the device's thread,
		  since it is <emphasis>serialised</emphasis>(executed after)
		  with the programs running in that thread.
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>
      </section>
    </section>
  </section>
</article>
