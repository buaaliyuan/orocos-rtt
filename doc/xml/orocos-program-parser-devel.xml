<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>

<article>
  <articleinfo>
    <title>
      Inside The Orocos Program Parser Manual
    </title>
    <subtitle><emphasis>Open RObot COntrol Software</emphasis></subtitle>
    <authorgroup>
      <author>
	<firstname>Dominique</firstname>
	<surname>Devriese</surname>
      </author>
      <author>
	<firstname>Peter</firstname>
	<surname>Soetens</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2006</year>
      <holder>Peter Soetens, Herman Bruyninckx</holder>
    </copyright>
    
    <abstract>
      <para>
	This document describes the insides &orocos; Parser system, in the
	different ways it can be used and extended.
      </para>
    </abstract>
    
    <revhistory>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>January 2005</date>
	<authorinitials>PS</authorinitials>
	<revremark>Split off main manual.</revremark>
      </revision> 
   </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section id="intro">
    <title>Introduction</title>
    <para>
      The &orocos; Parser allows users of the &orocos; system to write
      programs and state machines controlling the system in a
      user-friendly realtime script language.  The advantage of scripting is
      that it is easily extendible and does not need recompilation of
      the main program. It is implemented using the Boost.Spirit
      parser library, and should be fairly easy to work with.
    </para>
    <para>
      This document is about extending the &orocos; parser to support extra types,
      overload existing operators, and/or add new operators.
    </para>
  </section>
  <section id="extending-the-parser">
    <title>Extending the parser</title>
    <note>
      <para>
	This Section is only relevant to persons willing to extend
	the internals of the Orocos Parser framework.
      </para>
    </note>
    <section id="parser-limitations">
      <title>Parser Limitations</title>
      <para>
	For various reasons, during the development of the &orocos;
	parser, it has proven necessary to hard-code various things,
	mostly relating to the defined types, and the operations
	supported on them.  The parser supports using different types
	of objects than the predefined ones, but the major limitations
	are:
	<itemizedlist>
	  <listitem>
	    <para>
	      For some types like vectors, rotations and frames,
	      special syntax was added.  Currently, this is limited to
	      the so-called constructors, that allow you to construct
	      e.g. a vector from three doubles.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    <section id="alleviating-parser-limitations">
      <title>Alleviating the Limitations</title>
      <para>
	We will address the ways to address the various limitations.
      </para>
      <section id="adding-syntax">
	<title>Adding special syntax</title>
	<para>
	  This section will explain how to add a custom constructor,
	  or a custom operator, that you will then be able to use in
	  expressions..  The operator can take one to three arguments
	  of any type, and can return any type..
	</para>
	<para>
	  You need to do two things in order to do this: 
	  <itemizedlist>
	    <listitem>
	      <para>make the parser know about the new syntax</para>
	    </listitem>
	    <listitem>
	      <para>tell the parser what the new syntax means</para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  You should make the parser aware of the new syntax in the
	  file rtt/program-parser/src/ExpressionParser.cxx.  There, in
	  the ExpressionParser constructor, the syntax of an
	  expression is defined.  There, you should add the new
	  syntax.  I'm afraid I can't explain you other than either
	  copying from an existing syntax or reading the Boost.spirit
	  documentation.  You need to couple your new syntax with a
	  semantic action like &quot;bind(
	  &amp;ExpressionParser::seen_binary, this, &quot;%&quot; )
	  for a binary action that you want to give the name "%".  The
	  name &quot;%&quot; is just an identifier that should be
	  unique to your new operator, it can be any string you want.
	</para>
	<para>
	  Next, you need to define the operator in Operators.cpp, in
	  much the same way as you should do for <link
	  linkend="overloading-operators">overloading an existing
	  operator</link>.  However, instead of then using an existing string
	  like "+", you should use the string you chose while defining
	  your new syntax above.
	</para>
      </section>
    </section>
  </section>
</article>
