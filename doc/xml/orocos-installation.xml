<?xml version='1.0'?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"/usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd" 
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>


<article>
  <articleinfo>
    <title>
      The OROCOS Real-Time Toolkit Installation Guide 
    </title>
    <subtitle><emphasis>Real-Time Toolkit Version &oversion;</emphasis></subtitle>
    <copyright>
      <year>2002,2003,2004,2005,2006</year>
      <holder>Peter Soetens</holder>
    </copyright>

    <abstract>
      <para>
	This document explains how the
	Real-Time Toolkit of <ulink url="http://www.orocos.org">&orocos;</ulink>,
	the <emphasis>Open RObot COntrol Software</emphasis> project
	must be installed and configured.
      </para>
    </abstract>

    <revhistory>
      <revision>
	<revnumber>0.01</revnumber>
	<date>28 Oct 2003</date>
	<authorinitials>ps</authorinitials>
	<revremark>Initial version</revremark>
      </revision>
      <revision>
	<revnumber>0.02</revnumber>
	<date>21 Jan 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>ecostools updates</revremark>
      </revision>
      <revision>
	<revnumber>0.18.0</revnumber>
	<date>1 Dec 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>easier make system documented, reordered the sections</revremark>
      </revision>
      <revision>
	<revnumber>0.20.0</revnumber>
	<date>28 Feb 2005</date>
	<authorinitials>ps</authorinitials>
	<revremark>added upgrade section</revremark>
      </revision>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>17 Feb 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Simplified configuration section, removed RTLinux, added Xenomai</revremark>
      </revision>
      <revision>
	<revnumber>0.25.0</revnumber>
	<date>17 Aug 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Updated directory structure.</revremark>
      </revision>
      <revision>
	<revnumber>1.0.0</revnumber>
	<date>27 Okt 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Simplified build system.</revremark>
      </revision>
      <revision>
	<revnumber>1.0.0</revnumber>
	<date>27 Okt 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Simplified build system.</revremark>
      </revision>
      <revision>
	<revnumber>1.0.1</revnumber>
	<date>21 Nov 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Updated build/run/doc dependencies.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section>
    <title> Setting up your first &orocos; source tree </title>
    <section id="setup_intro">
      <title>Introduction</title>
      <para>
	This sections explains the supported Orocos targets
	and the Orocos versioning scheme.
      </para>
      <section>
	<title>Supported platforms (targets)</title>
	<para>
	  &orocos; was designed with portability in mind. Currently, we support RTAI/LXRT
	  (<ulink url="http://www.rtai.org">http://www.rtai.org</ulink>), GNU/Linux
	  userspace, Xenomai (<ulink
	    url="http://www.xenomai.org">Xenomai.org</ulink>). So,
	  you can first write your software as a normal program, using the framework
	  for testing and debugging purposes in plain userspace Linux and recompile
	  later to another target.
	</para>
      </section>
      <section>
	<title>The versioning scheme</title>
	<para>
	  &orocos; uses the well-known even/stable uneven/unstable
	  version numbering scheme, just as the Linux kernel and many
	  other projects. A particular version is represented by three
	  numbers separated by dots. An <emphasis>even</emphasis>
	  middle number indicates a <emphasis>stable</emphasis>
	  version. For example :
	  <itemizedlist>
	    <listitem><para>1.1.4 : Release 1, unstable (1), revision
		4.</para></listitem>
	    <listitem><para>1.2.1 : Release 1, stable   (2), revision
		1.</para></listitem>
	  </itemizedlist> This numbering allows to develop and release
	  two kinds of versions, where the unstable version is mainly
	  for testing new features and designs and the stable version
	  is for people wanting to run a reliable system.
	</para>
      </section>
      <section>
	<title>Dependencies on other Libraries</title>
	<para>Before you install Orocos, verify that you have the
	following software installed on your platform : </para>
	<table frame="all">
	  <title>Build Products Locations</title>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Program / Library</entry>
		<entry><emphasis>Minimum</emphasis> Version</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>TCL</entry>
		<entry>8.0</entry>
		<entry><ulink url="http://www.tcl.tk">tcl.tk</ulink></entry>
	      </row>
	      <row>
		<entry>Boost C++ Libraries</entry>
		<entry>0.32.0 (0.33.0 Recommended!)</entry>
		<entry><ulink
		url="http://www.boost.org">Boost.org</ulink> Version
		0.33.0 has a very efficient (time/space) lock-free
		smart pointer implementation which is used by
		Orocos.</entry>
	      </row>
	      <row>
		<entry>GNU gcc / g++ Compilers</entry>
		<entry>3.3.0</entry>
		<entry><ulink url="http://gcc.gnu.org">gcc.gnu.org</ulink>
		Orocos builds with the GCC 4.x series as well.</entry>
	      </row>
	      <row>
		<entry>Xerces C++ Parser</entry>
		<entry>2.1 (Optional)</entry>
		<entry><ulink url="http://xml.apache.org/xerces-c/">Xerces website</ulink>
		Versions 2.1 until 2.6 are known to work. If not found, an internal
		XML parser is used.</entry>
	      </row>
	      <row>
		<entry>CppUnit Library</entry>
		<entry>1.9.6 (Optional)</entry>
		<entry><ulink url="http://cppunit.sourceforge.net/cgi-bin/moin.cgi">CppUnit website.</ulink>
		  Only needed if you want to run the Orocos tests.
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<para>
	  All these packages are provided by most Linux distributions.
	  Take also a look on the Orocos.org download page for
	  the latest information. 
	</para>
      </section>
    </section>
    <section>
      <title>Basic Orocos Installation</title>
      <para>
	Orocos has switched to a less common system for distribution
	and configuration. It is taken from the eCos operating system,
	but, apart from the name, has nothing to do with it when used
	with &orocos;. </para>
      <section>
	<title>Orocos Build and Configuration Tools </title>
	<para>
	  The tool you will need is <command>ecosconfig</command>
	  In Debian, you can use the official Debian version using
	  <screen>  apt-get install ecosconfig</screen>
	  If this does not work for you, Orocos will use
	  the ready-to-use tools in Orocos' tools/bin
	  subdirectory (i386 only). The build system will try to locate the tools
	  in that directory and use them if present.
	</para>
	<para>
	  If the build tools cause problems, consult the <ulink
	    url="http://www.ecoscentric.com/devzone/configtool.shtml"> eCos
	    Configuration Tool Version 2</ulink> webpage for source
	  and binary downloads or consult the <ulink url="http://www.orocos.org/download.php#ecostools">
	    Orocos download page</ulink>.
	</para>
	<note>
	  <para>
	    The optional <command>configtool</command> is a GUI in which users can configure
	    some build options. It uses the libwxgtk2.4 library.
	    The required <command>ecosconfig</command> is a commandline program, used by
	    the make system.
	  </para>
	</note>
      </section>
      <section>
	<title>Quick Installation Instructions</title> 
	<para> 
	  Download the <filename>orocos-rtt-&oversion;-src.tar.bz2</filename> package from the
	  Orocos webpage.
	</para>
	<para>
	  Extract it using :
	  <screen><command>  tar -xvjf orocos-rtt-&oversion;-src.tar.bz2</command></screen>
	  Then proceed as in:
	  <screen><command> 
  mkdir orocos-rtt-&oversion;/build 
  cd orocos-rtt-&oversion;/build
  ../configure --with-&lt;target&gt;
  make
  make check
  make install</command> </screen>
	  Where &lt;target&gt; is one of listed in <command>../configure --help</command>.
	  ( currently 'gnulinux', 'lxrt' or 'xenomai' ). When none is specified,
	  'gnulinux' is used.
	</para>
	<note>
	  <para>
	    The <command>../configure</command> script must be rerun after
	    you installed missing libraries (like Boost, ...).
	  </para>
	</note>
      </section>
<!--       <section> -->
<!-- 	<title>Configuration</title> -->
<!-- 	<para> -->
<!-- 	  Orocos is configured in a two-stage system. First the configure scripts -->
<!-- 	  detect available libraries and take some command-line options to point -->
<!-- 	  it in the right direction. Also, it takes the Operating System you want -->
<!-- 	  to configure for as an argument ( <parameter>-\-with-lxrt</parameter>, -->
<!-- 	  <parameter>-\-with-gnulinux</parameter>, <parameter>-\-with-xenomai</parameter>).  -->
<!-- 	</para> -->
<!-- 	<para> -->
<!-- 	  The second stage is when you issue a <command>make configure_packages</command>, -->
<!-- 	  which will show a GUI where you can further tweak build flags and package -->
<!-- 	  specific options. -->
<!-- 	  This is also the stage where you can add/remove packages for compilation. -->
<!-- 	</para> -->
<!-- 	  <informalfigure> -->
<!-- 	    <mediaobject> -->
<!-- 	      <imageobject> -->
<!-- 		<imagedata fileref="images/ConfigTool" /> -->
<!-- 	      </imageobject> -->
<!-- 	    </mediaobject> -->
<!-- 	  </informalfigure> -->
<!-- 	<para> -->
<!-- 	  When you completed these two stages, you can now <command>make</command>. -->
<!-- 	  For more details, consult <xref linkend="install-configure"/>. -->
<!-- 	</para> -->
<!--       </section> -->
      <section>
	<title>Building The Real-Time Toolkit (RTT)</title>
	<para>
	  The RTT can be compiled in three flavours: 
	  <screen><command> make rtt </command>
<command> make rtt-corba </command>
<command> make rtt-embedded </command></screen> 
          builds the 'standard', 'embedded' or 'corba' version. The embedded version
	  is standard without scripting, the corba version is standard with Corba interfaces.
	</para>
      </section>
      <section>
	<title>Build results</title>
	<para>
	  The <command>make</command> command will have made a directory
	  <filename>packages</filename> where the
	  building takes place. The results of the build are in the
	  <filename>packages/install</filename>
	  directory. You will find the header files and a library called
	  <filename>liborocos-rtt.a</filename>. These files
	  allow you to build applications with &orocos;.
	</para>
	<para>
	  The <command>make docs</command> and
	  <command>make doxy-dist</command> (both in 'build') commands build 
	  manuals and API documentation in the build/doc directory.
	</para>
      </section>
      <section>
	<title>Using &orocos; concurrently for multiple targets</title>
	<para>
	  When you want to build for another target,
	  create a new build-&lt;target&gt; directory and simply re-invoke ../configure --with-&lt;target&gt;
	  from that build directory.
	</para>
	<para>
	  If this step fails, it means that you have not everything installed
	  which is needed for a basic &orocos; build. Most users don't have the
	  Boost library (<filename>libboost-dev</filename> or
	  <filename>libboost-devel</filename>) installed.  Please install this
	  package from the binary or source package repository of your Linux
	  distribution, or download and install it from the <ulink
	    url="http://www.boost.org">Boost project.</ulink> As soon as the
	  configure step succeeds, all the rest will succeed too. Please use the
	  mailinglist at <email>orocos-dev@lists.mech.kuleuven.be</email> for
	  support questions.
	</para>
      </section>
    </section>
    <section>
      <title>Installing an Orocos Build</title>
      <para>
	Orocos can optionally ( <emphasis> but recommended</emphasis> ) be installed on your system with <screen>
  make install</screen>
	The
	default directory is <filename>/usr/local/orocos</filename>, but 
	can be changed with the <option>--with-prefix</option> option :
	<screen>  ../configure --with-prefix=/opt/other/</screen></para>
      <para>
	If you choose not to install Orocos, you can find the build's result
	in the <filename>build/packages/install/[lib/include]</filename> directory.
      </para>
    </section>
  </section>
  <section id="install-configure">
    <title>Configuration Details</title>
    <section>
      <title>Configuring Orocos</title>
      <para>
	In your build directory, run <command>../configure</command> or <command>../configure
	--with-gnulinux</command> to select the os/gnulinux target.
	Alternative targets are:
	<itemizedlist>
	  <listitem><para><option>--with-lxrt[=/usr/realtime] --with-linux[=/patched/linux/tree]</option></para></listitem>
	  <listitem><para><option>--with-xenomai[=/usr/realtime]  --with-linux[=/patched/linux/tree]</option></para></listitem>
	</itemizedlist>
	The latter targets require the presence of the
	<option>--with-linux=/path/to/linux</option> option since
	these targets require Linux headers during the Orocos build.
	To use the LibC Kernel headers in
	<filename>/usr/include/linux</filename>, specify
	<option>--with-linux=/usr</option>.  Watch carefully the
	output to find any errors.
      </para>
    </section>
    <section id="install-flags">
      <title>General Build Compiler Flags</title>
      <para>
	You must set the compiler flags during the 'configure' step.
	For example:
	<screen><command>../configure CXXFLAGS="-g -O0" CFLAGS="-g -O0" --with-gnulinux</command></screen>
	if you want to enable debugging or change the optimisation flags.
      </para>
    </section>
    <section id="general_setup_rtai">
      <title >Building for RTAI / LXRT</title>
      <para>
	Read first the 'Getting Started' section from <ulink
	  url="http://people.mech.kuleuven.be/~psoetens/portingtolxrt.html">this 
	  page</ulink> if you are not familiar with RTAI installation
      </para>
      <para>
	Orocos has been tested with RTAI 3.0, 3.1, 3.2 and 3.3.
	You can obtain it from 
	<ulink url="http://www.aero.polimi.it/projects/rtai/">
	  the RTAI home page</ulink>.
	Read The README.* files in the
	<filename class="directory">rtai</filename> directory for detailed
	instructions.  First, you need to patch your Linux kernel with the RTAI patch. A patch per
	kernel version can be found in the <filename>rtai-core/arch/i386/patches</filename> directory. You should
	apply
	the <filename>hal12-X.Y.Z.patch</filename> (or later) for RTAI  to a clean
	<filename>Linux-X.Y.Z</filename> kernel.  We refer to the RTAI installation instructions for more
	details.
      </para>
      <para>
	Next do <command>make menuconfig</command>
      </para>
      <section>
	<title> RTAI settings </title>
	<para>
	  RTAI comes with documentation for configuration and
	  installation.  In the configuration process, make sure that
	  you enable the following options (<emphasis>in addition to
	  options you feel you need for your application</emphasis>) :
	  <itemizedlist>
	    <listitem>
	      <para>General -&gt; 'Enable extended configuration mode'</para>
	    </listitem>
	    <listitem>
	      <para>Core System -&gt; Native RTAI schedulers &gt;
	      Scheduler options -&gt; 'Number of LXRT slots' ('500') </para>
	    </listitem>
	    <listitem>
	      <para>Machine -&gt; 'Enable FPU support'</para>
	    </listitem>
	    <listitem>
	      <para>Core System -&gt; Native RTAI schedulers &gt;
	      IPC support -&gt; Semaphores, Fifos, Bits (or Events) and Mailboxes</para>
	    </listitem>
	    <listitem>
	      <para>Add-ons -&gt; 'Comedi Support over LXRT' (if you intend to use the
	      Orocos Comedi Drivers)</para>
	    </listitem>
	    <listitem>
	      <para>Core System -&gt; Native RTAI schedulers &gt;
	      'LXRT scheduler (kernel and user-space tasks)'</para>
	    </listitem>
	  </itemizedlist>
	  After configuring you must run 'make' and 'make install' in your RTAI directory:
	  <command>make ; make install</command>
	</para>
	<para>
	  After installation, RTAI can be found in <filename>/usr/realtime</filename>. You'll have to 
	  specify during the Orocos configure step the alternative if you chose so.
	</para>
      </section>
      <section>
	<title> Loading RTAI with LXRT</title>
	<para>
	  LXRT is a all-in-one scheduler that works for kernel and userspace.
	  So if you use this, you can still run kernel programs but have the ability
	  to run realtime programs in userspace. Orocos provides you the libraries
	  to build these programs.
	  Make sure that the following RTAI kernel modules are loaded
	  <itemizedlist>
	    <listitem><para>rtai_sem</para></listitem>
	    <listitem><para>rtai_lxrt</para></listitem>
	    <listitem><para>rtai_hal</para></listitem>
	    <listitem><para>adeos (depends on RTAI version)</para></listitem>
	  </itemizedlist>
	  For example, by executing as root:
	  <command>modprobe rtai_lxrt; modprobe rtai_sem</command>.
	</para>
	<para>For a more detailed description of what LXRT really is,
	  you can read the LXRT HOWTO 
	  <ulink url="http://people.mech.kuleuven.be/~psoetens/lxrt/portingtolxrt.html">here</ulink>
	</para>
      </section>
      <section>
	<title>Configuring Orocos for LXRT</title>
	<para>
	  In your build directory, run:
	  <command>../configure --with-lxrt[=/usr/realtime] --with-linux[=/patched/linux/tree]</command>
	  The LXRT target requires the presence of the
	  <option>--with-linux=/path/to/linux</option> option since
	  these targets require Linux headers during the Orocos build.
	  To use the LibC Kernel headers in
	  <filename>/usr/include/linux</filename>, specify
	  <option>--with-linux=/usr</option>.
	</para>
      </section>
      <section>
	<title>Compiling Applications with LXRT</title>
	<para>
	  Application which use LXRT as a target need special flags when being
	  compiled and linked. Especially :
	  <itemizedlist>
	    <listitem>
	      <para>
		Compiling : <option>-I/usr/realtime/include</option>
	      </para>
	      <para>
		This is the RTAI headers installation directory.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linking : <option>-L/usr/realtime/lib -llxrt</option> for dynamic (.so) linking OR add
		<option> /usr/realtime/liblxrt.a </option> for static (.a) linking.
	      </para>
	      <important>
		<para>
		  You might also need to add
		  <filename>/usr/realtime/lib</filename> to the
		  <filename>/etc/ld.so.conf</filename> file and rerun
		  <command>ldconfig</command>, such that liblxrt.so
		  can be found.  This option is not needed if you
		  configured RTAI with LXRT-static-inlining.
		</para>
	      </important>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
    <section id="general_setup_xeno">
      <title >Building for Xenomai</title>
      <para>
	Xenomai provides a real-time scheduler for Linux applications.
	It is similar to, and once developed with, RTAI/LXRT, but the
	project is now independent of RTAI. See
	<ulink url="http://www.xenomai.org">
	  the Xenomai home page</ulink>. Xenomai requires a patch one needs to apply upon
	  the Linux kernel. See the Xenomai installation manual. When
	  applied, one needs to enable the <option>ADEOS</option> or
	  <option>IPIPE</option> option during Linux kernel
	  configuration.
      </para>
      <para>
	When the Linux kernel is built, do in the Xenomai directory:
	<command>make menuconfig; make; make install</command>. Consult the
	README files in the top Xenomai directory for further help
	with installation.
      </para>
      <section>
	<title>Xenomai settings</title>
	<para>
	  The default settings for Xenomai are fine for Orocos.  The
	  only option that requires to be set is the location of the
	  patched Linux kernel.  After configuring you can run 'make'
	  and 'make install' in your Xenomai directory.
	</para>
	<para>
	  After installation, Xenomai can be found in
	  <filename>/usr/realtime</filename> or
	  <filename>/usr/xenomai</filename>. Orocos looks in the first
	  directory for Xenomai. You'll have to specify
	  during the Orocos configure step the alternative if you
	  chose so.
	</para>
      </section>
      <section>
	<title>Loading Xenomai</title>
	<para>
	  Orocos uses the native Xenomai API to address the real-time scheduler.
	  The Xenomai kernel modules can be found in <filename>/usr/realtime/modules</filename>.
	  Thus only the following kernel modules need to be loaded:
	  <itemizedlist>
	    <listitem><para>xeno_hal.ko</para></listitem>
	    <listitem><para>xeno_nucleus.ko</para></listitem>
	    <listitem><para>xeno_native.ko</para></listitem>
	  </itemizedlist> in that order.
	  For example, by executing as root:
	  <command>insmod xeno_hal.ko; insmod xeno_nucleus.ko; insmod xeno_native.ko</command>.
	</para>
      </section>
      <section>
	<title>Configuring Orocos for Xenomai</title>
	<para>
	  In your build directory, run:
	  <command>../configure --with-xenomai[=/usr/realtime] --with-linux[=/patched/linux/tree]</command>
	  The Xenomai target requires the presence of the
	  <option>--with-linux=/path/to/linux</option> option since
	  these targets require Linux headers during the Orocos build.
	  To use the LibC Kernel headers in
	  <filename>/usr/include/linux</filename>, specify
	  <option>--with-linux=/usr</option>.
	</para>
      </section>
      <section>
	<title>Compiling Applications with Xenomai</title>
	<para>
	  Application which use Xenomai as a target need special flags when being
	  compiled and linked. Especially :
	  <itemizedlist>
	    <listitem>
	      <para>
		Compiling : <option>-I/usr/realtime/include</option>
	      </para>
	      <para>
		This is the Xenomai headers installation directory.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linking : <option>-L/usr/realtime/lib
		-lnative</option> for dynamic (.so) linking OR add
		<option> /usr/realtime/libnative.a </option> for
		static (.a) linking.
	      </para>
	      <important>
		<para>
		  You might also need to add
		  <filename>/usr/realtime/lib</filename> to the
		  <filename>/etc/ld.so.conf</filename> file and rerun
		  <command>ldconfig</command>, such that libnative.so
		  can be found.
		</para>
	      </important>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
    <section id="install-config-corba">
      <title>Configuring for CORBA</title>
      <para>
	Orocos is recommended to be used with 'The Ace Orb' or 
	<emphasis>TAO</emphasis> version prepared by 
	OCI (Object Computing Inc.). You can find the 
	latest TAO version on 
	<ulink url="http://www.theaceorb.com">OCI's TAO
	website</ulink>. Orocos was tested with OCI's TAO 1.3 and 1.4.
	The OCI version is more stable than the versions
	provided by the DOC group on the <ulink url="http://www.cs.wustl.edu/~schmidt/TAO.html">
	Real-time CORBA with TAO (The ACE ORB) website</ulink>.
      </para>
      <note>
	<para>
	  Orocos requires the ACE, TAO and TAO-orbsvcs libraries and
	  header files to be installed on your workstation and
	  <emphasis>that the ACE_ROOT and TAO_ROOT variables are set.</emphasis>
	</para>
      </note>
      <section>
	<title>TAO installation (Optional)</title>
	<note>
	  <para>
	    If your distribution does not provide the TAO libraries,
	    or you want to use the OCI version, you need to build
	    manually. These instructions are for building on
	    Linux. See the ACE and TAO installation manuals for
	    building on your platform.
	  </para>
	</note>
	<para>
	  You need to make an ACE/TAO build on your workstation.
	  Download the package here: <ulink
	  url="http://www.theaceorb.com/downloads/1.4a/index.html">OCI
	  Download</ulink>. Unpack the tar-ball, and enter 
	  <filename>ACE_wrappers</filename>. Then do:
	  <command>  export ACE_ROOT=$(pwd)
  export TAO_ROOT=$(pwd)/TAO
	  </command> When using GNU/Linux, continue with: 
	  <command>  ln -s ace/config-linux.h ace/config.h
  ln -s include/makeinclude/platform_linux.GNU include/makeinclude/platform_macros.GNU
	  </command> Finally, type:
	  <command>  make
  cd TAO
  make
  cd orbsvcs
  make
	  </command> This finishes your TAO build.
	</para>
      </section>
      <section>
	<title>Configuring Orocos for TAO</title>
	<para>
	  Orocos will first try to detect your location of ACE and TAO
	  using the ACE_ROOT and TAO_ROOT variables.
	  Alternatively, you may add a configure flag to tell
	  Orocos where to find the <filename>ACE_wrappers</filename>
	  directory: <screen>../configure --with-ace=/path/to/ACE_wrappers
	  --with-tao=/path/to/ACE_wrappers/TAO</screen> Orocos then assumes
	  that the ACE headers are then found in
	  <filename>/path/to/ACE_wrappers/ace</filename>, the TAO
	  headers are found in
	  <filename>/path/to/ACE_wrappers/TAO/tao</filename>, the
	  libraries are found in
	  <filename>/path/to/ACE_wrappers/lib</filename> and the IDL
	  compiler in <filename>/path/to/ACE_wrappers/bin</filename>.
	  These are all the correct values when using the downloaded
	  packages.
	</para>
	<para>
	  If none  of the above is done, Orocos tries to find ACE
	  and TAO in the standard include and bin paths.
	</para>
      </section>
      <section>
	<title>IDL File Compilation</title>
	<para>
	  When Orocos detects the presence of TAO, it immediately
	  generates the client and server files for all the Orocos IDL
	  files during the configure step. Thus in order to
	  re-generate these files, the configure script needs to be
	  called again. When you do not make use of Orocos' Corba
	  functionality, these files are not compiled nor used in any
	  way by the Orocos build.
	</para>
      </section>
      <section>
	<title>Application Development with TAO</title>
	<para>
	  Once you compile and link your application with Orocos and with the
	  Corba functionality enabled, you must provide the correct include
	  and link flags in your own Makefile if TAO and ACE are not
	  installed in the default path. Then you must add:
	  <itemizedlist>
	    <listitem>
	      <para>
		Compiling : <option>-I/path/to/ACE_wrappers -I/path/to/ACE_wrappers/TAO</option>
	      </para>
	      <para>
		This is the ACE build directory in case you use OCI's
		TAO packages. This option is not needed if you used
		your distribution's TAO installation, in that case,
		TAO is in the standard include path.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linking : <option>-L/path/to/ACE_wrappers/lib -lTAO -lACE -lTAO_IDL_BE -lTAO_PortableServer -lTAO_CosNaming</option>
	      </para>
	      <para>
		This is again the ACE build directory in case you use OCI's
		TAO packages. The <emphasis>first</emphasis> option is not needed if you used
		your distribution's TAO installation, in that case,
		TAO is in the standard library path.
	      </para>
	      <important>
		<para>
		  You also need to add
		  <filename>/path/to/ACE_wrappers/lib</filename> to the
		  <filename>/etc/ld.so.conf</filename> file and rerun
		  <command>ldconfig</command>, such that these libraries
		  can be found.  Or you can before you start your application
		  type <screen>export LD_LIBRARY_PATH=/path/to/ACE_wrappers/lib</screen>.
		</para>
	      </important>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
  </section>

  <section id="started">
    <title>Getting Started with the Code</title>
    <para>
      This Section provides a short overview of how to proceed next using the
      &orocos; Real-Time Toolkit.
    </para>
    <section>
      <title>A quick test</title>
      <para>
	You can issue a <command>make check</command> in the Orocos
	build directory, but this stresses your system heavily, so it might crash
	not fully stable RTAI installations. make check for the gnulinux
	target should successfully complete.
      </para>
      <para>
	To quickly test an &orocos; application, you can download the examples
	from the webpage.
      </para>
    </section>
    <section>
      <title>What about main() ?</title>
      <para>
	The first question asked by many users is : How do I write a
	test program to see how it works? 
      </para>
      <para>
	  Building a sample application with &orocos; is quite simple,
	  but some care must be taken in initialising the realtime
	  environment. First of all, you need to provide a function
	  <function>int ORO_main(int argc, char** argv)
	    {...}</function>, defined in &lt;rtt/os/main.h&gt; which contains your program :
	    <programlisting>  #include &lt;rtt/os/main.h&gt;
	      
  int ORO_main(int argc, char** argv)
  {
     // Your code, do not use 'exit()', use 'return' to 
     // allow Orocos to cleanup system resources.
  } </programlisting>
          If you link
	  with the liborocos-rtt.a library, this function will
	  be called after the run-time environment is set up. To put in
	  other words, the Orocos library already contains a
	  main() function which will call the user-defined ORO_main()
	  function.
	</para>
	<example>
	  <title>A Makefile for an Orocos Application</title>
	  <para>
	    You can then simply compile your program with a Makefile
	    resembling this one : 
	    <programlisting>  OROPATH=/usr/local/orocos
  CXXFLAGS=`PKG_CONFIG_PATH=${OROPATH}/lib/pkgconfig pkg-config orocos-rtt --cflags`
  LDFLAGS=`PKG_CONFIG_PATH=${OROPATH}/lib/pkgconfig pkg-config orocos-rtt --libs`

  all: myprogram.cpp
        g++ myprogram.cpp ${CXXFLAGS} ${LDFLAGS} -o myprogram  </programlisting>
	    The flags must be extended with compile and link options
	    for your particular configuration.
	  </para>
	<para>
	  <important>
	    <para>The <option>LDFLAGS</option> option must be placed after
	    the <filename>.cpp</filename> or <filename>.o</filename>
	    files in the gcc command.</para>
	  </important>
	  <note>
	    <para>Make sure you have read <xref linkend="install-configure" />
	      for your target if you application has compilation or link errors
	      ( for example when using LXRT ).
	    </para>
	  </note>
	</para>
	</example>
      </section>
    <section>
      <title>Header Files Overview</title>
      <para>
	<table>
	  <title>Header Files</title>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry>Header</entry>
		<entry>Summary</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>rtt/*.hpp</entry>
		<entry>The `Real-Time Toolkit' directory contains all the
		headers an Orocos user requires for building components.
		</entry>
	      </row>
	      <row>
		<entry>rtt/os/*.h, rtt/os/*.hpp</entry>
		<entry>Not intended for normal users. The os headers describe a limited set of
		  OS primitives, like locking a mutex or creating
		  a thread. Read the OS manual carefully before
		  using these headers, they are mostly used internally
		  in the corelib's implementation.
		</entry>
	      </row>
	      <row>
		<entry>rtt/dev/*.h[pp]</entry>
		<entry>C++ Headers of device interfaces
		</entry>
	      </row>
	      <row>
		<entry>rtt/corba/*.hpp</entry>
		<entry>C++ Headers for Corba support.
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
    </section>
  </section>
  <section>
    <title>Expert configuration and embedded systems.</title>
    <para>
      For embedded systems, the <command>make rtt-embedded</command>
      target should be built. This removes the scripting files from the build.
    </para>
    <para>
      It is possible to shrink even more code size by using the
      <command>make configure_packages</command> command and disable
      exceptions and enable 'embedded operating system'. Next proceed
      with <command>make build</command> to build the adapted configuration.
    </para>
    <warning>
      <para>
	Invoking <command>make rtt-embedded</command> removes any
	configuration changes you have made. Use <command>make
	build</command> ( or <command>make cross</command> ) to build
	a custom configured configuration. Use <command>make new_packages</command>
	to start with a clean configuration.
      </para>
    </warning>
    <para>
      See the Developer's manual for using the configtool program which
      allows to select what gets built and which allows to tune build
      parameters for embedded systems.
    </para>
  </section>
  <section id="cross-compile">
    <title>Cross Compiling Orocos</title>
    <para>
      This section lists some points of attention when
      cross-compiling Orocos.
    </para>
    <section>
      <title>Compilation</title>
      <para>
	The 'autoconf' system Orocos is using is not very
	suitable for out of the box cross compilation. It is
	hence advised to:
      </para>
      <itemizedlist>
	<listitem><para>Run plain "configure", as if you were building
	for the host.</para></listitem>
	<listitem><para>Start the configtool with "make configure_packages"</para></listitem>
	<listitem><para>Use the configtool's "Global Build Options" to set your compiler and include paths.</para></listitem>
	<listitem><para>Compile Orocos with "make cross"</para></listitem>
      </itemizedlist>
    </section>
  </section>
</article>
