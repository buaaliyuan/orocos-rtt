<?xml version='1.0'?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"/usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd" 
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>


<article>
  <articleinfo>
    <title>
      The OROCOS Real-Time Toolkit Installation Guide 
    </title>
    <subtitle><emphasis>Real-Time Toolkit Version &oversion;</emphasis></subtitle>
    <copyright>
      <year>2002,2003,2004,2005,2006,2007</year>
      <holder>Peter Soetens</holder>
      <holder>FMTC</holder>
    </copyright>

    <abstract>
      <para>
	This document explains how the
	Real-Time Toolkit of <ulink url="http://www.orocos.org">&orocos;</ulink>,
	the <emphasis>Open RObot COntrol Software</emphasis> project
	must be installed and configured.
      </para>
    </abstract>

    <revhistory>
      <revision>
	<revnumber>0.01</revnumber>
	<date>28 Oct 2003</date>
	<authorinitials>ps</authorinitials>
	<revremark>Initial version</revremark>
      </revision>
      <revision>
	<revnumber>0.02</revnumber>
	<date>21 Jan 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>ecostools updates</revremark>
      </revision>
      <revision>
	<revnumber>0.18.0</revnumber>
	<date>1 Dec 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>easier make system documented, reordered the sections</revremark>
      </revision>
      <revision>
	<revnumber>0.20.0</revnumber>
	<date>28 Feb 2005</date>
	<authorinitials>ps</authorinitials>
	<revremark>added upgrade section</revremark>
      </revision>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>17 Feb 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Simplified configuration section, removed RTLinux, added Xenomai</revremark>
      </revision>
      <revision>
	<revnumber>0.25.0</revnumber>
	<date>17 Aug 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Updated directory structure.</revremark>
      </revision>
      <revision>
	<revnumber>1.0.0</revnumber>
	<date>27 Okt 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Simplified build system.</revremark>
      </revision>
      <revision>
	<revnumber>1.0.0</revnumber>
	<date>27 Okt 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Simplified build system.</revremark>
      </revision>
      <revision>
	<revnumber>1.0.1</revnumber>
	<date>21 Nov 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Updated build/run/doc dependencies.</revremark>
      </revision>
      <revision>
	<revnumber>1.1.0</revnumber>
	<date>13 Apr 2007</date>
	<authorinitials>ps</authorinitials>
	<revremark>Rewritten for Orocos 1.2.0.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section>
    <title> Setting up your first &orocos; source tree </title>
    <section id="setup_intro">
      <title>Introduction</title>
      <para>
	This sections explains the supported Orocos targets
	and the Orocos versioning scheme.
      </para>
      <section>
	<title>Supported platforms (targets)</title>
	<para>
	  &orocos; was designed with portability in mind. Currently, we support RTAI/LXRT
	  (<ulink url="http://www.rtai.org">http://www.rtai.org</ulink>), GNU/Linux
	  userspace, Xenomai (<ulink
	    url="http://www.xenomai.org">Xenomai.org</ulink>). So,
	  you can first write your software as a normal Linux program, using the framework
	  for testing and debugging purposes in plain userspace Linux and recompile
	  later to another real-time target.
	</para>
      </section>
      <section>
	<title>The versioning scheme</title>
	<para>
	  &orocos; uses the even/stable uneven/unstable
	  version numbering scheme, just as the Linux kernel.
	  A particular version is represented by three
	  numbers separated by dots. An <emphasis>even</emphasis>
	  middle number indicates a <emphasis>stable</emphasis>
	  version. For example :
	  <itemizedlist>
	    <listitem><para>1.1.4 : Release 1, unstable (1), revision
		4.</para></listitem>
	    <listitem><para>1.2.1 : Release 1, stable   (2), revision
		1.</para></listitem>
	  </itemizedlist> This numbering allows to develop and release
	  two kinds of versions, where the unstable version is mainly
	  for testing new features and designs and the stable version
	  is for users wanting to run a reliable system.
	</para>
      </section>
      <section>
	<title>Dependencies on other Libraries</title>
	<para>Before you install Orocos, verify that you have the
	following software installed on your platform : </para>
	<table frame="all">
	  <title>Build Requirements</title>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Program / Library</entry>
		<entry><emphasis>Minimum</emphasis> Version</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Boost C++ Libraries</entry>
		<entry>0.32.0 (0.33.0 Recommended!)</entry>
		<entry><ulink
		url="http://www.boost.org">Boost.org</ulink> Version
		0.33.0 has a very efficient (time/space) lock-free
		smart pointer implementation which is used by
		Orocos.</entry>
	      </row>
	      <row>
		<entry>GNU gcc / g++ Compilers</entry>
		<entry>3.3.0</entry>
		<entry><ulink url="http://gcc.gnu.org">gcc.gnu.org</ulink>
		Orocos builds with the GCC 4.x series as well.</entry>
	      </row>
	      <row>
		<entry>Xerces C++ Parser</entry>
		<entry>2.1 (Optional)</entry>
		<entry><ulink url="http://xml.apache.org/xerces-c/">Xerces website</ulink>
		Versions 2.1 until 2.6 are known to work. If not found, an internal
		XML parser is used.</entry>
	      </row>
	      <row>
		<entry>CppUnit Library</entry>
		<entry>1.9.6 (Optional)</entry>
		<entry><ulink url="http://cppunit.sourceforge.net/cgi-bin/moin.cgi">CppUnit website.</ulink>
		  Only needed if you want to run the Orocos tests.
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<para>
	  All these packages are provided by most Linux distributions.
	  Take also a look on the Orocos.org download page for
	  the latest information. 
	</para>
      </section>
    </section>
    <section>
      <title>Basic Real-Time Toolkit Installation</title>
      <para>
	The RTT uses the <ulink url="http://www.cmake.org">CMake</ulink>
	build system for configuring and building the library.
      </para>
      <section>
	<title>Orocos Build and Configuration Tools </title>
	<para>
	  The tool you will need is <command>cmake</command>
	  In Debian, you can use the official Debian version using
	  <screen>  apt-get install cmake</screen>
	  If this does not work for you, you can download cmake from
	  the CMake homepage.
	</para>
      </section>
      <section>
	<title>Quick Installation Instructions</title> 
	<para> 
	  Download the <filename>orocos-rtt-&oversion;-src.tar.bz2</filename> package from the
	  Orocos webpage.
	</para>
	<para>
	  Extract it using :
	  <screen><command>  tar -xvjf orocos-rtt-&oversion;-src.tar.bz2</command></screen>
	  Then proceed as in:
	  <screen><command> 
  mkdir orocos-rtt-&oversion;/build 
  cd orocos-rtt-&oversion;/build
  ../configure --with-&lt;target&gt; [--prefix=/usr/local]
  make
  make check
  make install</command> </screen>
	  Where &lt;target&gt; is one of listed in <command>../configure --help</command>.
	  ( currently 'gnulinux', 'lxrt' or 'xenomai' ). When none is specified,
	  'gnulinux' is used.
	</para>
	<note>
	  <para>
	    The <command>configure</command> script is a wrapper
	    around the 'cmake' command and must be rerun after you
	    installed missing libraries (like Boost, ...) before you
	    can build the RTT.
	  </para>
	</note>
      </section>
      <section>
	<title>Real-Time Toolkit Flavours</title>
	<para>
	  The RTT can be compiled in three flavours: the 'standard',
	  'embedded' or 'CORBA' version. The embedded version is
	  standard without scripting, the CORBA version is standard
	  with CORBA interfaces. In order to select your flavour, you
	  need to invoke the <command>ccmake</command> command:
	</para>
	  <screen><command> 
  cd orocos-rtt-&oversion;/build
  cmake ..</command> </screen>
        <para>
	  from your build directory. It will offer a configuration
	  screen.  The keys to use are 'arrows'/'enter' to modify a
	  setting, 'c' to run a configuration check (may be required
	  multiple times), 'g' to generate the makefiles. If an
	  additional configuration check is required, the 'g' key can
	  not be used and you must press again 'c' and examine the output.
	</para>
	<section>
	  <title>RTT with CORBA flavour</title>
	  <para>
	    In order to enable CORBA a valid installation of TAO must be
	    detected on your system and you must turn the <option>ENABLE_CORBA</option>
	    option on (using ccmake).
	    Enabling CORBA almost doubles the size of the RTT library and
	    slows down link and compile times.
	  </para>
	</section>
	<section>
	  <title>Embedded RTT flavour</title>
	  <para>
	    In order to run Orocos applications on embedded systems,
	    one can turn the <option>OS_EMBEDDED</option> option on.
	    Next press 'c' again and additional options will be
	    presented which allow you to select what part of the RTT
	    is used.  By default, the <option>OS_EMBEDDED</option>
	    option already disables some 'fat' features. One can also
	    choose to build the RTT as a static library
	    (<option>BUILD_STATIC</option>).
	  </para>
	</section>
      </section>
      <section>
	<title>Build results</title>
	<para>
	  The <command>make</command> command will have created a
	  <filename>liborocos-rtt.so</filename> library, and if
	  CORBA is enabled a <filename>liborocos-rtt-corba.so</filename>
	  library.
	</para>
	<para>
	  The <command>make docapi</command> and
	  <command>make docpdf dochtml</command> (both in 'build') commands build 
	  API documentation and PDF/HTML documentation in the build/doc directory.
	</para>
      </section>
      <section>
	<title>Building &orocos; for multiple targets</title>
	<para>
	  When you want to build for another target,
	  create a new build-&lt;target&gt; directory and simply re-invoke ../configure --with-&lt;target&gt;
	  from that build directory.
	</para>
	<para>
	  If this step fails, it means that you have not everything installed
	  which is needed for a basic &orocos; build. Most users don't have the
	  Boost library (<filename>libboost-dev</filename> or
	  <filename>libboost-devel</filename>) installed.  Install this
	  package from the binary or source package repository of your Linux
	  distribution, or download and install it from the <ulink
	    url="http://www.boost.org">Boost project.</ulink> As soon as the
	  configure step succeeds, all the rest will succeed too. Use the
	  mailinglist at <email>orocos-dev@lists.mech.kuleuven.be</email> for
	  support questions.
	</para>
      </section>
    </section>
    <section>
      <title>Installing an Orocos Build</title>
      <para>
	Orocos can optionally (<emphasis> but recommended</emphasis>)
	be installed on your system with <screen> make install</screen> 
	The default directory is
	<filename>/usr/local</filename>, but can be changed
	with the <option>--with-prefix</option> option : <screen>
	../configure --with-prefix=/opt/other/</screen></para>
      <para>
	If you choose not to install Orocos, you can find the build's result
	in the <filename>build/rtt</filename> directory.
      </para>
    </section>
  </section>
  <section id="install-configure">
    <title>Detailed Configuration using 'CMake'</title>
      <para>
	In order to start cmake configuration, in your build
	directory, run <command>ccmake ..</command> .  Press 'c' (from
	'c'onfigure), watch the output, press 'e' (from 'e'xit) and
	modify the new options. Repeat these steps until no errors
	are reported and the 'g' (from 'g'enerate) key can be pressed.
	This causes the makefiles to be generated which allow the 
	library to be built.
      </para>
    <section>
      <title>Configuring the target Operating System</title>
      <para>
	Move to the <option>OROCOS_TARGET</option>, press enter and type 
	on of the following supported targets (all in lowercase):
	<itemizedlist>
	  <listitem><para>gnulinux</para></listitem>
	  <listitem><para>xenomai</para></listitem>
	  <listitem><para>lxrt</para></listitem>
	</itemizedlist>
	The xenomai and lxrt targets require the presence of the
	<option>LINUX_SOURCE_DIR</option> option since these targets
	require Linux headers during the Orocos build.  To use the
	LibC Kernel headers in
	<filename>/usr/include/linux</filename>, specify
	<option>/usr</option>.  Inspect the output to find any errors.
      </para>
      <note><para>From Xenomai version 2.2.0 on, Xenomai configuration
      does no longer require the --with-linux option.</para></note>
    </section>
    <section id="install-flags">
      <title>Setting Build Compiler Flags</title>
      <para>
	You can set the compiler flags using the <option>CMAKE_BUILD_TYPE</option>
	option. You may edit this field to contain:
	<itemizedlist>
	  <listitem><para>RTT (default)</para></listitem>
	  <listitem><para>Release</para></listitem>
	  <listitem><para>Debug</para></listitem>
	  <listitem><para>RelWithDebInfo</para></listitem>
	</itemizedlist>
      </para>
    </section>
    <section id="general_setup_rtai">
      <title>Building for RTAI / LXRT</title>
      <para>
	Read first the 'Getting Started' section from <ulink
	  url="http://people.mech.kuleuven.be/~psoetens/portingtolxrt.html">this 
	  page</ulink> if you are not familiar with RTAI installation
      </para>
      <para>
	Orocos has been tested with RTAI 3.0, 3.1, 3.2, 3.3 and 3.4.
	You can obtain it from 
	<ulink url="http://www.aero.polimi.it/projects/rtai/">
	  the RTAI home page</ulink>.
	Read The README.* files in the
	<filename class="directory">rtai</filename> directory for detailed
	build instructions, as these depend on the RTAI version.
      </para>
      <section>
	<title> RTAI settings </title>
	<para>
	  RTAI comes with documentation for configuration and
	  installation.  During 'make menuconfig', make sure that
	  you enable the following options (<emphasis>in addition to
	  options you feel you need for your application</emphasis>) :
	  <itemizedlist>
	    <listitem>
	      <para>General -&gt; 'Enable extended configuration mode'</para>
	    </listitem>
	    <listitem>
	      <para>Core System -&gt; Native RTAI schedulers &gt;
	      Scheduler options -&gt; 'Number of LXRT slots' ('1000') </para>
	    </listitem>
	    <listitem>
	      <para>Machine -&gt; 'Enable FPU support'</para>
	    </listitem>
	    <listitem>
	      <para>Core System -&gt; Native RTAI schedulers &gt;
	      IPC support -&gt; Semaphores, Fifos, Bits (or Events) and Mailboxes</para>
	    </listitem>
	    <listitem>
	      <para>Add-ons -&gt; 'Comedi Support over LXRT' (if you intend to use the
	      Orocos Comedi Drivers)</para>
	    </listitem>
	    <listitem>
	      <para>Core System -&gt; Native RTAI schedulers &gt;
	      'LXRT scheduler (kernel and user-space tasks)'</para>
	    </listitem>
	  </itemizedlist>
	  After configuring you must run 'make' and 'make install' in your RTAI directory:
	  <command>make</command>
	  <command>sudo make install</command>
	</para>
	<para>
	  After installation, RTAI can be found in
	  <filename>/usr/realtime</filename>. You'll have to specify
	  this directory in the <option>RTAI_INSTALL_DIR</option> option
	  during 'ccmake'.
	</para>
      </section>
      <section>
	<title>Loading RTAI with LXRT</title>
	<para>
	  LXRT is a all-in-one scheduler that works for kernel and userspace.
	  So if you use this, you can still run kernel programs but have the ability
	  to run realtime programs in userspace. Orocos provides you the libraries
	  to build these programs.
	  Make sure that the following RTAI kernel modules are loaded
	  <itemizedlist>
	    <listitem><para>rtai_sem</para></listitem>
	    <listitem><para>rtai_lxrt</para></listitem>
	    <listitem><para>rtai_hal</para></listitem>
	    <listitem><para>adeos (depends on RTAI version)</para></listitem>
	  </itemizedlist>
	  For example, by executing as root:
	  <command>modprobe rtai_lxrt; modprobe rtai_sem</command>.
	</para>
      </section>
      <section>
	<title>Compiling Applications with LXRT</title>
	<para>
	  Application which use LXRT as a target need special flags when being
	  compiled and linked. Especially :
	  <itemizedlist>
	    <listitem>
	      <para>
		Compiling : <option>-I/usr/realtime/include</option>
	      </para>
	      <para>
		This is the RTAI headers installation directory.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linking : <option>-L/usr/realtime/lib -llxrt</option> for dynamic (.so) linking OR add
		<option> /usr/realtime/liblxrt.a </option> for static (.a) linking.
	      </para>
	      <important>
		<para>
		  You might also need to add
		  <filename>/usr/realtime/lib</filename> to the
		  <filename>/etc/ld.so.conf</filename> file and rerun
		  <command>ldconfig</command>, such that liblxrt.so
		  can be found.  This option is not needed if you
		  configured RTAI with LXRT-static-inlining.
		</para>
	      </important>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
    <section id="general_setup_xeno">
      <title >Building for Xenomai (version 2.2.0 or newer)</title>
      <note><para>
	For older Xenomai versions, consult the Xenomai README of that
	version.</para>
      </note>
      <para>
	Xenomai provides a real-time scheduler for Linux applications.
	See <ulink url="http://www.xenomai.org"> the Xenomai home
	page</ulink>. Xenomai requires a patch one needs to apply upon
	the Linux kernel, using the
	<command>scripts/prepare-kernel.sh</command> script. See the
	Xenomai installation manual. When applied, one needs to enable
	the <option>General Setup -&gt; Interrupt Pipeline</option>
	option during Linux kernel configuration and next the
	<option>Real-Time Sub-system -&gt; </option>,
	<option>Xenomai</option> and <option>Nucleus</option>. Enable
	the <option>Native</option> skin, <option>Semaphores</option>,
	<option>Mutexes</option> and <option>Memory Heap</option>. Finally
	enable the <option>Posix</option> skin as well.
      </para>
      <para>
	When the Linux kernel is built, do in the Xenomai directory:
	<command>./configure ; make; make install</command>.
      </para>
      <para>
	You'll have to specify the install directory in the
	<option>XENOMAI_INSTALL_DIR</option> option during 'ccmake'.
      </para>
      <section>
	<title>Loading Xenomai</title>
	<para>
	  The RTT uses the native Xenomai API to address the real-time
	  scheduler. The Xenomai kernel modules can be found in
	  <filename>/usr/xenomai/modules</filename>.  Only the
	  following kernel modules need to be loaded:
	  <itemizedlist>
	    <listitem><para>xeno_hal.ko</para></listitem>
	    <listitem><para>xeno_nucleus.ko</para></listitem>
	    <listitem><para>xeno_native.ko</para></listitem>
	  </itemizedlist> 
	  in that order.  For example, by executing
	  as root: <command>insmod xeno_hal.ko; insmod
	  xeno_nucleus.ko; insmod xeno_native.ko</command>.
	</para>
      </section>
      <section>
	<title>Compiling Applications with Xenomai</title>
	<para>
	  Application which use Xenomai as a target need special flags
	  when being compiled and linked. Especially :
	  <itemizedlist>
	    <listitem>
	      <para>
		Compiling : <option>-I/usr/xenomai/include</option>
	      </para>
	      <para>
		This is the Xenomai headers installation directory.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linking : <option>-L/usr/xenomai/lib
		-lnative</option> for dynamic (.so) linking OR add
		<option> /usr/xenomai/libnative.a </option> for
		static (.a) linking.
	      </para>
	      <important>
		<para>
		  You might also need to add
		  <filename>/usr/xenomai/lib</filename> to the
		  <filename>/etc/ld.so.conf</filename> file and rerun
		  <command>ldconfig</command>, such that libnative.so
		  can be found automatically.
		</para>
	      </important>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
    <section id="install-config-corba">
      <title>Configuring for CORBA</title>
      <para>
	In case your application benefits from remote access over a
	network, the RTT can be used with 'The Ace Orb' or
	<emphasis>TAO</emphasis> version prepared by OCI (Object
	Computing Inc.). You can find the latest TAO version on <ulink
	url="http://www.theaceorb.com">OCI's TAO website</ulink>. The
	RTT was tested with OCI's TAO 1.3 and 1.4.  The OCI version is
	prefered above the versions provided by the DOC group on the
	<ulink url="http://www.cs.wustl.edu/~schmidt/TAO.html">
	Real-time CORBA with TAO (The ACE ORB) website</ulink>.
      </para>
      <note>
	<para>
	  Orocos requires the ACE, TAO and TAO-orbsvcs libraries and
	  header files to be installed on your workstation and
	  <emphasis>that the ACE_ROOT and TAO_ROOT variables are set.</emphasis>
	</para>
      </note>
      <section>
	<title>TAO installation (Optional)</title>
	<note>
	  <para>
	    If your distribution does not provide the TAO libraries,
	    or you want to use the OCI version, you need to build
	    manually. These instructions are for building on
	    Linux. See the ACE and TAO installation manuals for
	    building on your platform.
	  </para>
	</note>
	<para>
	  You need to make an ACE/TAO build on your workstation.
	  Download the package here: <ulink
	  url="http://www.theaceorb.com/downloads/1.4a/index.html">OCI
	  Download</ulink>. Unpack the tar-ball, and enter 
	  <filename>ACE_wrappers</filename>. Then do:
	  <command>  export ACE_ROOT=$(pwd)
  export TAO_ROOT=$(pwd)/TAO
	  </command> When using GNU/Linux, continue with: 
	  <command>  ln -s ace/config-linux.h ace/config.h
  ln -s include/makeinclude/platform_linux.GNU include/makeinclude/platform_macros.GNU
	  </command> Finally, type:
	  <command>  make
  cd TAO
  make
  cd orbsvcs
  make
	  </command> This finishes your TAO build.
	</para>
      </section>
      <section>
	<title>Configuring the RTT for TAO</title>
	<para>
	  Orocos will first try to detect your location of ACE and TAO
	  using the ACE_ROOT and TAO_ROOT variables. If these are set
	  CORBA support (<option>ENABLE_CORBA</option>) is automatically
	  enabled.
	</para>
      </section>
      <section>
	<title>Application Development with TAO</title>
	<para>
	  Once you compile and link your application with Orocos and with the
	  CORBA functionality enabled, you must provide the correct include
	  and link flags in your own Makefile if TAO and ACE are not
	  installed in the default path. Then you must add:
	  <itemizedlist>
	    <listitem>
	      <para>
		Compiling : <option>-I/path/to/ACE_wrappers -I/path/to/ACE_wrappers/TAO</option>
	      </para>
	      <para>
		This is the ACE build directory in case you use OCI's
		TAO packages. This option is not needed if you used
		your distribution's TAO installation, in that case,
		TAO is in the standard include path.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linking : <option>-L/path/to/ACE_wrappers/lib -lTAO -lACE -lTAO_IDL_BE -lTAO_PortableServer -lTAO_CosNaming</option>
	      </para>
	      <para>
		This is again the ACE build directory in case you use OCI's
		TAO packages. The <emphasis>first</emphasis> option is not needed if you used
		your distribution's TAO installation, in that case,
		TAO is in the standard library path.
	      </para>
	      <important>
		<para>
		  You also need to add
		  <filename>/path/to/ACE_wrappers/lib</filename> to the
		  <filename>/etc/ld.so.conf</filename> file and rerun
		  <command>ldconfig</command>, such that these libraries
		  can be found.  Or you can before you start your application
		  type <screen>export LD_LIBRARY_PATH=/path/to/ACE_wrappers/lib</screen>.
		</para>
	      </important>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
  </section>

  <section id="started">
    <title>Getting Started with the Code</title>
    <para>
      This Section provides a short overview of how to proceed next using the
      &orocos; Real-Time Toolkit.
    </para>
    <section>
      <title>A quick test</title>
      <para>
	You can issue a <command>make check</command> in the Orocos
	build directory, but this stresses your system heavily. make
	check for the gnulinux target should successfuly complete.
      </para>
      <para>
	To quickly test an &orocos; application, you can download the examples
	from the webpage.
      </para>
    </section>
    <section>
      <title>What about main() ?</title>
      <para>
	The first question asked by many users is : How do I write a
	test program to see how it works? 
      </para>
      <para>
	Some care must be taken in initialising the realtime
	environment. First of all, you need to provide a function
	  <function>int ORO_main(int argc, char** argv)
	    {...}</function>, defined in &lt;rtt/os/main.h&gt; which contains your program :
	    <programlisting>  #include &lt;rtt/os/main.h&gt;
	      
  int ORO_main(int argc, char** argv)
  {
     // Your code, do not use 'exit()', use 'return' to 
     // allow Orocos to cleanup system resources.
  } </programlisting>
          If you link
	  with the liborocos-rtt.so library, this function will
	  be called after the run-time environment is set up. To put in
	  other words, the Orocos library already contains a
	  main() function which will call the user-defined ORO_main()
	  function.
	</para>
	<example>
	  <title>A Makefile for an Orocos Application</title>
	  <para>
	    You can then simply compile your program with a Makefile
	    resembling this one : 
	    <programlisting>  OROPATH=/usr/local
  CXXFLAGS=`PKG_CONFIG_PATH=${OROPATH}/lib/pkgconfig pkg-config orocos-rtt --cflags`
  LDFLAGS=`PKG_CONFIG_PATH=${OROPATH}/lib/pkgconfig pkg-config orocos-rtt --libs`

  all: myprogram.cpp
        g++ myprogram.cpp ${CXXFLAGS} ${LDFLAGS} -o myprogram  </programlisting>
	    The flags must be extended with compile and link options
	    for your particular application.
	  </para>
	<para>
	  <important>
	    <para>The <option>LDFLAGS</option> option must be placed after
	    the <filename>.cpp</filename> or <filename>.o</filename>
	    files in the gcc command.</para>
	  </important>
	  <note>
	    <para>Make sure you have read <xref linkend="install-configure" />
	      for your target if you application has compilation or link errors
	      ( for example when using LXRT ).
	    </para>
	  </note>
	</para>
	</example>
      </section>
    <section>
      <title>Header Files Overview</title>
      <para>
	<table>
	  <title>Header Files</title>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry>Header</entry>
		<entry>Summary</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>rtt/*.hpp</entry>
		<entry>The `Real-Time Toolkit' directory contains the 
		headers which describe the public API.
		</entry>
	      </row>
	      <row>
		<entry>rtt/os/*.h, rtt/os/*.hpp</entry>
		<entry>Not intended for normal users. The os headers
		describe a limited set of OS primitives, like locking
		a mutex or creating a thread. Read the OS manual
		carefully before using these headers, they are mostly
		used internally by the RTT.
		</entry>
	      </row>
	      <row>
		<entry>rtt/dev/*.hpp</entry>
		<entry>C++ Headers for accessing hardware interfaces.
		</entry>
	      </row>
	      <row>
		<entry>rtt/corba/*.hpp</entry>
		<entry>C++ Headers for CORBA support.
		</entry>
	      </row>
	      <row>
		<entry>rtt/scripting/*.hpp</entry>
		<entry>C++ Headers for real-time scripting. Do not include these
		directly as they are mainly for internal use.
		</entry>
	      </row>
	      <row>
		<entry>rtt/marsh/*.hpp</entry>
		<entry>C++ Headers for XML configuration and converting
		data to text and vice versa.
		</entry>
	      </row>
	      <row>
		<entry>rtt/dlib/*.hpp</entry>
		<entry>C++ Headers for the experimental Distribution
		Library which allows embedded systems to use some
		RTT primitives over a network. This directory does not
		contain such a library but only interface headers.
		</entry>
	      </row>
	      <row>
		<entry>rtt/impl/*.hpp</entry>
		<entry>C++ Headers for internal use.
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
    </section>
  </section>
  <section id="cross-compile">
    <title>Cross Compiling Orocos</title>
    <para>
      This section lists some points of attention when
      cross-compiling Orocos.
    </para>
    <para>
      Run plain "cmake" or "ccmake" with the following options:
      <screen><command> 
      CC=cross-gcc CXX=cross-g++ cmake .. -DCROSS_COMPILE=cross-</command></screen>
      and substitute the 'cross-' prefix with your target tripplet, 
      for example: 'powerpc-linux-gnu-'.
    </para>
  </section>
</article>
