<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>

<article>
  <articleinfo>
    <title>
      Inside The Orocos Task Infrastructure Manual
    </title>
    <authorgroup>
      <author>
	<firstname>Peter</firstname>
	<surname>Soetens</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2006</year>
      <holder>Peter Soetens</holder>
    </copyright>
    
    <abstract>
      <para>
	This document describes the insideds of the &orocos; Task Infrastructure, which
	allows to design Real-Time tasks which transparantly communicate
	with each other.
      </para>
    </abstract>
    
    <revhistory>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>28 February 2006</date>
	<authorinitials>PS</authorinitials>
	<revremark>Split off the main manual.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section>
    <title>Introduction</title>
    <para>
      This manual documents how low-level commands can be used
      to communicate with tasks.
    </para>
  </section>
  <section>
    <title>The DataSource Interface</title>
      <note><title>Purpose</title><para>A task's datasources are
      read-only data the task wishes to export, for example, for
      logging or allowing other tasks to read internal status
      variables. A tracking error of a controller task is a 
      typical datasource.</para></note>
      <para>
	<classname>RTT::DataSource</classname>s are read-only
	objects which, when evaluated, return some data. The source of
	the data can be anything, as long as it takes finite time to
	get it. DataSources can be combined to new DataSources using
	algorithmic expressions. The only way they differ from
	Methods, is that the corresponding C++ function must be const.
      </para>
      <section>
	<title>The Template DataSource Factory</title>
	<para>
	  To add a method to the DataSource Factory, one can use
	  the <classname>TemplateDataSourceFactory</classname>,
	to easily create DataSource factories :</para>
	<para>
	<programlisting>
  #include &lt;rtt/TemplateFactories.hpp&gt;

  using namespace RTT;

  class MyTask
    : public <classname>RTT::GenericTaskContext</classname>
  {
    int _number;
  public:
    string getName() const { ... }
    double power(double a, double b) const { ... }
    // ...
    MyTask(std::string name)
      : <classname>RTT::GenericTaskContext</classname>(name)
    {
       // ...

       TemplateDataSourceFactory&lt;MyTask&gt;* dfact =
	   newDataSourceFactory( <emphasis>this</emphasis> );
       dfact-&gt;add( &quot;number&quot;,
                     data( &amp;MyTask::_number,
                           &quot;the number.&quot; ) );
       dfact-&gt;add( &quot;name&quot;,
                     data( &amp;MyTask::getName,
                           &quot;Read out the name.&quot; ) );
       dfact-&gt;add( &quot;power&quot;,
                     data( &amp;MyTask::power,
                           &quot;return a to the power of b&quot;,
	                   &quot;a&quot;, &quot;the base&quot;, 
	                   &quot;b&quot;, &quot;the exponent&quot; ) ); 

       this->datasources()->registerObject("this", dfact);
     }
     // ...
  };</programlisting>
	</para>
        <para>
	  which is thus nearly identical to using a method.
	  Notice the usage of the _number class member. The
	  factory also accepts class member variables instead
	  of const functions, but likewise, they are also
	  read-only.
	</para>
	<important>
	  <para>The data factory, and all other factories of a TaskContext
	  take ownership of the registered or added objects. You are not
	  allowed to delete them.</para>
	</important>
      </section>
      <section>
	<title>The Map DataSource Factory</title>
	<para>
	  If your application has set up DataSources itself (for example,
	  using CoreLib DataObjects ), the <classname>RTT::MapDataSourceFactory</classname>
	  can be used to add them to you TaskContext's DataSource interface.
	  For example, continued from the program listing of the previous
	  section :
	</para>
	<programlisting> <classname>RTT::DataObjectInterface</classname>&lt;MyDataType&gt;* myData 
     = new <classname>RTT::DataObjectLockFree</classname>&lt;MyDataType&gt;("MyData");

  <classname>RTT::MapDataSourceFactory</classname>::Map storemap;
  storemap["NewData_1"] = myData;
  // store other DataSources...

  // finally :
  <classname>RTT::MapDataSourceFactory</classname>* mdf 
     = new <classname>RTT::MapDataSourceFactory</classname>( storemap, "Thread-safe DataObjects");

  this->datasources()->registerObject("dataobjs", mdf);
	</programlisting>
	<para>
	  Which uses the thread-safe
	  <classname>RTT::DataObjectLockFree</classname>
	  (which implements <classname>RTT::DataSource</classname>) to exchange data between
	  TaskContexts. You must use DataObjectLockFree to exchange
	  any composite type between threads.
	</para>
      </section>
      <section>
	<title>Accessing DataSources from Scripts</title>
	<para>
	  In scripting, the braces are optional when no arguments must be
	  given. An external task might read the DataSources of "ATask" as such:
	</para>
	<para>
	  <programlisting>
  var int nb = ATask.objname.number
  var double result = ATask.objname.power( 5., 6.)

  task.newData = ATask.dataobjs.NewData_1</programlisting></para>
        <para>
	  Again, the &quot;this&quot; object can be used if the 
	  DataSource should belong to the task's interface.
	</para>
    </section>
  </section>
  <section>
    <title>ProgramLoader and PropertyLoader</title>
    <para>
      The GenericTaskContext uses these two classes
      to manage properties and programs scripts.
    </para>
    <section>
      <title>Task Property Configuration</title>
      <para>
	As was seen in <xref linkend="task-attr-rep" />, CoreLib Properties
	can be added to a task's AttributeRepository. To read and write
	properties from or to files, you can use the <classname>RTT::PropertyLoader</classname>
	class. It uses the XML Component Property Format such that it is human readable.
      </para>
      <programlisting>  #include &lt;rtt/PropertyLoader.hpp&gt;
  // ...
  <classname>RTT::TaskContext</classname>* a_task = ...
  <classname>RTT::PropertyLoader</classname> ploader;
  ploader.configure("PropertyFile.cpf", a_task );
  // ...
  ploader.save("PropertyFile.cpf", a_task ); </programlisting>
       <para>
	 Where 'configure' reads the file and configures updates the
	 task's properties and 'save' <emphasis>updates</emphasis> the
	 given file with the properties of the task. It is allowed to
	 share a single file with multiple tasks or update the task's
	 properties from multiple files. Fortunately, the
	 <classname>RTT::GenericTaskContext</classname> has
	 implemented this functionality also as script methods, thus
	 you do not need to do this manually.
       </para>
    </section>
    <section>
      <title>Task Program Scripts</title>
      <section>
	<title>Functions</title>
	<para>
	  A function is formed by a group of commands and
	  methods, which can be executed by a task.
	  The scripting language defines functions as :</para>
	<para>
	  <programlisting>
  export function myFun( int arg1, double arg2 )
  {
    // Group commands and methods
    var ...
    do ...

  } 
  // repeat... </programlisting></para>
	<para>
	  where the optional <option>export</option> keyword makes the function
	  available as a task's command ( which will fail
	  if one of its contained commands fail ) :
	  <programlisting>  do ATask.myFun( 1, 2. )</programlisting>
	  If you omit the export keyword, then the function will not
	  become available as a command. To use such a function, you need to 
	  execute it in the Execution Engine's Program Processor ( see below ), or call it in a program,
	  which was parsed in the same file (see <xref linkend="task-context-programs" /> ).
	</para>
	<para>
	  Functions must be parsed by the <classname>RTT::Parser</classname>,
	  before they can be executed by the Execution Engine. It
	  executes the Function until it finishes or it goes into error.
	  In both cases, the Function is removed from the queue
	  and can then safely be deleted (or re-run).</para>
	<note>
	  <para>
	    The <classname>RTT::Parser</classname> and
	    <classname>RTT::ProgramLoader</classname> are
	    located in the Orocos Program Parser package and not in
	    the Task Context package.
	  </para>
	</note>
	<para>
	  To directly execute any number of <emphasis>not exported</emphasis> functions in a file, 
	  or <emphasis>add</emphasis> an exported function in a TaskContext's Command API, do :
	  <programlisting>  #include &lt;rtt/ProgramLoader.hpp&gt;

  <classname>RTT::TaskContext</classname>* a_task = ...
  <classname>RTT::ProgramLoader</classname> loader;
  ProgramLoader::Functions funcs;

  funcs = loader.loadFunction( "Functions.ops", a_task );</programlisting>
           funcs is an STL container wich contains all functions being executed.
	</para>
	<warning>
	  <para>
	    Using loadFunction with functions that require arguments will
	    execute the functions with default initialisation of the arguments.
	    It is easier to <option>export</option> the function and invoke it
	    as a Command. Otherwise, use programs to call such functions.
	  </para>
	</warning>
      </section>
      <section>
	<title>Programs</title>
	<para>
	  Programs are special functions in that they
	  can be finely controlled once loaded in
	  the <classname>RTT::ProgramProcessor</classname>.
	  A program can be paused, it's variables inspected
	  and reset while it is loaded in the Processor. It provides
	  thus more funcitonality than a mere function.
	  A program script calling the previous function
	  would look like :</para>
	<para>
	  <programlisting> [ ... myFun() function definition ... ]

  program myBar
  {
    var int i = 1
    var double j = 2.0
    do myFun(i,j)
  }</programlisting>
	  As with functions, any number of programs may be listed in a file.
	</para>
	<para>
	  Orocos Programs are loaded a bit different into a TaskContext
	  :</para>
	<para>
	  <programlisting>
  #include &lt;rtt/ProgramLoader.hpp&gt;

  <classname>RTT::TaskContext</classname>* a_task = ...
  <classname>RTT::ProgramLoader</classname> parser;

  loader.loadProgram( "ProgramBar.ops", a_task ); </programlisting></para>
	<para>
	  Take a look the
	  <classname>RTT::ProgramInterface</classname> class
	  reference for more program related functions.
	</para>
      </section>
      <section>
	<title>State Machines</title>
	<para>
	  Hierarchical state machines are modelled in Orocos
	  with the <classname>RTT::StateMachine</classname> class.
	  They are like programs in that they can call a
	  peer task's members, but the calls are grouped
	  in a state and only executed when the state machine
	  is in that state. This section limits to showing
	  how an Orocos State Description (osd) script can be loaded in a 
	  Task Context.
	</para>
	<para>
	  <programlisting>
  #include &lt;rtt/ProgramLoader.hpp&gt;

  <classname>RTT::TaskContext</classname>* a_task = ...
  <classname>RTT::ProgramLoader</classname> loader;

  loader.loadStateMachine( "StateMachineBar.osd", a_task ); </programlisting></para>
	<para>
	  Again, take a look at the StateMachine class reference for
	  more details about state context related functions.
	</para>
      </section>
    </section>
  </section>
  <section>
    <title>Using Low-level Commands and Methods in C++</title>
    <para>
      Besides using scripts, you can directly build C++ commands or
      methods, although it requires more &quot;red tape&quot;. The
      advantage is that you are not limited to the scripting
      language's syntax and do not need to use the script parsers.
    </para>
    <section>
      <title>Sending a Task a Command</title>
      <para>
	To request a command from one task to another task, the
	command must be fetched from the factories of a TaskContext
	and next passed to that TaskContext which has two methods to
	accept commands. In a C++ program, this would be : </para>
      <para>
	<programlisting>
  // for GenerateDataSource :
  #include &lt;rtt/DataSourceGenerator.hpp&gt;

  //...
  TaskContext* peer = this->getPeer("ATask");

  // Create the command argument list.
  // up to 4 arguments can be given to GenerateDataSource()(...)
  std::vector&lt;DataSourceBase::shared_ptr&gt; args 
     = GenerateDataSource()(1.0); 

  // Create the command and condition :
  try {
     ComCon comcon =
        peer->commands()->getObjectFactory("objname")->
	     create("cleanup", args );
  } catch ( ... ) {
     // wrong arguments !
  }

  // Execute the command (real-time):
  if ( peer->executeCommand( comcon.first ) ==  false ) {
       // task does not accept commands !
  }

  // wait until done :
  while ( comcon.second->evaluate() == false )
     sleep(1);
  // command done, we can now delete it or keep it.	</programlisting></para>
      <para>
	The factory can throw exceptions if the number of arguments,
	the type of arguments or the command names are unknown.
	It returns a <classname>ComCon</classname> struct, where the
	<varname>first</varname> member contains a pointer to the
	CommandInterface and the <varname>second</varname> member
	contains a pointer to the ConditionInterface ( the Completion
	Condition ).
	<methodname>executeCommand</methodname> passes
	the command to the task's command processor and returns true if
	accepted by the command processor.
	The alternative is <methodname>queueCommand</methodname> :
      </para>
      <para>
	<programlisting>
  // ... see previous listing
  int qnb = peer->queueCommand( comcon.first );
  if ( qnb == 0 ) {
	// Error, not accepted !
  }
  while ( !peer->engine()->commands()->isProcessed( qnb ) )
        sleep(1); // wait until the command is processed

  while ( comcon.second->evaluate() == false )
        sleep(1); // wait until the command is done
  // command done, we can now delete it or keep it.	</programlisting></para>
      <para>
	You only know if it got in the queue, but not if the command
	function itself returned true.
      </para>
    </section>
    <section>
      <title>Advanced Command Queueing</title>
      <para>
	The previous section showed how a command can be given to a
	task, but the return value of the Command was lost.  In some
	cases, this does not matter, but when the program logic needs
	to know the result, two options are possible. One can write a
	program script, which check command return values (and goes
	into error if the command fails) or wrap the command in a
	<classname>RTT::TryCommand</classname> .
      </para>
      <para>
	Assume you have a command,condition pair as above :</para>
      <para>
	<programlisting>
  ComCon comcon = ...;	</programlisting></para>
      <para>
	Before queueing, you can wrap both command and condition
	as such :</para>
      <para>
	<programlisting>
  #include &lt;rtt/TryCommand.hpp&gt;
  // ...
  TryCommand* trycommand
     = new TryCommand( comcon.first );

  DataSource&lt;bool&gt;::shared_ptr executed
     = trycommand->executed();
  DataSource&lt;bool&gt;::shared_ptr accepted 
     = trycommand->result();

  peer->queueCommand( trycommand );
  
  while ( executed->get() == false )
     sleep(1); // wait for its execution
  if ( accepted->get() == false ) {
     // Error, Command returned false !
  }
  while ( comcon.second->evaluate() == false )
     sleep(1); // wait for its completion	</programlisting></para>
      <para>
	The DataSources are used by the TryCommand to
	store the result into. We use the <function>get()</function> function
	to inspect the results. If you want to reuse the
	trycommand, you need to <function>reset()</function>
	the trycommand such that <function>executed()</function> and
	<function>result()</function> functions are reset to their
	initial values.
      </para>
    </section>
    <section>
      <title>Calling a Task's Method</title>
      <para>
	To call a task's method, the method must be fetched from the
	factories of a TaskContext.  In a C++ program, this would be :
      </para>
      <para>
	<programlisting>
  // for GenerateDataSource() :
  #include &lt;rtt/DataSourceGenerator.hpp&gt;
  // for AdaptDataSource() :
  #include &lt;rtt/DataSourceAdaptor.hpp&gt;

  //...
  TaskContext* peer = this->getPeer("ATask");

  // Create the command argument list.
  // up to 4 arguments can be given to GenerateDataSource()(...)
  std::vector&lt;DataSourceBase::shared_ptr&gt; args 
     = GenerateDataSource()(0.1); 

  // Create the method object :
  try {
     DataSourceBase::shared_ptr meth =
        peer->methods().getObjectFactory("objname")->
	     create("changeP", args );
  } catch ( ... ) {
     // wrong arguments !
  }

  // Call the method (always synchronously):
  meth->evaluate();

  // OR : to retrieve the return value you need to do :
  DataSource&gt;double&lt;::shared_ptr meth2 = AdaptDataSource&lt;double&gt;()( meth );

  double result = meth2->get(); // assert that meth2 != 0 !
</programlisting></para>
      <para>
	The method factory can throw exceptions if the number of
	arguments, the type of arguments or the command names are
	unknown.  It returns a <classname>DataSourceBase</classname>
	pointer which you <emphasis>must</emphasis> store in a
	<classname>DataSourceBase</classname>::shared_ptr object, such
	that memory deallocation can be managed. If you want the return
	value of the method, you need to adapt it first to a DataSource
	of the correct type. <classname>AdaptDataSource</classname>&gt;T&lt;()(arg)
	will return null if the argument can not be converted to to T.
	Upon success you can then use the <function>get()</function>
	function to execute the method <emphasis>and</emphasis> collect
	the result; <function>evaluate()</function> on the other hand
	only executes the method and does not return the result.
      </para>
    </section>
    <section>
      <title>Passing results by argument</title>
      <para>
	The same rules apply for passing values by argument as with scripts.
	A method, command or completion condition may store the results in its arguments, given
	that the DataSources are of type <classname>AssignableDataSource</classname>.
	After the command or method finished, you find the new values in the objects
	referenced by vector&lt;DataSourceBase::shared_ptr&gt;.
      </para>
    </section>
  </section>
</article>
