<?xml version='1.0'?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"/usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd" 
[
<!ENTITY cvs         "<acronym>CVS</acronym>">
<!ENTITY orocos      "<acronym>Orocos</acronym>">
<!ENTITY oldversion  "0.20.0">
<!ENTITY version     "0.22.0">
<!ENTITY rtai        "<acronym>RTAI</acronym>">
<!ENTITY rtos        "<acronym>RTOS</acronym>">
]
>

<article>
  <articleinfo>
    <title>
      Orocos &version; Release Series
      Changes, New Features, and Fixes 
    </title>
    <subtitle><emphasis>Open RObot COntrol Software</emphasis>
    </subtitle>
  </articleinfo>
  <para>
    This document provides a quick overview of what changed between Orocos &oldversion; and
    Orocos &version;. Hence, this release includes all bugfixes of the &oldversion;
    branch. If your application does not work, look here for
    possible causes and solutions. Also feature additions and improvements
    are documented.
  </para>
  <section id="caveats">
    <title>Caveats</title>
    <section>
      <title>Core Infrastructure</title>
    <itemizedlist>
      <listitem>
	<para>
	  As warned in the previous release, the (long not maintained)
	  FIFO infrastructure has been removed. To implement communication between
	  kernel and user-space, use your OS specific communication primitives.
	  Within the same package, the old 'buffer' implementations were removed
	  as well.
	</para>
      </listitem>
      <listitem>
	<para>
	  SingleThread had a semantic change with respect to start() and stop().
	  Multiple invocations of start() will try to start the loop() function,
	  but only the first invocation will call initialize(). A stop() will
	  only call breakLoop() when the loop() function has not returned itself.
	  If this succeeds, finalize() is called within stop() ( previously after
	  loop() in the thread. )
	</para>
      </listitem>
    </itemizedlist>
    </section>
    <section>
      <title>Program and State Execution</title>
      <itemizedlist>
	<listitem>
	  <para>
	    API Change : The 'old' <classname>Processor</classname> has been replaced by
	    the new <classname>ExecutionEngine</classname>, taking over the task of managing
	    a task's commands, events, state machines etc. It delegates these tasks
	    to specialised processors (<classname>EventProcessor</classname>,
	    <classname>CommandProcessor</classname>,<classname>ProgramProcessor</classname> and
	    <classname>StateMachineProcessor</classname> ).
	    'Running' a task is now far more easier to setup. 
	  </para>
	</listitem>
	<listitem>
	  <para>
	    API Change : <classname>Program</classname>s and
	    <classname>StateMachine</classname>s may now be directly
	    controlled (start, pause, ...) by invoking the respective
	    methods on these objects. Previously, manipulating these objects needed
	    to happen through the <classname>Processor</classname>.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Control Kernel Architecture</title>
      <itemizedlist>
	<listitem>
	  <para>
	    By introduction of the <classname>Process</classname> Component, a new
	    component which manages or provides services for other components, 
	    the components which are started by default are managed by the 
	    <classname>DefaultProcess</classname> Component.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Each Component loaded in the Control Kernel has its own 'TaskContext'
	    to store its commands, properties etc.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>
  <section id="general">
    <title>General Improvements</title>
    <itemizedlist>
      <listitem>
	<para> 
	  All 'locks' (mutexes) have been replaced with lock-free
	  algorithms for events, commands, programs etc. Such that in
	  a running real-time application, no more mutexes are used
	  when communicating between threads. This has drastically
	  improved performance (no OS kernel interaction) and time
	  determinism (no more blocking threads).
	</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="os">
    <title>OS Specific Improvements</title>
    <section>
      <title>All</title>
      <itemizedlist>
	<listitem>
	  <para>
	    64bit support has been added and tested on the AMD64
	    processors. Device drivers (Comedi, CAN) have not been ported to this platform.
	  </para>
	</listitem>
    </itemizedlist>
    </section>
    <section>
      <title>Xenomai</title>
      <itemizedlist>
	<listitem>
	  <para>
	    A port to Xenomai 2.0 has been added. 
	  </para>
      </listitem>
    </itemizedlist>
    </section>
  </section>
  <section id="doc">
    <title>Documentation Improvements</title>
    <itemizedlist>
      <listitem>
	<para>
	  The manuals have been updated with new examples and the
	  updated interfaces. As ususual, the Online Doxygen documentation 
	  has been updated.
	</para>
      </listitem>
      <listitem>
	<para>
	  The HTML manuals now link to the Doxygen online API,
	  allowing the user to explore a class interface when it is discussed
	  in the text.
	</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="corelib">
    <title>CoreLib Improvements</title>
    <itemizedlist>
      <listitem>
	<para>
	  The Event mechanism has been reworked to a new implementation
	  which is now hard real-time safe, both in emitting events and
	  connecting/disconnecting event handles. Orocos Events also are no
	  longer subject to priority inversions or dead-locks.
	</para>
      </listitem>
      <listitem>
	<para>
	  A pleathora of lock-free buffers, lists and queues has been added
	  for real-time (local) data exchange, which is especially beneficial
	  for communication between hard and soft/not real-time threads.
	</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="control">
    <title>Control Kernel and Components Improvements</title>
    <itemizedlist>
      <listitem>
	<para>
	  A new kind of Component, the <classname>Process</classname>
	  Component has been added to provide a place to implement kinematic
	  algorithms or fine grained control over which components are
	  executed and in which order. Each application will have a Process Component.
	  The <classname>DefaultProcess</classname> just executes all components
	  in the default order, a <classname>CartesianProcess</classname> executes
	  the cartesian path interpolation components with a Kinematics Component,
	  the <classname>KinematicProcess</classname>. The Control Kernel example
	  applications have been updated to use this component type.
	</para>
      </listitem>
      <listitem>
	<para>
	  We have switched to the Boost::Ublas library for matrix calculations.
	  The Orocos kinematics interfaces are the first to use these objects
	  for Jacobian calculations.
	</para>
      </listitem>
      <listitem>
	<para>
	  A new Kinematics Process Component has been added to manage 
	  all kinematics of your controller. It provides all the kinematic
	  algorithms as 'methods' in its component interface, and can
	  be online reconfigured or read information from a property XML
	  file.
	</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="program">
    <title>TaskContext, Program Processor and Parser Improvements</title>
    <itemizedlist>
      <listitem>
	<para>
	  The <classname>ExecutionEngine</classname> class has been added to replace the
	  Processor class and manages access to the processors for commands, events,
	  programs and state machines.
	</para>
      </listitem>
      <listitem>
	<para>
	  The <classname>StateMachine</classname> can now react to events of peer
	  tasks. A new 'event transition' syntax was added to the scripting language.
	  The arguments (data) of the events are caught in script variables and
	  are directly accessible to decide on the transition to another state.
	</para>
      </listitem>
      <listitem>
	<para>
	  All processor interaction is now fully lock-free. This means that any
	  command or event can not cause dead-locks or higher priority threads
	  to wait within the Orocos framework.
	</para>
      </listitem>
      <listitem>
	<para>
	  Sending commands, invoking methods, using events,... Any part of the
	  <classname>TaskContext</classname> interface creates 'user-friendly'
	  C++ objects which represent the command, method or event. Lookup
	  <classname>CommandC</classname>, <classname>MethodC</classname>,
	  <classname>ConnectionC</classname> and <classname>EventC</classname>
	  in the manuals and Doxygen pages to get a grip on how to use a
	  TaskContext's interface without using the scripting.
	</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="interfacing">
    <title>Interfacing Improvements</title>
    <itemizedlist>
      <listitem>
	<para>
	  The KernelClient GUI version 0.8 has been released in two
	  separate packages: one for direct connection to a Control Kernel
	  and one for connection through CORBA.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <appendix>
    <title>About Orocos</title>
    <para>
      Please send general, non technical, Orocos questions to <ulink
	url="mailto:orocos at lists.mech.kuleuven.be">
	orocos at lists.mech.kuleuven.be </ulink>. 
    </para>
    <para>
      These pages are maintained by <ulink
	url="http://www.orocos.org/about.php">the Orocos
	team</ulink>.
    </para>
    <para>
      For questions related to the use of the Orocos Software, please consult these
      web pages and the <ulink
	url="http://www.orocos.org/documentation.php">Orocos manuals</ulink>. If
      that fails, the  <ulink
	url="mailto:orocos-dev at lists.mech.kuleuven.be">
	orocos-dev at lists.mech.kuleuven.be </ulink> mailing list might help.
      Please
      send comments on these web pages and the development of Orocos to
      our developer mailing list at  <ulink
	url="mailto:orocos-dev at lists.mech.kuleuven.be">
	orocos-dev at lists.mech.kuleuven.be </ulink>. All of
      our lists have <ulink url="http://lists.mech.kuleuven.be/mailman/listinfo/orocos">public
	archives</ulink> ( <ulink url="http://lists.mech.kuleuven.be/mailman/listinfo/orocos-dev"> dev public
	archive</ulink> ) .
      </para>
    <para>
      Copyright (C) Peter Soetens
    </para>
    <para>
      Verbatim copying and distribution of this entire article is
      permitted in any medium, provided this notice is preserved.
    </para>
  </appendix>
</article>
