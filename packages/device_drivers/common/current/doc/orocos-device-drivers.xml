<?xml version='1.0'?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"/usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd">

<book>
  <bookinfo>
    <title> Orocos Device Drivers </title>
    <authorgroup>
      <author>
        <firstname>Peter</firstname>
        <surname>Soetens</surname>
        <affiliation>
          <orgname>K.U.Leuven</orgname>
          <address><country>Belgium</country></address>
        </affiliation>
      </author>

      <author>
        <honorific>Dr. ir</honorific>
        <firstname>Herman</firstname>
        <surname>Bruyninckx</surname>
        <affiliation>
          <orgname>K.U.Leuven</orgname>
          <address><country>Belgium</country></address>
        </affiliation>
      </author>

      <author>
        <firstname>Panagiotis</firstname>
        <surname>Issaris</surname>
        <affiliation>
          <orgname>K.U.Leuven</orgname>
          <address><country>Belgium</country></address>
        </affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>2003</year>
      <holder><email>Peter.Soetens@mech.kuleuven.ac.be</email></holder>
      <holder><email>Herman.Bruyninckx@mech.kuleuven.ac.be</email></holder>
    </copyright>

    <abstract>
      <para>
	This document explains the design and implementation of the
	Drivers components.
      </para>
    </abstract>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>
  </bookinfo>

  <title>Orocos Device Drivers</title>
  <chapter>
    <title>Introduction</title>
    <para>
      This chapter gives you the basic knowledge to start working with the
      Orocos Device Drivers package.
    </para>

    <sect1>
      <title>Requirements</title>
      <para>
	This package has a dependency on the Orocos-corelib and Orocos-device_interface
	packages. So you need to install
	that package first before you can proceed. Further, this package extends the
	<ulink url="http://www.comedi.org">comedi</ulink> library and integrates it
	into the framework. Comedi is a realtime device drivers package and supports a lot
	of hardware. You might want to install comedi and comedilib when they support your
	hardware or if you want to port your home made drivers to comedi. We refer to
	their website for installation instructions.
      </para>
    </sect1>
    <sect1>
      <title>What's in this package</title>
      <para>
        <itemizedlist>
	  <listitem>This package contains a primitive wrapper to the kernel comedi functionality
	    and comedilib (userspace).</listitem>
	  <listitem>A home made driver for the APCI1710, APCI2200 and APCI1032 PCI cards 
	    and a C++ classes for reading/resetting the cards and some event handling.</listitem>
	  <listitem>An example of how an Axis class could implement homing</listitem>
	  <listitem>An example of how a Schunk 6D Force Sensor can be accessed (serial and 
	    via comedi)</listitem>
	  <listitem>Classes for reading SSI encoders and incremental encoders.</listitem>
	  <listitem>A sample implementation for wrapping the whole Comedi Library to C++</listitem>
        </itemizedlist>
      </para>
      The aim of this package is to show how a driver can implement one or more interfaces of the
      FDI (see orocos-core). Other packages will exclusively refer to the
      FDI, and the decision of which driver to actually use, can be deferred
      until run time.
    </sect1>
  </chapter>
  <chapter>
    <title>Installation Instructions</title>
    <para>
      We refer to the orocos-installation manual on how to install this package.
    </para>
  </chapter>
  <chapter>
    <title>Developers Documentation</title>
    <para>
      All the drivers code resides in the <classname>CBDeviceDriver</classname> namespace,
      which stands for "Component Based Device Driver". A CBDD is a class which implements
      one or more interfaces of the FDI (xref orocos-core). One can configure the CBDD
      to choose which physical device is to be addressed for each instance of the class.
      Examples of CBDDs are : encoder drivers, closed controller interfacers, camera
      drivers, etc.
    </para>
    <sect1>
      <title>Comedi C++</title>
      <para>
	We have currently two Comedi C++ implementations. The one in the main source
	tree provides <classname>ComediDevice</classname>, <classname>ComediSubDeviceAIn
	</classname> and <classname> ComediSubDeviceAOut</classname> classes which
	provide basic device access and nameserving. 
	The wrapper classes <classname>ComediSubDeviceAOut</classname> and <classname>ComediSubDeviceAIn</classname>
	show how the <classname>AnalogOutInterface</classname> and the <classname>AnalogInInterface</classname>
	interfaces of the FDI can be implemented.
	A more extended, but experimental
	implementation can be found in the comedi subdirectory. We do not currently
	use it, but you are encouraged to experiment with it or provide us suggestions
	and patches.
      </para>
    </sect1>
    <sect1>
      <title>Logical Device Drivers</title>
      <para>
	This contains implementation of logical devices such as DigitalInput,
	DigitalOutput, AnalogInput, AnalogOutput, Axis, Drive,... they are
	access-wrappers around the more general IO Interfaces.
      </para>
    </sect1>
  </chapter>
</book>
