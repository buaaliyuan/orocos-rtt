#ifndef ORO_FEEDFORWARDCONTROLLER_HPP
#define ORO_FEEDFORWARDCONTROLLER_HPP

#include <control_kernel/DataServer.hpp>
#include <control_kernel/KernelInterfaces.hpp>

#include <pkgconf/system.h>
#ifdef OROPKG_EXECUTION_PROGRAM_PARSER
#include "execution/TemplateDataSourceFactory.hpp"
#include "execution/TemplateCommandFactory.hpp"
#endif


namespace ORO_ControlKernel
{
    /**
     * The Outputs generated by the FeedForwardController.
     */
    struct FFOutput :
        public ServedTypes< vector<double> >
    {
        FFOutput()
        {
            this->insert(make_pair(0, "ChannelValues") );
        }
    };

    /**
     * A Controller component which just feedforwards the
     * setpoint values to the output dataobject.
     */
    template< class Base >
    class FeedForwardController
        : public Base
    {
    public:
        /**
         * Constructor.
         */
        FeedForwardController(int num_channels =  1) 
            : Base("FeedForwardController"),
              max_chans("Channels", "The number of channels", num_channels)
        {
            set_point.resize(max_chans, 0.0);
        }

        virtual bool componentLoaded()
        {
            if (!Base::Output::dObj()->Get("ChannelValues", outp_DObj))
                return false;
            outp_DObj->Set( set_point ); // this is a sort-of vector resize for the output
            return true;
        }

        virtual bool componentStartup()
        {
            if (!Base::SetPoint::dObj()->Get("ChannelValues", setp_DObj))
                return false;
            return true;
        }            

        virtual void pull()
        {
            setp_DObj->Get( set_point );
        }

        virtual void push()      
        {
            // just propagate the setpoints.
            outp_DObj->Set( set_point );
        }

        bool isValidChannel( unsigned int chan_num )
        {
            if (chan_num >= max_chans )
                return false;
            return true;
        }

        virtual bool updateProperties( const PropertyBag& bag )
        {
            /*
             * <simple name="Channels" type="integer"><value>8</value</simple>
             * <sequence>
             */
            return true; //decomposeProperty( max_chans, bag);
        }
    protected:
        Property<int> max_chans;

        std::vector<double> set_point;
        DataObjectInterface< std::vector<double> >* setp_DObj;
        DataObjectInterface< std::vector<double> >* outp_DObj;
    };

}

#endif
