/***************************************************************************
  tag: Peter Soetens  Thu Apr 22 20:40:59 CEST 2004  FeedForwardController.hpp 

                        FeedForwardController.hpp -  description
                           -------------------
    begin                : Thu April 22 2004
    copyright            : (C) 2004 Peter Soetens
    email                : peter.soetens@mech.kuleuven.ac.be
 
 ***************************************************************************
 *   This library is free software; you can redistribute it and/or         *
 *   modify it under the terms of the GNU Lesser General Public            *
 *   License as published by the Free Software Foundation; either          *
 *   version 2.1 of the License, or (at your option) any later version.    *
 *                                                                         *
 *   This library is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *
 *   Lesser General Public License for more details.                       *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this library; if not, write to the Free Software   *
 *   Foundation, Inc., 59 Temple Place,                                    *
 *   Suite 330, Boston, MA  02111-1307  USA                                *
 *                                                                         *
 ***************************************************************************/ 
 
#ifndef ORO_FEEDFORWARDCONTROLLER_HPP
#define ORO_FEEDFORWARDCONTROLLER_HPP

#include <control_kernel/DataServer.hpp>
#include <control_kernel/KernelInterfaces.hpp>
#include <control_kernel/BaseComponents.hpp>

#pragma interface

namespace ORO_ControlKernel
{
    /**
     * The Outputs generated by the FeedForwardController.
     */
    struct FFOutput :
        public ServedTypes< std::vector<double> >
    {
        FFOutput()
        {
            this->insert(std::make_pair(0, "ChannelValues") );
        }
    };

    struct FFSetPoint :
        public ServedTypes< std::vector<double> >
    {
    };

    /**
     * @brief An Open Loop Controller component which just feedforwards the
     * setpoint values to the output dataobject.
     * @ingroup kcomps kcomp_controller
     */
    class FeedForwardController
        : public Controller<Expects<NoInput>, Expects<NoModel>, Expects<FFSetPoint>, Writes<FFOutput> >
    {
        typedef Controller<Expects<NoInput>, Expects<NoModel>, Expects<FFSetPoint>, Writes<FFOutput> > Base;
    public:
        /**
         * Forward a fixed number of channels from Setpoints to Outputs.
         */
        FeedForwardController(int num_channels =  1, const std::string& name = "FeedForwardController") 
            : Base( name ),
              max_chans("Channels", "The number of channels", num_channels)
        {
            set_point.resize(max_chans, 0.0);
        }

        virtual bool componentLoaded()
        {
            if (!Output->dObj()->Get("ChannelValues", outp_DObj))
                return false;
            outp_DObj->Set( set_point ); // this is a sort-of vector resize for the output
            return true;
        }

        virtual bool componentStartup()
        {
            if (!SetPoint->dObj()->Get("ChannelValues", setp_DObj))
                return false;
            return true;
        }            

        virtual void pull()
        {
            setp_DObj->Get( set_point );
        }

        virtual void push()      
        {
            // just propagate the setpoints.
            outp_DObj->Set( set_point );
        }

        bool isValidChannel( int chan_num )
        {
            if (chan_num >= max_chans )
                return false;
            return true;
        }

        virtual bool updateProperties( const PropertyBag& bag )
        {
            /*
             * <simple name="Channels" type="integer"><value>8</value</simple>
             * <sequence>
             */
            return true; //decomposeProperty( max_chans, bag);
        }
    protected:
        Property<int> max_chans;

        std::vector<double> set_point;
        DataObjectInterface< std::vector<double> >* setp_DObj;
        DataObjectInterface< std::vector<double> >* outp_DObj;
    };

}

#endif
