StateContext SubMachine
{
	param string test
	const int twee = 2
	var double nul = 0.

	initial state initstate {
		entry {
			const int drie = 3
			do fakecomp.printString( "submachine.initstate.entry" )
			do fakecomp.printInt( twee )
			do fakecomp.printInt( drie )
		}
		handle {
			do fakecomp.printString( "submachine.initstate.handle" )
			do fakecomp.printString( test )
			do fakecomp.printInt( twee )
		}
		exit {
			do fakecomp.printString( "submachine.initstate.exit" )
		}
	}

	final state finalstate {
		entry {
			do fakecomp.printString( "submachine.finalstate.entry" )
		}
		handle {
			do fakecomp.printString( "submachine.finalstate.handle" )
		}
		exit {
			do fakecomp.printString( "submachine.finalstate.exit" )
		}
	}
}

StateContext Machine
{
	// param string test
	const double pi = 3.1415926535897932
	SubContext SubMachine submachine( test="test" )
	
	initial state initstate {
		entry {
			do fakecomp.printString( "initstate.entry" )
			do fakecomp.printDouble( pi )
			do fakecomp.printInt( 2 )
			do fakecomp.printInt( submachine.twee )
			do fakecomp.printString( submachine.test )
			set submachine.test = "test is now something else"
			do fakecomp.printString( submachine.test )
			do Execution.startStateContext( submachine)
		}

		handle {
			do fakecomp.printString( "initstate.handle" )
			do fakecomp.printInt( submachine.twee )
			do fakecomp.printString( fakecomp.someString )
		}

		exit {
			do fakecomp.printString( "initstate.exit" )
		}

		transitions {
		}
	}
	final state finalstate {
		entry {
			do fakecomp.printString( "finalstate.entry" )
		}

		handle {
			do fakecomp.printString( "finalstate.handle" )
		}
	
		exit { 
			do fakecomp.printString( "finalstate.exit" )
		}

		transitions {
		}
	}
	state extra {
		entry {
			do fakecomp.printString( "extra.entry" )
		}

		handle {
			do fakecomp.printString( "extra.handle" )
		}
	
		exit { 
			do fakecomp.printString( "extra.exit" )
		}

		transitions {
		}
	}
}

RootContext Machine machine()
