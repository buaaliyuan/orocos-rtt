<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>

<article>
  <articleinfo>
    <title>
      The Orocos Task Intro
    </title>
    <subtitle>Beyond 'Hello World'</subtitle>
    <copyright>
      <year>2004,2005,2006</year>
      <holder>Peter Soetens</holder>
    </copyright>
    
    <abstract>
      <para>
	This document describes the &orocos; Task Intro demo wich
	demonstrates all communication primitives of Orocos in
	a complexer application setup.
      </para>
    </abstract>
    
    <revhistory>
      <revision>
	<revnumber>0.25.0</revnumber>
	<date>9 Auguts 2006</date>
	<authorinitials>PS</authorinitials>
	<revremark>Split document from TaskContext manual.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section id="task-context-intro">
    <title>Introduction</title>
    <para>
      This manual documents how multi-threaded components can be defined in &orocos;
      such that they form a thread-safe robotics/machine control application.
      Each control component is defined as a "TaskContext", which defines 
      the "context" in which the component task is executed. The context
      is built by the five Orocos primitives: Event, Property, Command, Method
      and Data Port. The are introduced extensively in the Component Builder's
      Manual.
    </para>
    <figure id="fig-task-peers">
      <title>
	Tasks Run in Threads
      </title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="TaskPeers" />
	</imageobject>
	<caption>
	  <para>
	    Tasks run in (periodic) threads.
	  </para>
	</caption>
      </mediaobject>
    </figure>
    <para>
      A task is a basic unit of functionality which executes one or
      more (real-time) programs in a single thread.  The program can
      vary from a mere C function over a real-time program script to a
      real-time hierarchical state machine. Real-time tasks can
      communicate with non real-time tasks (and vice versa)
      transparantly.
    </para>
    <para>
      This demo demonstrates
      <itemizedlist>
	<listitem>
	  <para>User interaction with components through a console reader.</para>
	</listitem>
	<listitem>
	  <para>Thread-safe, inter-thread function calls.</para>
	</listitem>
	<listitem>
	  <para>Communication between hard real-time and non real-time threads.</para>
	</listitem>
	<listitem>
	  <para>State machines defined as real-time scripts.</para>
	</listitem>
	<listitem>
	  <para>Periodic and non periodic function execution.</para>
	</listitem>
	<listitem>
	  <para>Command usage and emitting an Event upon command completion.</para>
	</listitem>
      </itemizedlist>
    </para>
    <figure id="fig-a-task-context">
      <title>
	Schematic Overview of a TaskContext
      </title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="ATaskContext" />
	</imageobject>
	<caption>
	  <para>The Execution Flow is formed by Programs and
	    State Machines sending commands, events,... to Peer Tasks. The Data Flow
	    is the propagation of data from one task to another, where
	    one producer can have multiple consumers and vice versa.
	  </para>
	</caption>
      </mediaobject>
    </figure>
  </section>
  <section>
    <title>Introduction</title>
    <para>
      This manual introduces tasks through the "taskintro"
      application, which can be downloaded from Orocos.org.  It
      contains three TaskContexts, each showing some features and
      possibilities, <xref linkend="fig-task-intro"/>. The 'FactoringTask' waits for a command to factor
      a number in its primes. When done, it fires an event with the
      result.  The 'ReactiveTask' is a periodic task which waits for
      the events to happen when it is running. The 'PeriodicTask' can
      count to a certain number in each periodic step, when given the
      command to do so. We show some example commands, but the
      application has more methods and commands than presented here.
    </para>
    <figure id="fig-task-intro">
      <title>
	Schematic Overview of the Example.
      </title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="TaskIntro" />
	</imageobject>
	<caption>
	  <para>Three tasks form a network and interact. The
	  TaskBrowser can visit any task.
	  </para>
	</caption>
      </mediaobject>
    </figure>
  </section>
  <section>
    <title>Application setup</title>
    <para>
      The way we interact with TaskContexts during development of an
      Orocos application is through the TaskBrowser.  The
      <classname>RTT::TaskBrowser</classname> is a powerful console tool
      which helps you to explore, execute and debug
      <classname>RTT::TaskContext</classname>s in running programs. All you
      have to do is to instantiate a TaskBrowser and enter its loop()
      method. When the program is started from a console, the
      TaskBrowser takes over user input and output.
    </para>
    <note>
      <para>
	The <classname>RTT::TaskBrowser</classname> requires the
	Orocos Program Parser package to interpret the console input.
      </para>
    </note>
    <programlisting>
  #include &lt;rtt/TaskBrowser.hpp&gt;
  #include &lt;rtt/os/main.h&gt;
  // ...

  int ORO_main( int, char** )
  {
      // Create your tasks
      <classname>RTT::TaskContext</classname>* task = ...

      // when all is setup :
      <classname>RTT::TaskBrowser</classname> tbrowser( task );

      tbrowser.loop();
      return 0;
  }
    </programlisting>
  </section>
  <section>
    <title>The TaskBrowser prompt</title>
    <para>
      The TaskBrowser uses the GNU readline library to easily
      enter commands to the tasks in your system. This means you
      can press TAB to complete your commands or press the up arrow
      to scroll through previous commands.
    </para>
    <screen>
$ ./taskintro
0.003 [Info] Parsing file CountingSM.osd
0.069 [Info] Loading StateMachine counterMachine
0.074 [Info] ReactiveTaskContext reacting to PrimeEvent !

  This console reader allows you to browse and manipulate TaskContexts.
  You can type in a command, datasource, method, expression or change variables.
  (type 'help' for instructions)
    TAB completion and HISTORY is available ('bash' like)

 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :
    </screen>
    <para>
      The first lines are printed by the Orocos RTT::Logger, which has been
      configured to display informative messages to console. You can always
      watch the log file 'orocos.log' in the same directory to see all messages.
    </para>
    <para>
      Depending on what you type, the TaskBrowser will act differently.
      The builtin commands <command>cd</command>, <command>help</command>,
      <command>quit</command> and <command>ls</command> are seen as commands
      to the TaskBrowser itself, if you typed something else,
      it tries to evaluate your command to an expression and will
      print the result to the console. If you did not type an expression,
      it tries to parse it as a command to a (peer) task. If that also
      fails, it means you made a typo and it prints the syntax error
      to console.
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>1+1</command>
      Got :1+1
   = 2
    </screen>
    <para>To display the contents of the current task, type <command>ls</command>,
      and switch to one of the listed peers with <command>cd</command>, while
      <command>cd ..</command> takes you one peer back in history :
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>ls</command>

 Attributes :
    (Attribute  ) int Counter
    (Attribute  ) int Target
    (Attribute  ) double SpeedOfLight
    (Property   ) std::string Parameter
    (Property   ) PropertyBag ItemCollection

 Objects    :  this
 Peers      :  FactoringTask ReactiveTask states

 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>cd FactoringTask</command>
   Switched to : FactoringTask

 In Task FactoringTask. (Status of last Command : none )
 (type 'ls' for context info) :ls

 Attributes :
    (Attribute  ) int Priority

 Objects    :  this
 Peers      :  PeriodicTask ReactiveTask

 In Task FactoringTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>cd ..</command>

 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :
    </screen>
    <note>
    <para>To get a quick overview of the commands, type
      <command>help</command>.
    </para>
    </note>
    <para>
      Let's revisit the output of <command>ls</command> :
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>ls</command>

 Listing PeriodicTask :

 Attributes :
    (Attribute  ) int Counter
    (Property   ) PropertyBag ItemCollection
    (Property   ) std::string Parameter
    (Attribute  ) double SpeedOfLight
    (Attribute  ) int Target

 Objects    :  this
 Peers      :  FactoringTask ReactiveTask states
    </screen>
    <para>
      First you get a list of the Properties and Attributes (alphabetical) of
      the current TaskContext. Properties can be written to disk, attributes
      are solely for script interaction. Each of them can be changed (except
      constants.) In the example, the current task has only one object: 'this'. The 'this'
      object serves like a public interface of the TaskContext. Objects contain
      methods, commands or datasources. Last, the peers are shown, two other tasks
      and 'states', which denotes that this TaskContext has a StateMachine. Likewise,
      a peer task 'programs' contains all loaded programs.
      To get a list of the Task's interface, you can always type an object name,
      for example 'this'.
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) : <command>this</command>
      Got :this
  Command    : bool countTo( int Target )
   Count to a given number using a StateMachine program.
   Target : Number to count to.
  DataSource : bool isRunning( )
   Is this GenericTaskContext started ?
  Method     : bool assert( bool MustBeTrue )
   Assert will get your program in the error state if the argument is false.
   MustBeTrue : The result of a boolean expression which must be true.
  Method     : bool loadProgram( string const&amp; Filename )
   Load an Orocos Program Script from a file.
   Filename : An ops file.
  Method     : bool loadStateMachine( string const&amp; Filename )
   Load an Orocos State Description from a file.
   Filename : An osd file.
  Method     : bool readProperties( string const&amp; Filename )
   Read Properties from a file.
   Filename : A CPF formatted XML file.
  Method     : bool start( )
   Start this GenericTaskContext.
  Method     : bool stop( )
   Stop this GenericTaskContext.
  Method     : bool unloadProgram( string const&amp; ProgramName )
   Unload an Orocos Program Script from a file.
   ProgramName : The Program's name.
  Method     : bool unloadStateMachine( string const&amp; StateMachineName )
   Unload an Orocos State Description from a file.
   StateMachineName : A name of a Root StateMachine instantiation.
  Method     : bool writeProperties( string const&amp; Filename )
   Write or update Properties to a file.
   Filename : A CPF formatted XML file.
    </screen>
    <para>
      The 'this' object is special in that the command or method must
      not be prefixed by an object name and that it appears as if the
      method is called directly on the task :
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :ReactiveTask.stop()
      Got :ReactiveTask.stop()
   = true
    </screen>
    <para>
      'Methods' and 'DataSources' are executed directly by the TaskBrowser itself,
      and then it prints the result. The return value of stop() was a boolean,
      which is 'true'.
    </para>
    <para>
      When a 'Command' is entered, it is sent to the TaskContext itself, which 
      will execute it in its own thread. The different stages of its lifetime are
      displayed by the prompt. Hitting enter will refresh the status line.
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : <emphasis>none</emphasis> )
 (type 'ls' for context info) :<command>countTo(1000)</command>
      Got :countTo(1000)

 In Task PeriodicTask. (Status of last Command : <emphasis>queued</emphasis>)
 (type 'ls' for context info) :2589.528 [Info] PeriodicTaskContext counts to 1000.


 In Task PeriodicTask. (Status of last Command : <emphasis>busy</emphasis> )
 (type 'ls' for context info) :

 In Task PeriodicTask. (Status of last Command : <emphasis>done</emphasis> )
 (type 'ls' for context info) :
    </screen>
    <para>
      A Command might be rejected (return false) by the receiving TaskContext :
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : <emphasis>done</emphasis> )
 (type 'ls' for context info) :<command>countTo(-20)</command>
      Got :countTo(-20)

 In Task PeriodicTask. (Status of last Command : <emphasis>queued</emphasis> )
 (type 'ls' for context info) :

 In Task PeriodicTask. (Status of last Command : <emphasis>fail</emphasis> )
 (type 'ls' for context info) :         
    </screen>
  </section>
  <section>
    <title>Debugging Scripts and Tasks</title>
    <para>
      Besides giving commands to tasks, you can alter the attributes of 
      any task, program or state machine. The TaskBrowser will confirm
      validity of the assignment with 'true' or 'false' :
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>ls states.counterMachine</command>

 Listing counterMachine :

 Attributes :
   int multiplier

 Objects      : this
 StateMachines: counterMachine
 Peers        : states

 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>states.counterMachine.multiplier = 20</command>
      Got :states.counterMachine.multiplier = 20
   = true

 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>states.counterMachine.multiplier</command>
      Got :states.counterMachine.multiplier
   = 20

 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>countTo(200)</command>
      Got :countTo(200)

 In Task PeriodicTask. (Status of last Command : queued )
 (type 'ls' for context info) :60.272 [Info] PeriodicTaskContext counts to 200.


 In Task PeriodicTask. (Status of last Command : done )
 (type 'ls' for context info) :      
    </screen>
    <para>
      Last but not least, hitting TAB twice, will show you a list of
      possible completions, such as peers or commands :
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : fail )
 (type 'ls' for context info) :
Counter             cd ..               readProperties
FactoringTask.      countTo             start
ItemCollection      help                states.
Parameter           isRunning           stop
ReactiveTask.       loadProgram         unloadProgram
SpeedOfLight        loadStateMachine    unloadStateMachine
Target              ls                  writeProperties
assert              peers
cd                  quit
 (type 'ls' for context info) : 
    </screen>
    <para>
      TAB completion works even across peers, such that you can type
      a TAB completed command to another peer than the current peer.
    </para>
    <para>
      The TaskBrowser is application independent, so that your enduser-application
      might need a more suitable interface. However, for testing and
      inspecting what is happening inside your real-time programs,
      it is a very useful tool.
    </para>
  </section>
  <section>
    <title>Script listings</title>
    <para>
      The taskintro loads a state machine in the PeriodicTask.
      One can list the state machine by writing:
    </para>
    <screen>
 In Task PeriodicTask. (Status of last Command : none )
 (type 'ls' for context info) :<command>list counterMachine</command>
    8     initial state Waiting
    9     {
   10   entry {
   11           set task.Counter = 0
   12           set task.Target  = 0
   13   }
   14   /**
   15    * Transition based on condition:
   16    */
   17   transitions {
R> 18           if ( task.Counter != task.Target ) then
   19                   select Counting
   20   }
   21     }
   22
   23     /**
   24      * Process a command.
   25      */
   26     state Counting
   27     { </screen>
   <para>
     The '>' arrow indicates the line that is executing and the character
     in front of it the status. R stands for running, P for paused, 
     I for inactive, A for active and E for error. By typing <command>list</command>
     again, the following lines are printed. By typing <command>list N</command>,
     where N is a line number, the listing around that line is printed.
   </para>
   <para>
     The same can be done for listing program scripts.
   </para>
  </section>
</article>
