#!/usr/bin/python
#
# A script to generate an ecos.db file from an existing package directory
# ecosdbgen.py (c) 2003 Peter Soetens
#
# ***************************************************************************
# *                                                                         *
# *   This program is free software; you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation; either version 2 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# ***************************************************************************/
"""
File : ecosdbgen.py

Usage : python ecosdbgen.py [path/to/repository/root]

The current directory is processed if no path is given and output is generated
on stdout.
"""


import os
import re
import sys
from optparse import OptionParser

def package_factory(arg, dirname, filelist):
    "Create package found in dirname (if any)"
    pat = re.compile(r"\w+\.cdl$")
    for fn in filelist:
        if pat.match(fn) :
            p = Package()
            if p.parse_script(dirname, fn):
                if not arg.Dict.has_key(p.name):
                    arg.add_package(p)
    

class EcosDB :
    "Our own db of found packages"

    def __init__(self, out = sys.stdout ) :
        self.List = []
        self.Dict = {}
        self.out = out
        
    def add_package(self, pack):
        self.List.append(pack)
        self.Dict[pack.name] = pack

    def print_packages(self):
        self.out.write("#\n#  Autogenerated ecos.db by ecosdbgen.py\n")
        self.out.write("#  ecosdbgen.py is (c) 2003 by Peter Soetens \n\n")
        for pkg in self.List:
            pkg.print_output( self.out )
            self.out.write("\n")
        
    def find_cdl_files(self, root_dir ):
        os.path.walk( root_dir, package_factory, self)

    

class Package :
    "The contents of an ecos package"
    def __init__(self) :
        pass
    
    def parse_script(self, _dir, _script) :
        f = open( _dir + '/' + _script, 'r')
        self.script = _script
        if _dir.find('/cdl') != -1:
            _dir = _dir[ :_dir.rfind("/cdl") ] # cut off cdl part (if any)
        self.directory = _dir[ :_dir.rfind("/") ] # cut off version
        
        name_pat = re.compile(r"\s*cdl_package\s(\w*)\s{\s*") # extract the name
        disp_pat = re.compile(r"(display\s\"(.*)\")") # extract the display message
        descr_pat = re.compile(r"\s*description\s\"(.*)\"") # extract the description
        alias_pat = re.compile(r"\w\w\wPKG_(\w+)") # extract the alias
        text = f.read() # the whole file
        
        res = name_pat.search(text)
        if res :
            self.name    = res.group(1)
        else:
            return None

        res = disp_pat.search( text )
        if res :
            self.display = res.group(2)
        else:
            self.display = "Display Property not found"

        res = alias_pat.search( self.name )
        if res :
            self.alias   = res.group(1).lower()
        
        return self

        # TODO : Description, is this needed ?

    def print_output(self, _out=sys.stdout):
        _out.write("package "+self.name+" {\n")
        _out.write("  alias { \""+self.display+"\" "+self.alias+" }\n")
        _out.write("  directory "+self.directory+"\n")
        _out.write("  script "+self.script+"\n")
        _out.write("}\n")

# Option Parser
myusage = "\n    %prog [options] \n" \
          " %prog generates an ecos.db file to be used with the ecos tools."


parser = OptionParser( usage=myusage, version = "%prog 0.1")
parser.add_option("-R", "--repository", dest="repository", default=".",
                  help="The path to the eCos repository [default='./']", metavar="PATH")
parser.add_option("-q", "--quiet",
                  action="store_true", dest="quiet", default=False,
                  help="don't print any messages to stdout")
parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose", 
                  help="make lots of noise")
parser.add_option("-o", "--output",
                  action="store", dest="output", default="", metavar="FILE",
                  help="The output file to store the results in. [default : stdout]")

# interpret given options
(options, args) = parser.parse_args()

repository = options.repository
output  = options.output
verbose = options.verbose
quiet   = options.quiet

# Script start

if len(output) == 0:
    mydb = EcosDB(sys.stdout)
else:
    mydb = EcosDB( open( output, 'w' ))

mydb.find_cdl_files( repository )

#print them to output
mydb.print_packages()
                   
    

        
        
        
    

