// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// be/be_codegen.cpp:910

#include "rtt/corba/FactoriesI.h"
#include "rtt/corba/ExecutionI.h"
#include "rtt/OperationFactory.hpp"

using namespace Orocos;


using namespace RTT;
using namespace RTT::Corba;
using namespace std;

// Implementation skeleton constructor
Orocos_MethodInterface_i::Orocos_MethodInterface_i (MethodFactory* gmf)
    :mfact(gmf)
{
}

// Implementation skeleton destructor
Orocos_MethodInterface_i::~Orocos_MethodInterface_i (void)
{
}

::Orocos::MethodList * Orocos_MethodInterface_i::getMethods (
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
    MethodList_var rlist = new MethodList();

    vector<string> flist = mfact->getNames();
    rlist->length( flist.size() );
    for (size_t i=0; i != flist.size(); ++i)
        rlist[i] = CORBA::string_dup( flist[i].c_str() );
    return rlist._retn();
}

::Orocos::Descriptions * Orocos_MethodInterface_i::getArguments (
      const char* method
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
      ,Orocos::NoSuchNameException
      ))
{
    Descriptions_var ret = new Descriptions();
    if ( mfact->hasMember( string( method ) ) == false )
        throw Orocos::NoSuchNameException( method );
    // method found, convert args:
    MethodFactory::Descriptions args = mfact->getArgumentList( string(method) );
    ret->length( args.size() );
    for (size_t i =0; i != args.size(); ++i) {
        ret[i].name = CORBA::string_dup( args[i].name.c_str() );
        ret[i].description = CORBA::string_dup( args[i].description.c_str() );
        ret[i].type = CORBA::string_dup( args[i].type.c_str() );
    }
    return ret._retn();
}
  
 char * Orocos_MethodInterface_i::getResultType (
      const char* method
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
      ,Orocos::NoSuchNameException
    ))
{
    if ( mfact->hasMember( string( method ) ) == false )
        throw Orocos::NoSuchNameException( method );
    return CORBA::string_dup( mfact->getResultType( string(method) ).c_str() );
}
  
 char * Orocos_MethodInterface_i::getDescription (
      const char* method
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
      ,Orocos::NoSuchNameException
    ))
{
    if ( mfact->hasMember( string( method ) ) == false )
        throw Orocos::NoSuchNameException( method );
    return CORBA::string_dup( mfact->getDescription( string(method) ).c_str() );
}

::Orocos::Method_ptr Orocos_MethodInterface_i::createMethod (
    const char * method,
    const ::Orocos::Arguments& args
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    ,Orocos::NoSuchNameException
    ,Orocos::WrongNumbArgException
    ,Orocos::WrongTypeArgException
  ))
{
    if ( mfact->hasMember( string( method ) ) == false )
        throw Orocos::NoSuchNameException( method );
    // convert Corba args to C++ args.
    MethodFactory::Arguments nargs;
    nargs.reserve( args.length() );
    for (size_t i =0; i != args.length(); ++i)
        nargs.push_back( ExpressionProxy::Create( Expression::_duplicate( args[i] ) ) );
    // create a local data source and a new method servant to serve it.
    try {
        return mfact->produce(method, nargs )->method();
    } catch ( name_not_found_exception& nnf ) {
        throw Orocos::NoSuchNameException( method );
    } catch ( wrong_number_of_args_exception& wna ) {
        throw Orocos::WrongNumbArgException( wna.wanted, wna.received );
    } catch (wrong_types_of_args_exception& wta ) {
        throw Orocos::WrongTypeArgException( wta.whicharg, wta.expected_.c_str(), wta.received_.c_str() );
    }
    return Orocos::Method::_nil();
}

::Orocos::Method_ptr Orocos_MethodInterface_i::createMethodAny (
    const char * method,
    const ::Orocos::AnyArguments& args
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    ,Orocos::NoSuchNameException
    ,Orocos::WrongNumbArgException
    ,Orocos::WrongTypeArgException
  ))
{
    if ( mfact->hasMember( string( method ) ) == false )
        throw Orocos::NoSuchNameException( method );
    // convert Corba args to C++ args.
    MethodFactory::Arguments nargs;
    nargs.reserve( args.length() );
    for (size_t i =0; i != args.length(); ++i)
        nargs.push_back( new ValueDataSource<CORBA::Any_var>( new CORBA::Any( args[i] ) ) );
    // create a local data source and a new method servant to serve it.
    try {
        return mfact->produce(method, nargs )->method();
    } catch ( name_not_found_exception& nnf ) {
        throw Orocos::NoSuchNameException( method );
    } catch ( wrong_number_of_args_exception& wna ) {
        throw Orocos::WrongNumbArgException( wna.wanted, wna.received );
    } catch (wrong_types_of_args_exception& wta ) {
        throw Orocos::WrongTypeArgException( wta.whicharg, wta.expected_.c_str(), wta.received_.c_str() );
    }
    return Orocos::Method::_nil();
}

// Implementation skeleton constructor
Orocos_CommandInterface_i::Orocos_CommandInterface_i (CommandFactory* gcf)
    :mfact(gcf)
{
}

// Implementation skeleton destructor
Orocos_CommandInterface_i::~Orocos_CommandInterface_i (void)
{
}

::Orocos::CommandList * Orocos_CommandInterface_i::getCommands (
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
    CommandList_var rlist = new CommandList();
    vector<string> flist = mfact->getNames();
    rlist->length( flist.size() );
    for (size_t i=0; i != flist.size(); ++i)
        rlist[i] = CORBA::string_dup( flist[i].c_str() );
    return rlist._retn();
}

::Orocos::Descriptions * Orocos_CommandInterface_i::getArguments (
      const char* command
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ,Orocos::NoSuchNameException
    ))
{
    Descriptions_var ret = new Descriptions();
    if ( mfact->hasMember( string( command ) ) == false )
        throw Orocos::NoSuchNameException( command );
    // method found, convert args:
    CommandFactory::Descriptions args = mfact->getArgumentList( string(command) );
    ret->length( args.size() );
    for (size_t i =0; i != args.size(); ++i) {
        ret[i].name = CORBA::string_dup( args[i].name.c_str() );
        ret[i].description = CORBA::string_dup( args[i].description.c_str() );
        ret[i].type = CORBA::string_dup( args[i].type.c_str() );
    }
    return ret._retn();
}

  
 char * Orocos_CommandInterface_i::getResultType (
      const char* command
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ,Orocos::NoSuchNameException
    ))
{
    if ( mfact->hasMember( string( command ) ) == false )
        throw Orocos::NoSuchNameException( command );
    return CORBA::string_dup( mfact->getResultType( string(command) ).c_str() );
}
  
 char * Orocos_CommandInterface_i::getDescription (
      const char* command
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ,Orocos::NoSuchNameException
    ))
{
    if ( mfact->hasMember( string( command ) ) == false )
        throw Orocos::NoSuchNameException( command );
    return CORBA::string_dup( mfact->getDescription( string(command) ).c_str() );
}

::Orocos::Command_ptr Orocos_CommandInterface_i::createCommand (
    const char * command,
    const ::Orocos::Arguments& args
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    ,Orocos::NoSuchNameException
    ,Orocos::WrongNumbArgException
    ,Orocos::WrongTypeArgException
  ))
{
  // Add your implementation here
    if ( mfact->hasMember( string( command ) ) == false )
        throw Orocos::NoSuchNameException( command );
    // convert Corba args to C++ args.
    // Use CommandC:
    try {
        CommandC comc(mfact, command);
        for (size_t i =0; i != args.length(); ++i)
            comc.arg( DataSourceBase::shared_ptr(ExpressionProxy::Create( Expression::_duplicate(args[i]) )) );
        // servant uses that object:
        Orocos_Command_i* com = new Orocos_Command_i( comc );
        return com->_this();
    } catch ( name_not_found_exception& nnf ) {
        throw Orocos::NoSuchNameException( command );
    } catch ( wrong_number_of_args_exception& wna ) {
        throw Orocos::WrongNumbArgException( wna.wanted, wna.received );
    } catch (wrong_types_of_args_exception& wta ) {
        throw Orocos::WrongTypeArgException( wta.whicharg, wta.expected_.c_str(), wta.received_.c_str() );
    }
    return ::Orocos::Command::_nil();
}

::Orocos::Command_ptr Orocos_CommandInterface_i::createCommandAny (
    const char * command,
    const ::Orocos::AnyArguments& args
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    ,Orocos::NoSuchNameException
    ,Orocos::WrongNumbArgException
    ,Orocos::WrongTypeArgException
  ))
{
  // Add your implementation here
    if ( mfact->hasMember( string( command ) ) == false )
        throw Orocos::NoSuchNameException( command );
    // convert Corba args to C++ args.
    // Use CommandC:
    try {
        CommandC comc(mfact, string( command ) );
        for (size_t i =0; i != args.length(); ++i)
            comc.arg( DataSourceBase::shared_ptr( new ValueDataSource<CORBA::Any_var>( new CORBA::Any( args[i] ) )));
        // servant uses that object:
        Orocos_Command_i* com = new Orocos_Command_i( comc );
        return com->_this();
    } catch ( name_not_found_exception& nnf ) {
        throw Orocos::NoSuchNameException( command );
    } catch ( wrong_number_of_args_exception& wna ) {
        throw Orocos::WrongNumbArgException( wna.wanted, wna.received );
    } catch (wrong_types_of_args_exception& wta ) {
        throw Orocos::WrongTypeArgException( wta.whicharg, wta.expected_.c_str(), wta.received_.c_str() );
    }
    return ::Orocos::Command::_nil();
}

