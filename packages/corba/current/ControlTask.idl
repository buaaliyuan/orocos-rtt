#ifndef ORO_CONTROL_TASK_IDL
#define ORO_CONTROL_TASK_IDL

/**
 * @file ControlTask.idl
 * This file defines the interface of an
 * Orocos Control Task Component.
 */

// avoid inclusion of this header since tao_idl is broken.
//#include <orbsvcs/CosPropertyService.idl>
#include "Factories.idl"
#include "Attributes.idl"
#include "ScriptingAccess.idl"

// Forward declaration.
module CosPropertyService
{
  interface PropertySet;
};


module Orocos
{

  /**
   * An Orocos TaskObject which hosts a method and command
   * interface.
   */
  interface ControlObject
  {
    /**
     * Return the name of this object.
     */
    string getName();
    
    /**
     * Return the description of this object.
     */
    string getDescription();
    
    /**
     * Synchronous Method Interface.
     */
    MethodInterface methods();

    /**
     * Asynchronous Command Interface.
     */
    CommandInterface commands();
  };

  /**
   * A ControlTask is the main entry point of a distributed
   * component.
   */
  interface ControlTask : ControlObject
  {
    typedef sequence<string> ControlTaskNames;

    /**
     * Query the properties of this interface as a CosPropertyService::PropertySet.
     */
    CosPropertyService::PropertySet propertySet();

    /**
     * Query the attributes of this interface.
     */
    AttributeInterface attributes();

    /**
     * The ScriptingAccess, for program and state machine
     * information of this Task.
     */
    ScriptingAccess scripting();

    /**
     * ControlTask Browsing functions.
     */

    /**
     * Get a list of all the peers this task is connected to.
     */
    ControlTaskNames getPeerList( );

    /**
     * Get a peer this task is connected to.
     */
    ControlTask getPeer( in string name );

    /**
     * Has this task a peer with given name ?
     */
    boolean hasPeer( in string name );

    /**
     * Add a one-way peer connection.
     */
    boolean addPeer( in ControlTask p, in string alias );

    /**
     * Remove a one-way peer connection.
     */
    boolean removePeer( in string name );

    /**
     * Create a two-way peer connection.
     */
    boolean connectPeers( in ControlTask p );

    /**
     * Destroy a two-way peer connection.
     */
    boolean disconnectPeers( in string name );

    /**
     * Get a list of all the objects this task is connected to.
     */
    ObjectList getObjectList( );

    /**
     * Get a object this task is connected to.
     */
    ControlObject getObject( in string name );

    /**
     * Has this task a object with given name ?
     */
    boolean hasObject( in string name );

  };
};

#endif
