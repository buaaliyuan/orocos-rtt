/***************************************************************************
  tag: Peter Soetens  Wed Jan 18 14:09:49 CET 2006  CosPropertyServiceI.h 

                        CosPropertyServiceI.h -  description
                           -------------------
    begin                : Wed January 18 2006
    copyright            : (C) 2006 Peter Soetens
    email                : peter.soetens@fmtc.be
 
 ***************************************************************************
 *   This library is free software; you can redistribute it and/or         *
 *   modify it under the terms of the GNU Lesser General Public            *
 *   License as published by the Free Software Foundation; either          *
 *   version 2.1 of the License, or (at your option) any later version.    *
 *                                                                         *
 *   This library is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *
 *   Lesser General Public License for more details.                       *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this library; if not, write to the Free Software   *
 *   Foundation, Inc., 59 Temple Place,                                    *
 *   Suite 330, Boston, MA  02111-1307  USA                                *
 *                                                                         *
 ***************************************************************************/
 
 
// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// be/be_codegen.cpp:859

#ifndef COSPROPERTYSERVICEI_H_
#define COSPROPERTYSERVICEI_H_

#include <orbsvcs/CosPropertyServiceS.h>
#include "../PropertyBag.hpp"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
#pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

namespace RTT
{
	class AttributeRepository;
}

class  CosPropertyService_PropertySetFactory_i
  : public virtual POA_CosPropertyService::PropertySetFactory
{
public:
  // Constructor 
  CosPropertyService_PropertySetFactory_i (void);
  
  // Destructor 
  virtual ~CosPropertyService_PropertySetFactory_i (void);
  
  virtual
  ::CosPropertyService::PropertySet_ptr create_propertyset (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  ::CosPropertyService::PropertySet_ptr create_constrained_propertyset (
      const ::CosPropertyService::PropertyTypes & allowed_property_types,
      const ::CosPropertyService::Properties & allowed_properties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::ConstraintNotSupported
    ));
  
  virtual
  ::CosPropertyService::PropertySet_ptr create_initial_propertyset (
      const ::CosPropertyService::Properties & initial_properties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
};

class  CosPropertyService_PropertySetDefFactory_i
  : public virtual POA_CosPropertyService::PropertySetDefFactory
{
public:
  // Constructor 
  CosPropertyService_PropertySetDefFactory_i (void);
  
  // Destructor 
  virtual ~CosPropertyService_PropertySetDefFactory_i (void);
  
  virtual
  ::CosPropertyService::PropertySetDef_ptr create_propertysetdef (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  ::CosPropertyService::PropertySetDef_ptr create_constrained_propertysetdef (
      const ::CosPropertyService::PropertyTypes & allowed_property_types,
      const ::CosPropertyService::PropertyDefs & allowed_property_defs
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::ConstraintNotSupported
    ));
  
  virtual
  ::CosPropertyService::PropertySetDef_ptr create_initial_propertysetdef (
      const ::CosPropertyService::PropertyDefs & initial_property_defs
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
};

class CosPropertyService_PropertyNamesIterator_i;
class CosPropertyService_PropertiesIterator_i;

class  CosPropertyService_PropertySet_i
  : public virtual POA_CosPropertyService::PropertySet
{
    RTT::PropertyBag* bag;
	bool is_attr;
	// store all servant iterators.
	typedef std::vector<CosPropertyService_PropertyNamesIterator_i*> NV;
    typedef std::vector<CosPropertyService_PropertiesIterator_i*> PV;
	PV p_iters;
	NV n_iters;

	/**
	 * Called to invalidate all iterators.
	 */
	void modified();

 public:
	/**
	 * Erase servants from map.
	 */
	void eraseNIter(CosPropertyService_PropertyNamesIterator_i*);
	void erasePIter(CosPropertyService_PropertiesIterator_i*);
public:
  // Constructor 
  CosPropertyService_PropertySet_i ( RTT::PropertyBag* source );

  // Constructor 
  CosPropertyService_PropertySet_i ( RTT::AttributeRepository* attrs );
  
  // Destructor 
  virtual ~CosPropertyService_PropertySet_i (void);
  
  virtual
  void define_property (
      const char * property_name,
      const ::CORBA::Any & property_value
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::InvalidPropertyName,
      ::CosPropertyService::ConflictingProperty,
      ::CosPropertyService::UnsupportedTypeCode,
      ::CosPropertyService::UnsupportedProperty,
      ::CosPropertyService::ReadOnlyProperty
    ));
  
  virtual
  void define_properties (
      const ::CosPropertyService::Properties & nproperties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
  
  virtual
  CORBA::ULong get_number_of_properties (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void get_all_property_names (
      ::CORBA::ULong how_many,
      ::CosPropertyService::PropertyNames_out property_names,
      ::CosPropertyService::PropertyNamesIterator_out rest
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Any * get_property_value (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::PropertyNotFound,
      ::CosPropertyService::InvalidPropertyName
    ));
  
  virtual
  CORBA::Boolean get_properties (
      const ::CosPropertyService::PropertyNames & property_names,
      ::CosPropertyService::Properties_out nproperties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void get_all_properties (
      ::CORBA::ULong how_many,
      ::CosPropertyService::Properties_out nproperties,
      ::CosPropertyService::PropertiesIterator_out rest
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void delete_property (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::PropertyNotFound,
      ::CosPropertyService::InvalidPropertyName,
      ::CosPropertyService::FixedProperty
    ));
  
  virtual
  void delete_properties (
      const ::CosPropertyService::PropertyNames & property_names
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
  
  virtual
  CORBA::Boolean delete_all_properties (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Boolean is_property_defined (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::InvalidPropertyName
    ));
};

class  CosPropertyService_PropertySetDef_i
  : public virtual POA_CosPropertyService::PropertySetDef
{
public:
  // Constructor 
  CosPropertyService_PropertySetDef_i (void);
  
  // Destructor 
  virtual ~CosPropertyService_PropertySetDef_i (void);
  
  virtual
  void get_allowed_property_types (
      ::CosPropertyService::PropertyTypes_out property_types
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void get_allowed_properties (
      ::CosPropertyService::PropertyDefs_out property_defs
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void define_property_with_mode (
      const char * property_name,
      const ::CORBA::Any & property_value,
      ::CosPropertyService::PropertyModeType property_mode
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::InvalidPropertyName,
      ::CosPropertyService::ConflictingProperty,
      ::CosPropertyService::UnsupportedTypeCode,
      ::CosPropertyService::UnsupportedProperty,
      ::CosPropertyService::UnsupportedMode,
      ::CosPropertyService::ReadOnlyProperty
    ));
  
  virtual
  void define_properties_with_modes (
      const ::CosPropertyService::PropertyDefs & property_defs
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
  
  virtual
  ::CosPropertyService::PropertyModeType get_property_mode (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::PropertyNotFound,
      ::CosPropertyService::InvalidPropertyName
    ));
  
  virtual
  CORBA::Boolean get_property_modes (
      const ::CosPropertyService::PropertyNames & property_names,
      ::CosPropertyService::PropertyModes_out property_modes
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void set_property_mode (
      const char * property_name,
      ::CosPropertyService::PropertyModeType property_mode
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::InvalidPropertyName,
      ::CosPropertyService::PropertyNotFound,
      ::CosPropertyService::UnsupportedMode
    ));
  
  virtual
  void set_property_modes (
      const ::CosPropertyService::PropertyModes & property_modes
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
  
  virtual
  void define_property (
      const char * property_name,
      const ::CORBA::Any & property_value
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::InvalidPropertyName,
      ::CosPropertyService::ConflictingProperty,
      ::CosPropertyService::UnsupportedTypeCode,
      ::CosPropertyService::UnsupportedProperty,
      ::CosPropertyService::ReadOnlyProperty
    ));
  
  virtual
  void define_properties (
      const ::CosPropertyService::Properties & nproperties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
  
  virtual
  CORBA::ULong get_number_of_properties (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void get_all_property_names (
      ::CORBA::ULong how_many,
      ::CosPropertyService::PropertyNames_out property_names,
      ::CosPropertyService::PropertyNamesIterator_out rest
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Any * get_property_value (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::PropertyNotFound,
      ::CosPropertyService::InvalidPropertyName
    ));
  
  virtual
  CORBA::Boolean get_properties (
      const ::CosPropertyService::PropertyNames & property_names,
      ::CosPropertyService::Properties_out nproperties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void get_all_properties (
      ::CORBA::ULong how_many,
      ::CosPropertyService::Properties_out nproperties,
      ::CosPropertyService::PropertiesIterator_out rest
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void delete_property (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::PropertyNotFound,
      ::CosPropertyService::InvalidPropertyName,
      ::CosPropertyService::FixedProperty
    ));
  
  virtual
  void delete_properties (
      const ::CosPropertyService::PropertyNames & property_names
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::MultipleExceptions
    ));
  
  virtual
  CORBA::Boolean delete_all_properties (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Boolean is_property_defined (
      const char * property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException,
      ::CosPropertyService::InvalidPropertyName
    ));
};

class  CosPropertyService_PropertyNamesIterator_i
  : public virtual POA_CosPropertyService::PropertyNamesIterator
{
	CosPropertyService_PropertySet_i* mowner;
	RTT::PropertyBag::iterator bag_it, origin;
	RTT::PropertyBag::iterator bag_end;
public:
  // Constructor 
  CosPropertyService_PropertyNamesIterator_i (CosPropertyService_PropertySet_i* owner, RTT::PropertyBag::iterator begin, RTT::PropertyBag::iterator end);
  
  // Destructor 
  virtual ~CosPropertyService_PropertyNamesIterator_i (void);
  
  virtual
  void reset (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Boolean next_one (
      CORBA::String_out property_name
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Boolean next_n (
      ::CORBA::ULong how_many,
      ::CosPropertyService::PropertyNames_out property_names
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void destroy (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
};

class  CosPropertyService_PropertiesIterator_i
  : public virtual POA_CosPropertyService::PropertiesIterator
{
	CosPropertyService_PropertySet_i* mowner;
	RTT::PropertyBag::iterator bag_it, origin;
	RTT::PropertyBag::iterator bag_end;
public:
  // Constructor 
  CosPropertyService_PropertiesIterator_i (	CosPropertyService_PropertySet_i* owner, RTT::PropertyBag::iterator begin, RTT::PropertyBag::iterator end);
  
  // Destructor 
  virtual ~CosPropertyService_PropertiesIterator_i (void);
  
  virtual
  void reset (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Boolean next_one (
      ::CosPropertyService::Property_out aproperty
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  CORBA::Boolean next_n (
      ::CORBA::ULong how_many,
      ::CosPropertyService::Properties_out nproperties
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  virtual
  void destroy (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
};


#endif /* COSPROPERTYSERVICEI_H_  */

