#ifndef ORO_EXECUTION_IDL
#define ORO_EXECUTION_IDL

module Orocos
{

  /**
   * An expression is an object which returns a value.
   */
  interface Expression
  {
    /**
     * Retrieve the latest result of
     * evaluate(), without retriggering
     * evaluation.
     */
    any value();

    /**
     * Evaluate this expression.
     * @return true if the evaluation was succesful.
     * If the expression evaluates to a boolean, it
     * returns this boolean.
     */
    boolean evaluate();

    /**
     * Evaluate and return the result of the expression.
     */
    any get();

    /**
     * Return the type of the expression in a human readable
     * format.
     */
    string getType();

    /**
     * Return the type name of the expression as it is known
     * to the Orocos Type System.
     */
    string getTypeName();
  };

  /**
   * An expression of which the result can be set to
   * a value. An simple example is an expression consisting of
   * only a variable.
   */
  interface AssignableExpression : Expression
  {

    /**
     * Evaluate the expression and set the result
     * (which should be a reference type) to
     * a value.
     * @return false if \a value is of the wrong type.
     */
    boolean set(in any value);
    
  };

  /**
   * An Action is an object which executes a function.
   */
  interface Action
  {
    /**
     * Execute this action.
     * @return true if the action was succesful.
     * If the action evaluates to a boolean, it
     * returns this boolean.
     */
    boolean execute();

    /**
     * Reset this action.
     * Required for Actions used within a command,
     * It must be reset before execute is invoked.
     */
    void reset();

  };

  /**
   * A method is both an Expression and an Action.
   */
  interface Method : Expression, Action
  {
  };

  /**
   * A command consists of an action to be
   * executed remotely and a condition, to be
   * evaluated remotely.
   */
  interface Command
  {

    /**
     * Send and execute the contained command.
     */
    boolean execute();

    /**
     * Check if the Command was sent to the receiving task,
     * thus if execute() was called.
     * @retval true if sent to the command processor.
     * @retval false otherwise.
     */
    boolean sent();

    /**
     * Check if the Command was accepted by the receiving task.
     * @retval true if accepted by the command processor.
     * @retval false otherwise.
     */
    boolean accepted();

    /**
     * Check if the Command was executed by the receiving task.
     * @retval true if executed by the command processor.
     * @retval false otherwise.
     */
    boolean executed();

    /**
     * Check the return value of the Command when it is
     * executed.
     * @retval true if accepted() and the command returned true,
     * indicating that it is valid.
     * @retval false otherwise.
     */
    boolean valid();

    /**
     * Evaluate if the command is done.
     * @retval true if accepted(), valid() was true and the
     * completion condition was true as well.
     * @retval false otherwise.
     */
    boolean evaluate();

    /**
     * Reset the command.
     * Required before invoking execute() a second time.
     */
    void reset();

    /**
     * Create an action which will invoke execute()
     * when executed.
     */
    Action createAction();

    /**
     * Create an expression which checks evaluate() of
     * this command when evaluated.
     */
    Expression createCondition();
  };

};

#endif

